{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\BubbleChart.tsx\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { chartjsDataTemplate } from '../interfaces/SortInterfaces';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BubbleChart extends Component {\n  constructor(props) {\n    super(props);\n    this.chartReference = void 0;\n    this.chart = void 0;\n    this.timer = void 0;\n    this.isSorting = void 0;\n    this.interrupt = void 0;\n    this.uselessRefresh = void 0;\n    this.state = void 0;\n    this.props = void 0;\n    this.timeouts = void 0;\n\n    this.equals = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\n    this.state = chartjsDataTemplate;\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.timer = 0;\n    this.isSorting = false;\n    this.interrupt = false;\n    this.uselessRefresh = false;\n    this.timeouts = [];\n  } // randomize(size: number){\n  // \tthis.chart.data.labels = Array.from({length: size}, () => Math.floor(Math.random() * 1000));\n  // \tthis.chart.data.datasets[0].data = Array.from({ length: size }, (_, i) => (i+1).toString());\n  // }\n\n\n  bubbleSort() {\n    const labels = this.chart.data.labels;\n    const data = this.chart.data.datasets[0].data;\n    const colors = this.chart.data.datasets[0].backgroundColor;\n    let swapped;\n    let timeout = 0;\n\n    for (let i = 0; i < data.length; i++) {\n      for (let x = 0; x < i - 1; x++) {\n        if (data[x] > data[x + 1]) {\n          const temp = data[x];\n          data[x] = timeout += 100;\n          const theTimeout = this.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\n          this.timeouts.push(theTimeout);\n          swapped = true;\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.chart = this.chartReference.current.chartInstance;\n    const tempChartJSObject = chartjsDataTemplate;\n    tempChartJSObject.datasets[0].label = this.props.commands.name;\n    this.setState(tempChartJSObject);\n    console.log('did mount');\n  }\n\n  updateChartDelayed(labels, data, colors, timeout) {\n    this.timer = setTimeout(() => {\n      this.isSorting = true;\n      this.chart.data.labels = labels;\n      this.chart.data.datasets[0].data = data;\n      this.chart.data.datasets[0].backgroundColor = colors;\n      this.chart.update();\n    }, timeout);\n\n    if ([...this.chart.data.datasets[0].data].sort((x, y) => x - y) === this.chart.data.datasets[0].data) {\n      console.log('equal arrays!');\n    }\n\n    return this.timer;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer); //sortingStore.dispatch({type:''});\n  }\n\n  clearAllTimeouts() {\n    for (let timeout = 0; timeout < this.timeouts.length; timeout++) {\n      clearInterval(this.timeouts[timeout]);\n    }\n\n    this.timeouts = [];\n  }\n\n  refreshChart() {\n    const temporaryDataToSort = chartjsDataTemplate;\n    temporaryDataToSort.datasets[0].data = Array.from({\n      length: this.props.commands.arrayLength\n    }, () => Math.floor(Math.random() * 1000));\n    temporaryDataToSort.labels = Array.from({\n      length: this.props.commands.arrayLength\n    }, (_, i) => (i + 1).toString());\n    this.setState(temporaryDataToSort);\n  }\n\n  componentDidUpdate(prevProps) {\n    //console.log(`${JSON.stringify(this.props)},            ${JSON.stringify(prevProps)}`);\n    if (!(JSON.stringify(prevProps) === JSON.stringify(this.props))) {\n      console.log(this.timeouts);\n      this.bubbleSort();\n      this.uselessRefresh = this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data);\n\n      if (this.props.commands.refreshChart || this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n        this.clearAllTimeouts();\n        this.refreshChart(); //this.bubbleSort();\n      } // if(this.props.commands.refreshChart){\n      // \tthis.refreshChart();\n      // }\n      // setTimeout(() => {\n      // \tthis.bubbleSort();\n      // }, 100);\n      //\n      //\n      // this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data) ? this.uslessRefresh = true : this.uslessRefresh = false;\n      //\n      // if(!this.uslessRefresh){\n      // \tconsole.log('test');\n      // \tsetTimeout(() => {\n      // \t\tthis.bubbleSort();\n      // \t}, 100);\n      // }\n      //\n      // if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n      // \tthis.refreshChart();\n      //\n      //\n      // }\n      // if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\n      // \t//this.refreshChart();\n      // \t//sortingStore.dispatch({type:''});\n      // \t//console.log('Is not sorting, refreshing chart...');\n      // \tthis.refreshChart();\n      //\n      // }\n      // if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\n      // \t//console.log('Is sorting!!!...');\n      //\n      // \t//this.interrupt = true;\n      // \t//clearInterval(this.timer);\n      // \t//console.log(this.timer);\n      //\n      // }\n      // if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n      // \tif (!this.isSorting) {\n      // \t\t// console.log(`Array sorting is ${this.isSorting}, refreshing...`);\n      // \t\t// this.refreshChart();\n      // \t}\n      // }\n\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        data: this.state,\n        width: 100,\n        height: 50,\n        ref: this.chartReference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/BubbleChart.tsx"],"names":["React","Component","Bar","chartjsDataTemplate","BubbleChart","constructor","props","chartReference","chart","timer","isSorting","interrupt","uselessRefresh","state","timeouts","equals","a","b","JSON","stringify","createRef","bubbleSort","labels","data","datasets","colors","backgroundColor","swapped","timeout","i","length","x","temp","theTimeout","updateChartDelayed","slice","push","componentDidMount","current","chartInstance","tempChartJSObject","label","commands","name","setState","console","log","setTimeout","update","sort","y","componentWillUnmount","clearInterval","clearAllTimeouts","refreshChart","temporaryDataToSort","Array","from","arrayLength","Math","floor","random","_","toString","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport {BubbleCommandsInterface, chartjsDataType, chartjsDataTemplate, initialBubbleCommandsState} from '../interfaces/SortInterfaces';\r\nimport {sortingStore} from './ModalContent';\r\nimport {bubbleSort} from '../redux/SortingStateReducer';\r\n\r\n\r\n\r\nexport default class BubbleChart extends Component<any>{\r\n\tprivate chartReference: React.RefObject<any>;\r\n\tprivate chart: any;\r\n\tprivate timer: any;\r\n\tprivate isSorting: boolean;\r\n\tprivate interrupt: boolean;\r\n\tprivate uselessRefresh: boolean;\r\n\tpublic state;\r\n\tpublic props: any;\r\n\tprivate timeouts:number[];\r\n\r\n\tconstructor(props: BubbleCommandsInterface) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = chartjsDataTemplate;\r\n\r\n\t\tthis.chartReference = React.createRef<any>();\r\n\r\n\t\tthis.timer = 0;\r\n\r\n\t\tthis.isSorting = false;\r\n\r\n\t\tthis.interrupt = false;\r\n\r\n\t\tthis.uselessRefresh = false;\r\n\t\tthis.timeouts = [];\r\n\r\n\t}\r\n\r\n\t// randomize(size: number){\r\n\t// \tthis.chart.data.labels = Array.from({length: size}, () => Math.floor(Math.random() * 1000));\r\n\t// \tthis.chart.data.datasets[0].data = Array.from({ length: size }, (_, i) => (i+1).toString());\r\n\t// }\r\n\r\n\tbubbleSort() {\r\n\t\tconst labels = this.chart.data.labels;\r\n\t\tconst data = this.chart.data.datasets[0].data;\r\n\t\tconst colors = this.chart.data.datasets[0].backgroundColor;\r\n\t\tlet swapped;\r\n\t\tlet timeout = 0;\r\n\r\n\r\n\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\tfor(let x = 0; x<i-1;x++){\r\n\t\t\t\tif (data[x] > data[x + 1]) {\r\n\t\t\t\t\tconst temp = data[x];\r\n\t\t\t\t\tdata[x] = \r\n\t\t\t\t\ttimeout += 100;\r\n\t\t\t\t\tconst theTimeout = this.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\r\n\t\t\t\t\tthis.timeouts.push(theTimeout);\r\n\t\t\t\t\tswapped = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\r\n\tequals = (a:number[], b:number[]) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.chart = this.chartReference.current.chartInstance;\r\n\t\tconst tempChartJSObject = chartjsDataTemplate;\r\n\t\ttempChartJSObject.datasets[0].label = this.props.commands.name;\r\n\t\tthis.setState(tempChartJSObject);\r\n\t\tconsole.log('did mount');\r\n\t}\r\n\r\n\r\n\tupdateChartDelayed(labels: string[], data:number[], colors:string[], timeout:number) {\r\n\r\n\t\tthis.timer = setTimeout(() => {\r\n\t\t\tthis.isSorting = true;\r\n\t\t\tthis.chart.data.labels = labels;\r\n\t\t\tthis.chart.data.datasets[0].data = data;\r\n\t\t\tthis.chart.data.datasets[0].backgroundColor = colors;\r\n\t\t\tthis.chart.update();\r\n\t\t}, timeout);\r\n\r\n\t\tif( [...this.chart.data.datasets[0].data].sort((x,y)=> x-y) === this.chart.data.datasets[0].data) {\r\n\t\t\tconsole.log('equal arrays!');\r\n\t\t}\r\n\t\treturn this.timer;\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timer);\r\n\t\t//sortingStore.dispatch({type:''});\r\n\t}\r\n\r\n\r\n\tclearAllTimeouts(){\r\n\t\tfor(let timeout=0; timeout< this.timeouts.length; timeout++){\r\n\t\t\tclearInterval(this.timeouts[timeout]);\r\n\t\t}\r\n\t\tthis.timeouts=[];\r\n\t}\r\n\r\n\trefreshChart(){\r\n\t\tconst temporaryDataToSort = chartjsDataTemplate;\r\n\t\ttemporaryDataToSort.datasets[0].data = Array.from({length: this.props.commands.arrayLength}, () => Math.floor(Math.random() * 1000));\r\n\t\ttemporaryDataToSort.labels = Array.from({ length: this.props.commands.arrayLength }, (_, i) => (i+1).toString());\r\n\t\tthis.setState(temporaryDataToSort);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps:BubbleCommandsInterface) {\r\n\r\n\r\n\t\t//console.log(`${JSON.stringify(this.props)},            ${JSON.stringify(prevProps)}`);\r\n\r\n\t\tif (!(JSON.stringify(prevProps) === JSON.stringify(this.props))) {\r\n\t\t\tconsole.log(this.timeouts);\r\n\r\n\r\n\t\t\tthis.bubbleSort();\r\n\r\n\t\t\tthis.uselessRefresh = this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data);\r\n\r\n\r\n\t\t\tif( this.props.commands.refreshChart || (this.props.commands.arrayLength !== prevProps.commands.arrayLength) ){\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\t\t\t\tthis.refreshChart();\r\n\r\n\t\t\t\t//this.bubbleSort();\r\n\t\t\t}\r\n\r\n\t\t\t// if(this.props.commands.refreshChart){\r\n\t\t\t// \tthis.refreshChart();\r\n\t\t\t// }\r\n\t\t\t// setTimeout(() => {\r\n\t\t\t// \tthis.bubbleSort();\r\n\t\t\t// }, 100);\r\n\t\t\t//\r\n\t\t\t//\r\n\t\t\t// this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data) ? this.uslessRefresh = true : this.uslessRefresh = false;\r\n\t\t\t//\r\n\t\t\t// if(!this.uslessRefresh){\r\n\t\t\t// \tconsole.log('test');\r\n\t\t\t// \tsetTimeout(() => {\r\n\t\t\t// \t\tthis.bubbleSort();\r\n\t\t\t// \t}, 100);\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\t\t\t// \tthis.refreshChart();\r\n\t\t\t//\r\n\t\t\t//\r\n\t\t\t// }\r\n\r\n\r\n\t\t\t// if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\r\n\t\t\t// \t//this.refreshChart();\r\n\t\t\t// \t//sortingStore.dispatch({type:''});\r\n\t\t\t// \t//console.log('Is not sorting, refreshing chart...');\r\n\t\t\t// \tthis.refreshChart();\r\n\t\t\t//\r\n\t\t\t// }\r\n\t\t\t// if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\r\n\t\t\t// \t//console.log('Is sorting!!!...');\r\n\t\t\t//\r\n\t\t\t// \t//this.interrupt = true;\r\n\t\t\t// \t//clearInterval(this.timer);\r\n\t\t\t// \t//console.log(this.timer);\r\n\t\t\t//\r\n\t\t\t// }\r\n\t\t\t// if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\t\t\t// \tif (!this.isSorting) {\r\n\t\t\t// \t\t// console.log(`Array sorting is ${this.isSorting}, refreshing...`);\r\n\t\t\t// \t\t// this.refreshChart();\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><Bar data={this.state} width={100} height={50} ref={this.chartReference}/> </div>\r\n\t\t);\r\n\r\n\t}\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}