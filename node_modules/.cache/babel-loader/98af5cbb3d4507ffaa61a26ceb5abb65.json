{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\ModalContent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { Modal, Button, Container, Row, Col, Form } from 'react-bootstrap';\nimport { MathComponent } from 'mathjax-react';\nimport { initialCommandsState } from '../interfaces/SortInterfaces';\nimport { start, cancel } from '../rs-styles/rs-styles';\nimport { COCO } from './coco';\nimport { MemorizedBubbleChart } from './BubbleChart';\nimport { MemorizedHeapChart } from './HeapSortChart';\nimport { MemorizedQuickChart } from './QuickSortChart';\nimport { MemorizedInsertionChart } from './InsertionSortChart';\nimport { createStore } from 'redux';\nimport { SortingStateReducer, bubbleSort, bubbleSortCancelled, heapSort, heapSortCancelled, quickSort, quickSortCancelled, insertionSort, insertionSortCancelled } from '../redux/SortingStateReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const sortingStore = createStore(SortingStateReducer);\nlet sortBtnsState = {\n  bubble: '',\n  heap: '',\n  quick: '',\n  insertion: ''\n};\nsortingStore.subscribe(() => {\n  const state = sortingStore.getState();\n  sortBtnsState = state;\n});\nconst style = {\n  large: {\n    maxWidth: '100%',\n    minHeight: '100%'\n  },\n  mid: {\n    minWidth: '100%',\n    minHeight: '100%'\n  }\n};\nexport default function ModalContent({\n  state,\n  onClose\n}) {\n  _s();\n\n  const bubbleSortBtn = useRef(); //ref to bubblesort btn\n\n  const bubbleInputValue = useRef(); //ref to bubblesort input value\n\n  const heapSortBtn = useRef(); //ref to heapsort btn\n\n  const heapInputValue = useRef(); //ref to heapsort input value\n\n  const quickSortBtn = useRef(); //ref to quicksort btn\n\n  const quickInputValue = useRef(); //ref to quicksort input value\n\n  const insertionSortBtn = useRef(); //ref to quicksort btn\n\n  const insertionInputValue = useRef(); //ref to quicksort input value\n\n  const [bubbleSortCommands, setBubbleSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\n\n  const [heapSortCommands, setHeapSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\n\n  const [quickSortCommands, setQuickSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\n\n  const [insertionSortCommands, setInsertionSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\n\n  const bubbleSortButtonStateChanged = React.useCallback(() => {\n    bubbleSortBtn.current.className = start;\n    bubbleSortBtn.current.innerText = 'Sort!';\n    sortingStore.dispatch({\n      type: bubbleSort\n    });\n  }, []);\n  const heapSortButtonStateChanged = React.useCallback(() => {\n    heapSortBtn.current.className = start;\n    heapSortBtn.current.innerText = 'Sort!';\n    sortingStore.dispatch({\n      type: heapSort\n    });\n  }, []);\n  const quickSortButtonStateChanged = React.useCallback(() => {\n    quickSortBtn.current.className = start;\n    quickSortBtn.current.innerText = 'Sort!';\n    sortingStore.dispatch({\n      type: quickSort\n    });\n  }, []);\n  const insertionSortButtonStateChanged = React.useCallback(() => {\n    insertionSortBtn.current.className = start;\n    insertionSortBtn.current.innerText = 'Sort!';\n    sortingStore.dispatch({\n      type: insertionSort\n    });\n  }, []); //BubbleSort button handler, controls BubbleChart sending commands(changes state) and button attributes & styles\n\n  const handleBubbleSortSubmit = event => {\n    event.preventDefault();\n    const BubbleArrayLength = Number(bubbleInputValue.current.value);\n    sortingStore.dispatch({\n      type: bubbleSort\n    }); //console.log(sortingStore.getState());\n\n    if (sortBtnsState.bubble === bubbleSort) {\n      bubbleSortBtn.current.className = cancel;\n      bubbleSortBtn.current.innerText = 'Cancel!';\n      bubbleSortBtn.current.setAttribute('disabled', true);\n      setTimeout(() => {\n        bubbleSortBtn.current.disabled = false;\n      }, 850);\n    }\n\n    setBubbleSortCommands({\n      commands: {\n        name: 'Bubble Sort',\n        arrayLength: BubbleArrayLength,\n        startSorting: true,\n        StopSort: sortBtnsState.bubble === bubbleSortCancelled\n      },\n      callback: bubbleSortButtonStateChanged\n    });\n  };\n\n  const handleHeapSortSubmit = event => {\n    event.preventDefault();\n    const HeapArrayLength = Number(heapInputValue.current.value);\n    sortingStore.dispatch({\n      type: heapSort\n    });\n    console.log(sortingStore.getState());\n\n    if (sortBtnsState.heap === heapSort) {\n      heapSortBtn.current.className = cancel;\n      heapSortBtn.current.innerText = 'Cancel!';\n      heapSortBtn.current.setAttribute('disabled', true);\n      setTimeout(() => {\n        heapSortBtn.current.disabled = false;\n      }, 550);\n    }\n\n    setHeapSortCommands({\n      commands: {\n        name: 'Heap Sort',\n        arrayLength: HeapArrayLength,\n        startSorting: true,\n        StopSort: sortBtnsState.heap === heapSortCancelled\n      },\n      callback: heapSortButtonStateChanged\n    });\n  };\n\n  const handleQuickSortSubmit = event => {\n    event.preventDefault();\n    const QuickArrayLength = Number(quickInputValue.current.value);\n    sortingStore.dispatch({\n      type: quickSort\n    });\n\n    if (sortBtnsState.quick === quickSort) {\n      quickSortBtn.current.className = cancel;\n      quickSortBtn.current.innerText = 'Cancel!';\n      quickSortBtn.current.setAttribute('disabled', true);\n      setTimeout(() => {\n        quickSortBtn.current.disabled = false;\n      }, 550);\n    }\n\n    setQuickSortCommands({\n      commands: {\n        name: 'Quick Sort',\n        arrayLength: QuickArrayLength,\n        startSorting: true,\n        StopSort: sortBtnsState.quick === quickSortCancelled\n      },\n      callback: quickSortButtonStateChanged\n    });\n  };\n\n  const handleInsertionSortSubmit = event => {\n    event.preventDefault();\n    const InsertionArrayLength = Number(insertionInputValue.current.value);\n    sortingStore.dispatch({\n      type: insertionSort\n    });\n\n    if (sortBtnsState.insertion === insertionSort) {\n      insertionSortBtn.current.className = cancel;\n      insertionSortBtn.current.innerText = 'Cancel!';\n      insertionSortBtn.current.setAttribute('disabled', true);\n      setTimeout(() => {\n        insertionSortBtn.current.disabled = false;\n      }, 550);\n    }\n\n    setInsertionSortCommands({\n      commands: {\n        name: 'Insertion Sort',\n        arrayLength: InsertionArrayLength,\n        startSorting: true,\n        StopSort: sortBtnsState.insertion === insertionSortCancelled\n      },\n      callback: insertionSortButtonStateChanged\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      show: state.tensorflow,\n      style: style.large,\n      closeTimeoutMS: 1500,\n      onHide: onClose,\n      dialogClassName: \"modal-dialog modal-xl\",\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-custom-modal-styling-title\",\n          children: \"TensorflowJS Modal Styling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Ipsum molestiae natus adipisci modi eligendi? Debitis amet quae unde commodi aspernatur enim, consectetur. Cumque deleniti temporibus ipsam atque a dolores quisquam quisquam adipisci possimus laboriosam. Quibusdam facilis doloribus debitis! Sit quasi quod accusamus eos quod. Ab quos consequuntur eaque quo rem! Mollitia reiciendis porro quo magni incidunt dolore amet atque facilis ipsum deleniti rem!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: state.arraySort,\n      onHide: onClose,\n      style: style.large,\n      dialogClassName: \"modal-dialog modal-xl\",\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-custom-modal-styling-title\",\n          children: \"ArraySort Modal Styling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"show-grid\",\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            xs: 2,\n            md: 14,\n            lg: 15,\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Bubble sort\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This simple algorithm performs poorly in real world use and is used primarily as an educational tool.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Complexity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  marginLeft: '-4rem'\n                },\n                children: /*#__PURE__*/_jsxDEV(MathComponent, {\n                  tex: String.raw`O(n^2)`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Visualization\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(MemorizedBubbleChart, {\n                commands: bubbleSortCommands.commands,\n                callback: bubbleSortCommands.callback\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                style: {\n                  marginLeft: '4rem'\n                },\n                children: \"Panel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                style: {\n                  marginLeft: '4rem'\n                },\n                onSubmit: handleBubbleSortSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    className: \"my-1 mr-2\",\n                    htmlFor: \"inlineFormCustomSelectPref\",\n                    children: \"Number of elements to sort:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    size: \"sm\",\n                    as: \"select\",\n                    ref: bubbleInputValue,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"10\",\n                      children: \"10\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"20\",\n                      children: \"20\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 277,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"50\",\n                      children: \"50\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 278,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"100\",\n                      children: \"100\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 279,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"200\",\n                      children: \"200\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 280,\n                      columnNumber: 12\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  ref: bubbleSortBtn,\n                  variant: \"success\",\n                  type: \"submit\",\n                  block: true,\n                  className: `${sortBtnsState.bubble === bubbleSort ? cancel : start}`,\n                  children: `${sortBtnsState.bubble === bubbleSort ? 'Cancel!' : 'Sort!'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The only significant advantage that bubble sort has over most other algorithms, even quicksort, but not insertion sort, is that the ability to detect that the list is sorted efficiently is built into the algorithm.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            xs: 2,\n            md: 14,\n            lg: 15,\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Insertion sort\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"In computer science, heapsort is a comparison-based sorting algorithm. Heapsort can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Heapsort is an in-place algorithm, but it is not a stable sort.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Complexity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  marginLeft: '-4rem'\n                },\n                children: /*#__PURE__*/_jsxDEV(MathComponent, {\n                  tex: String.raw` O (n\\log _{\\text{n}}) `\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Visualization\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(MemorizedInsertionChart, {\n                commands: insertionSortCommands.commands,\n                callback: insertionSortButtonStateChanged\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                style: {\n                  marginLeft: '4rem'\n                },\n                children: \"Panel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                style: {\n                  marginLeft: '4rem'\n                },\n                onSubmit: handleInsertionSortSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    className: \"my-1 mr-2\",\n                    htmlFor: \"inlineFormCustomSelectPref\",\n                    children: \"Number of elements to sort:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    size: \"sm\",\n                    as: \"select\",\n                    ref: insertionInputValue,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"10\",\n                      children: \"10\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 325,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"20\",\n                      children: \"20\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 326,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"50\",\n                      children: \"50\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 327,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"100\",\n                      children: \"100\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 328,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"200\",\n                      children: \"200\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"500\",\n                      children: \"500\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 330,\n                      columnNumber: 12\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 324,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  ref: insertionSortBtn,\n                  variant: \"success\",\n                  type: \"submit\",\n                  block: true,\n                  className: `${sortBtnsState.insertion === insertionSort ? cancel : start}`,\n                  children: `${sortBtnsState.insertion === insertionSort ? 'Cancel!' : 'Sort!'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            xs: 2,\n            md: 14,\n            lg: 15,\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Heap sort\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"In computer science, heapsort is a comparison-based sorting algorithm. Heapsort can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Heapsort is an in-place algorithm, but it is not a stable sort.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Complexity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  marginLeft: '-4rem'\n                },\n                children: /*#__PURE__*/_jsxDEV(MathComponent, {\n                  tex: String.raw` O (n\\log _{\\text{n}}) `\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Visualization\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(MemorizedHeapChart, {\n                commands: heapSortCommands.commands,\n                callback: heapSortButtonStateChanged\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                style: {\n                  marginLeft: '4rem'\n                },\n                children: \"Panel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                style: {\n                  marginLeft: '4rem'\n                },\n                onSubmit: handleHeapSortSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    className: \"my-1 mr-2\",\n                    htmlFor: \"inlineFormCustomSelectPref\",\n                    children: \"Number of elements to sort:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    size: \"sm\",\n                    as: \"select\",\n                    ref: heapInputValue,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"10\",\n                      children: \"10\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 372,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"20\",\n                      children: \"20\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"50\",\n                      children: \"50\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 374,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"100\",\n                      children: \"100\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 375,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"200\",\n                      children: \"200\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 376,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"500\",\n                      children: \"500\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 377,\n                      columnNumber: 12\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  ref: heapSortBtn,\n                  variant: \"success\",\n                  type: \"submit\",\n                  block: true,\n                  className: `${sortBtnsState.heap === heapSort ? cancel : start}`,\n                  children: `${sortBtnsState.heap === heapSort ? 'Cancel!' : 'Sort!'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            xs: 2,\n            md: 14,\n            lg: 15,\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Quick sort\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"In computer science, heapsort is a comparison-based sorting algorithm. Heapsort can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Heapsort is an in-place algorithm, but it is not a stable sort.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Complexity:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  marginLeft: '-4rem'\n                },\n                children: /*#__PURE__*/_jsxDEV(MathComponent, {\n                  tex: String.raw` O (n\\log _{\\text{n}}) `\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Visualization\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(MemorizedQuickChart, {\n                commands: quickSortCommands.commands,\n                callback: quickSortButtonStateChanged\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              md: 4,\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                style: {\n                  marginLeft: '4rem'\n                },\n                children: \"Panel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                style: {\n                  marginLeft: '4rem'\n                },\n                onSubmit: handleQuickSortSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    className: \"my-1 mr-2\",\n                    htmlFor: \"inlineFormCustomSelectPref\",\n                    children: \"Number of elements to sort:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    size: \"sm\",\n                    as: \"select\",\n                    ref: quickInputValue,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"10\",\n                      children: \"10\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"20\",\n                      children: \"20\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"50\",\n                      children: \"50\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 423,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"100\",\n                      children: \"100\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 424,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"200\",\n                      children: \"200\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 425,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"500\",\n                      children: \"500\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 426,\n                      columnNumber: 12\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 420,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  ref: quickSortBtn,\n                  variant: \"success\",\n                  type: \"submit\",\n                  block: true,\n                  className: `${sortBtnsState.quick === quickSort ? cancel : start}`,\n                  children: `${sortBtnsState.quick === quickSort ? 'Cancel!' : 'Sort!'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: state.coco,\n      onHide: onClose,\n      style: style.mid,\n      dialogClassName: \"modal-dialog modal-xl\",\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-custom-modal-styling-title\",\n          children: \"COCO dataset parser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(COCO, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ModalContent, \"8Y10aXRbIB0R8SaVAqv9DIktTik=\");\n\n_c = ModalContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalContent\");","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/ModalContent.tsx"],"names":["React","useRef","Modal","Button","Container","Row","Col","Form","MathComponent","initialCommandsState","start","cancel","COCO","MemorizedBubbleChart","MemorizedHeapChart","MemorizedQuickChart","MemorizedInsertionChart","createStore","SortingStateReducer","bubbleSort","bubbleSortCancelled","heapSort","heapSortCancelled","quickSort","quickSortCancelled","insertionSort","insertionSortCancelled","sortingStore","sortBtnsState","bubble","heap","quick","insertion","subscribe","state","getState","style","large","maxWidth","minHeight","mid","minWidth","ModalContent","onClose","bubbleSortBtn","bubbleInputValue","heapSortBtn","heapInputValue","quickSortBtn","quickInputValue","insertionSortBtn","insertionInputValue","bubbleSortCommands","setBubbleSortCommands","useState","heapSortCommands","setHeapSortCommands","quickSortCommands","setQuickSortCommands","insertionSortCommands","setInsertionSortCommands","bubbleSortButtonStateChanged","useCallback","current","className","innerText","dispatch","type","heapSortButtonStateChanged","quickSortButtonStateChanged","insertionSortButtonStateChanged","handleBubbleSortSubmit","event","preventDefault","BubbleArrayLength","Number","value","setAttribute","setTimeout","disabled","commands","name","arrayLength","startSorting","StopSort","callback","handleHeapSortSubmit","HeapArrayLength","console","log","handleQuickSortSubmit","QuickArrayLength","handleInsertionSortSubmit","InsertionArrayLength","tensorflow","arraySort","marginLeft","String","raw","coco"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react';\r\nimport {Modal, Button, Container, Row, Col, Form} from 'react-bootstrap';\r\nimport {MathComponent} from 'mathjax-react';\r\nimport {initialCommandsState} from '../interfaces/SortInterfaces';\r\nimport {start, cancel, disabled} from '../rs-styles/rs-styles';\r\nimport {COCO} from './coco';\r\nimport {MemorizedBubbleChart} from './BubbleChart';\r\nimport {MemorizedHeapChart} from './HeapSortChart';\r\nimport {MemorizedQuickChart} from './QuickSortChart';\r\nimport {MemorizedInsertionChart} from './InsertionSortChart';\r\n\r\nimport {createStore} from 'redux';\r\nimport {SortingStateReducer, bubbleSort, bubbleSortCancelled, storeCommands, heapSort, heapSortCancelled, quickSort, quickSortCancelled, insertionSort, insertionSortCancelled} from '../redux/SortingStateReducer';\r\n\r\n\r\nexport const sortingStore = createStore(SortingStateReducer);\r\n\r\nlet sortBtnsState={\r\n\tbubble:'',\r\n\theap:'',\r\n\tquick: '',\r\n\tinsertion:''\r\n\r\n};\r\n\r\nsortingStore.subscribe(()=>{\r\n\tconst state = sortingStore.getState();\r\n\tsortBtnsState = state;\r\n});\r\n\r\ntype stateObj = {\r\n\ttensorflow: boolean,\r\n\tarraySort: boolean,\r\n\tcoco: boolean,\r\n\r\n};\r\n\r\ntype onclose = ()=>void;\r\n\r\nconst style = {\r\n\tlarge:\r\n\t\t{\r\n\t\t\tmaxWidth: '100%',\r\n\t\t\tminHeight: '100%'\r\n\t\t},\r\n\tmid:{\r\n\t\tminWidth:'100%',\r\n\t\tminHeight:'100%'\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\nexport default function ModalContent({state, onClose}:{ state: stateObj, onClose:onclose}){\r\n\r\n\r\n\r\n\tconst bubbleSortBtn = useRef<any>(); //ref to bubblesort btn\r\n\tconst bubbleInputValue = useRef<any>(); //ref to bubblesort input value\r\n\r\n\tconst heapSortBtn = useRef<any>();//ref to heapsort btn\r\n\tconst heapInputValue = useRef<any>(); //ref to heapsort input value\r\n\r\n\tconst quickSortBtn = useRef<any>();//ref to quicksort btn\r\n\tconst quickInputValue = useRef<any>(); //ref to quicksort input value\r\n\r\n\tconst insertionSortBtn = useRef<any>();//ref to quicksort btn\r\n\tconst insertionInputValue = useRef<any>(); //ref to quicksort input value\r\n\r\n\r\n\tconst [bubbleSortCommands, setBubbleSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\r\n\tconst [heapSortCommands, setHeapSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\r\n\tconst [quickSortCommands, setQuickSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\r\n\tconst [insertionSortCommands, setInsertionSortCommands] = React.useState(initialCommandsState); // bubblesort commands state\r\n\r\n\r\n\tconst bubbleSortButtonStateChanged = React.useCallback(()=>{\r\n\t\tbubbleSortBtn.current.className = start;\r\n\t\tbubbleSortBtn.current.innerText = 'Sort!';\r\n\t\tsortingStore.dispatch({type: bubbleSort});\r\n\t} , []);\r\n\r\n\tconst heapSortButtonStateChanged = React.useCallback(()=>{\r\n\t\theapSortBtn.current.className = start;\r\n\t\theapSortBtn.current.innerText = 'Sort!';\r\n\t\tsortingStore.dispatch({type: heapSort});\r\n\t} , []);\r\n\r\n\tconst quickSortButtonStateChanged = React.useCallback(()=>{\r\n\t\tquickSortBtn.current.className = start;\r\n\t\tquickSortBtn.current.innerText = 'Sort!';\r\n\t\tsortingStore.dispatch({type: quickSort});\r\n\t} , []);\r\n\r\n\tconst insertionSortButtonStateChanged = React.useCallback(()=>{\r\n\t\tinsertionSortBtn.current.className = start;\r\n\t\tinsertionSortBtn.current.innerText = 'Sort!';\r\n\t\tsortingStore.dispatch({type: insertionSort});\r\n\t} , []);\r\n\r\n\r\n\r\n\r\n\r\n\t//BubbleSort button handler, controls BubbleChart sending commands(changes state) and button attributes & styles\r\n\tconst handleBubbleSortSubmit = (event: React.FormEvent<HTMLFormElement>) =>{\r\n\t\tevent.preventDefault();\r\n\t\tconst BubbleArrayLength = Number(bubbleInputValue.current.value);\r\n\t\tsortingStore.dispatch({type:bubbleSort});\r\n\t\t//console.log(sortingStore.getState());\r\n\t\tif(sortBtnsState.bubble===bubbleSort){\r\n\t\t\tbubbleSortBtn.current.className = cancel;\r\n\t\t\tbubbleSortBtn.current.innerText = 'Cancel!';\r\n\t\t\tbubbleSortBtn.current.setAttribute('disabled', true);\r\n\t\t\tsetTimeout(()=>{\r\n\t\t\t\tbubbleSortBtn.current.disabled =false;\r\n\t\t\t},850);\r\n\r\n\t\t}\r\n\t\tsetBubbleSortCommands({commands:{\r\n\t\t\tname:'Bubble Sort',\r\n\t\t\tarrayLength: BubbleArrayLength,\r\n\t\t\tstartSorting: true,\r\n\t\t\tStopSort: sortBtnsState.bubble === bubbleSortCancelled\r\n\t\t},callback: bubbleSortButtonStateChanged});\r\n\r\n\t};\r\n\r\n\r\n\tconst handleHeapSortSubmit=(event: React.FormEvent<HTMLFormElement>)=>{\r\n\t\tevent.preventDefault();\r\n\t\tconst HeapArrayLength = Number(heapInputValue.current.value);\r\n\t\tsortingStore.dispatch({type:heapSort});\r\n\t\tconsole.log(sortingStore.getState());\r\n\t\tif(sortBtnsState.heap===heapSort){\r\n\t\t\theapSortBtn.current.className = cancel;\r\n\t\t\theapSortBtn.current.innerText = 'Cancel!';\r\n\t\t\theapSortBtn.current.setAttribute('disabled', true);\r\n\t\t\tsetTimeout(()=>{\r\n\t\t\t\theapSortBtn.current.disabled = false;\r\n\t\t\t},550);\r\n\t\t}\r\n\r\n\t\tsetHeapSortCommands({commands:{\r\n\t\t\tname:'Heap Sort',\r\n\t\t\tarrayLength: HeapArrayLength,\r\n\t\t\tstartSorting: true,\r\n\t\t\tStopSort: sortBtnsState.heap === heapSortCancelled\r\n\t\t},callback: heapSortButtonStateChanged});\r\n\t};\r\n\r\n\r\n\tconst handleQuickSortSubmit = (event: React.FormEvent<HTMLFormElement>)=>{\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst QuickArrayLength = Number(quickInputValue.current.value);\r\n\t\tsortingStore.dispatch({type:quickSort});\r\n\r\n\t\tif(sortBtnsState.quick===quickSort){\r\n\t\t\tquickSortBtn.current.className = cancel;\r\n\t\t\tquickSortBtn.current.innerText = 'Cancel!';\r\n\t\t\tquickSortBtn.current.setAttribute('disabled', true);\r\n\t\t\tsetTimeout(()=>{\r\n\t\t\t\tquickSortBtn.current.disabled = false;\r\n\t\t\t},550);\r\n\t\t}\r\n\r\n\t\tsetQuickSortCommands({commands:{\r\n\t\t\tname:'Quick Sort',\r\n\t\t\tarrayLength: QuickArrayLength,\r\n\t\t\tstartSorting: true,\r\n\t\t\tStopSort: sortBtnsState.quick === quickSortCancelled\r\n\t\t},callback: quickSortButtonStateChanged});\r\n\t};\r\n\r\n\r\n\tconst handleInsertionSortSubmit = (event: React.FormEvent<HTMLFormElement>)=>{\r\n\r\n\t\tevent.preventDefault();\r\n\t\tconst InsertionArrayLength = Number(insertionInputValue.current.value);\r\n\t\tsortingStore.dispatch({type:insertionSort});\r\n\r\n\t\tif(sortBtnsState.insertion===insertionSort){\r\n\t\t\tinsertionSortBtn.current.className = cancel;\r\n\t\t\tinsertionSortBtn.current.innerText = 'Cancel!';\r\n\t\t\tinsertionSortBtn.current.setAttribute('disabled', true);\r\n\t\t\tsetTimeout(()=>{\r\n\t\t\t\tinsertionSortBtn.current.disabled = false;\r\n\t\t\t},550);\r\n\t\t}\r\n\r\n\t\tsetInsertionSortCommands({commands:{\r\n\t\t\tname:'Insertion Sort',\r\n\t\t\tarrayLength: InsertionArrayLength,\r\n\t\t\tstartSorting: true,\r\n\t\t\tStopSort: sortBtnsState.insertion === insertionSortCancelled\r\n\t\t},callback: insertionSortButtonStateChanged});\r\n\t};\r\n\r\n\r\n\r\n\treturn(\r\n\t\t<>\r\n\t\t\t<Modal\r\n\t\t\t\tshow={state.tensorflow}\r\n\t\t\t\tstyle={style.large}\r\n\t\t\t\tcloseTimeoutMS={1500}\r\n\t\t\t\tonHide={onClose}\r\n\t\t\t\tdialogClassName=\"modal-dialog modal-xl\"\r\n\t\t\t\taria-labelledby=\"example-custom-modal-styling-title\"\r\n\t\t\t>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title id=\"example-custom-modal-styling-title\">\r\n\t\t\t\t\t\tTensorflowJS Modal Styling\r\n\t\t\t\t\t</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tIpsum molestiae natus adipisci modi eligendi? Debitis amet quae unde\r\n\t\t\t\t\t\tcommodi aspernatur enim, consectetur. Cumque deleniti temporibus\r\n\t\t\t\t\t\tipsam atque a dolores quisquam quisquam adipisci possimus\r\n\t\t\t\t\t\tlaboriosam. Quibusdam facilis doloribus debitis! Sit quasi quod\r\n\t\t\t\t\t\taccusamus eos quod. Ab quos consequuntur eaque quo rem! Mollitia\r\n\t\t\t\t\t\treiciendis porro quo magni incidunt dolore amet atque facilis ipsum\r\n\t\t\t\t\t\tdeleniti rem!\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t</Modal>\r\n\r\n\t\t\t<Modal\r\n\t\t\t\tshow={state.arraySort}\r\n\t\t\t\tonHide={onClose}\r\n\t\t\t\tstyle={style.large}\r\n\t\t\t\tdialogClassName=\"modal-dialog modal-xl\"\r\n\t\t\t\taria-labelledby=\"example-custom-modal-styling-title\"\r\n\t\t\t>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title id=\"example-custom-modal-styling-title\">\r\n\t\t\t\t\t\tArraySort Modal Styling\r\n\t\t\t\t\t</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body className=\"show-grid\">\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<Row xs={2} md={14} lg={15}>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<h3>Bubble sort</h3>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t<p>Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.</p>\r\n\t\t\t\t\t\t<p>This simple algorithm performs poorly in real world use and is used primarily as an educational tool.</p>\r\n\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Complexity:</h5>\r\n\t\t\t\t\t\t\t\t<p style={{marginLeft:'-4rem'}}><MathComponent  tex={String.raw`O(n^2)`} /></p>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Visualization</h5>\r\n\r\n\t\t\t\t\t\t\t\t<MemorizedBubbleChart commands={bubbleSortCommands.commands} callback={bubbleSortCommands.callback}/>\r\n\r\n\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5 style = {{marginLeft: '4rem'}}>Panel</h5>\r\n\r\n\t\t\t\t\t\t\t\t<Form style = {{marginLeft: '4rem'}} onSubmit={handleBubbleSortSubmit}>\r\n\t\t\t\t\t\t\t\t\t<Form.Group >\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">\r\n\t\t\t\t\t\t\t\t\t\t\tNumber of elements to sort:\r\n\t\t\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control size=\"sm\" as=\"select\" ref={bubbleInputValue}>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='10'>10</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='20'>20</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='50'>50</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='100'>100</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='200'>200</option>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t<Button ref={bubbleSortBtn} variant=\"success\" type=\"submit\"  block className = {`${(sortBtnsState.bubble===bubbleSort)?cancel:start}`}>\r\n\t\t\t\t\t\t\t\t\t\t{`${(sortBtnsState.bubble===bubbleSort)?'Cancel!':'Sort!'}`}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t<p>The only significant advantage that bubble sort has over most other algorithms, even quicksort, but not insertion sort, is that the ability to detect that the list is sorted efficiently is built into the algorithm.</p>\r\n\r\n\t\t\t\t\t</Container>\r\n\r\n\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<Row xs={2} md={14} lg={15}>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<h3>Insertion sort</h3>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t<p>In computer science, heapsort is a comparison-based sorting algorithm. Heapsort can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step</p>\r\n\t\t\t\t\t\t<p>Heapsort is an in-place algorithm, but it is not a stable sort.</p>\r\n\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Complexity:</h5>\r\n\t\t\t\t\t\t\t\t<p style={{marginLeft:'-4rem'}}><MathComponent  tex={String.raw` O (n\\log _{\\text{n}}) `} /></p>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Visualization</h5>\r\n\r\n\t\t\t\t\t\t\t\t<MemorizedInsertionChart commands={insertionSortCommands.commands} callback={insertionSortButtonStateChanged}/>\r\n\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5 style = {{marginLeft: '4rem'}}>Panel</h5>\r\n\r\n\t\t\t\t\t\t\t\t<Form style = {{marginLeft: '4rem'}} onSubmit={handleInsertionSortSubmit}>\r\n\t\t\t\t\t\t\t\t\t<Form.Group >\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">\r\n\t\t\t\t\t\t\t\t\t\t\tNumber of elements to sort:\r\n\t\t\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control size=\"sm\" as=\"select\" ref={insertionInputValue}>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='10'>10</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='20'>20</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='50'>50</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='100'>100</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='200'>200</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='500'>500</option>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t<Button ref={insertionSortBtn} variant=\"success\" type=\"submit\"  block className = {`${sortBtnsState.insertion===insertionSort ? cancel:start}`}>\r\n\t\t\t\t\t\t\t\t\t\t{`${sortBtnsState.insertion===insertionSort ?'Cancel!':'Sort!'}`}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Container>\r\n\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<Row xs={2} md={14} lg={15}>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<h3>Heap sort</h3>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t<p>In computer science, heapsort is a comparison-based sorting algorithm. Heapsort can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step</p>\r\n\t\t\t\t\t\t<p>Heapsort is an in-place algorithm, but it is not a stable sort.</p>\r\n\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Complexity:</h5>\r\n\t\t\t\t\t\t\t\t<p style={{marginLeft:'-4rem'}}><MathComponent  tex={String.raw` O (n\\log _{\\text{n}}) `} /></p>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Visualization</h5>\r\n\r\n\t\t\t\t\t\t\t\t<MemorizedHeapChart commands={heapSortCommands.commands} callback={heapSortButtonStateChanged}/>\r\n\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5 style = {{marginLeft: '4rem'}}>Panel</h5>\r\n\r\n\t\t\t\t\t\t\t\t<Form style = {{marginLeft: '4rem'}} onSubmit={handleHeapSortSubmit}>\r\n\t\t\t\t\t\t\t\t\t<Form.Group >\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">\r\n\t\t\t\t\t\t\t\t\t\t\tNumber of elements to sort:\r\n\t\t\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control size=\"sm\" as=\"select\" ref={heapInputValue}>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='10'>10</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='20'>20</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='50'>50</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='100'>100</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='200'>200</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='500'>500</option>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t<Button ref={heapSortBtn} variant=\"success\" type=\"submit\"  block className = {`${sortBtnsState.heap===heapSort ? cancel:start}`}>\r\n\t\t\t\t\t\t\t\t\t\t{`${sortBtnsState.heap===heapSort ?'Cancel!':'Sort!'}`}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Container>\r\n\r\n\r\n\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<Row xs={2} md={14} lg={15}>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<h3>Quick sort</h3>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t<p>In computer science, heapsort is a comparison-based sorting algorithm. Heapsort can be thought of as an improved selection sort: like selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heapsort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step</p>\r\n\t\t\t\t\t\t<p>Heapsort is an in-place algorithm, but it is not a stable sort.</p>\r\n\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Complexity:</h5>\r\n\t\t\t\t\t\t\t\t<p style={{marginLeft:'-4rem'}}><MathComponent  tex={String.raw` O (n\\log _{\\text{n}}) `} /></p>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5>Visualization</h5>\r\n\r\n\t\t\t\t\t\t\t\t<MemorizedQuickChart commands={quickSortCommands.commands} callback={quickSortButtonStateChanged}/>\r\n\t\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t\t\t<h5 style = {{marginLeft: '4rem'}}>Panel</h5>\r\n\r\n\t\t\t\t\t\t\t\t<Form style = {{marginLeft: '4rem'}} onSubmit={handleQuickSortSubmit}>\r\n\t\t\t\t\t\t\t\t\t<Form.Group >\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">\r\n\t\t\t\t\t\t\t\t\t\t\tNumber of elements to sort:\r\n\t\t\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control size=\"sm\" as=\"select\" ref={quickInputValue}>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='10'>10</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='20'>20</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='50'>50</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='100'>100</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='200'>200</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option value='500'>500</option>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t<Button ref={quickSortBtn} variant=\"success\" type=\"submit\"  block className = {`${sortBtnsState.quick===quickSort ? cancel:start}`}>\r\n\t\t\t\t\t\t\t\t\t\t{`${sortBtnsState.quick===quickSort ?'Cancel!':'Sort!'}`}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Container>\r\n\r\n\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t</Modal>\r\n\r\n\t\t\t<Modal\r\n\t\t\t\tshow={state.coco}\r\n\t\t\t\tonHide={onClose}\r\n\t\t\t\tstyle={style.mid}\r\n\t\t\t\tdialogClassName=\"modal-dialog modal-xl\"\r\n\t\t\t\taria-labelledby=\"example-custom-modal-styling-title\"\r\n\t\t\t>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title id=\"example-custom-modal-styling-title\">\r\n\t\t\t\t\t\tCOCO dataset parser\r\n\t\t\t\t\t</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<COCO/>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t</Modal>\r\n\r\n\t\t</>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}