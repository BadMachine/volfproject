{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TeXFont = void 0;\n\nvar FontData_js_1 = require(\"../FontData.js\");\n\nvar tex_js_1 = require(\"../../common/fonts/tex.js\");\n\nvar bold_italic_js_1 = require(\"./tex/bold-italic.js\");\n\nvar bold_js_1 = require(\"./tex/bold.js\");\n\nvar double_struck_js_1 = require(\"./tex/double-struck.js\");\n\nvar fraktur_bold_js_1 = require(\"./tex/fraktur-bold.js\");\n\nvar fraktur_js_1 = require(\"./tex/fraktur.js\");\n\nvar italic_js_1 = require(\"./tex/italic.js\");\n\nvar largeop_js_1 = require(\"./tex/largeop.js\");\n\nvar monospace_js_1 = require(\"./tex/monospace.js\");\n\nvar normal_js_1 = require(\"./tex/normal.js\");\n\nvar sans_serif_bold_italic_js_1 = require(\"./tex/sans-serif-bold-italic.js\");\n\nvar sans_serif_bold_js_1 = require(\"./tex/sans-serif-bold.js\");\n\nvar sans_serif_italic_js_1 = require(\"./tex/sans-serif-italic.js\");\n\nvar sans_serif_js_1 = require(\"./tex/sans-serif.js\");\n\nvar script_bold_js_1 = require(\"./tex/script-bold.js\");\n\nvar script_js_1 = require(\"./tex/script.js\");\n\nvar smallop_js_1 = require(\"./tex/smallop.js\");\n\nvar tex_calligraphic_bold_js_1 = require(\"./tex/tex-calligraphic-bold.js\");\n\nvar tex_calligraphic_js_1 = require(\"./tex/tex-calligraphic.js\");\n\nvar tex_mathit_js_1 = require(\"./tex/tex-mathit.js\");\n\nvar tex_oldstyle_bold_js_1 = require(\"./tex/tex-oldstyle-bold.js\");\n\nvar tex_oldstyle_js_1 = require(\"./tex/tex-oldstyle.js\");\n\nvar tex_size3_js_1 = require(\"./tex/tex-size3.js\");\n\nvar tex_size4_js_1 = require(\"./tex/tex-size4.js\");\n\nvar tex_variant_js_1 = require(\"./tex/tex-variant.js\");\n\nvar delimiters_js_1 = require(\"../../common/fonts/tex/delimiters.js\");\n\nvar TeXFont = function (_super) {\n  __extends(TeXFont, _super);\n\n  function TeXFont() {\n    var e_1, _a;\n\n    var _this = _super.call(this) || this;\n\n    var CLASS = _this.constructor;\n\n    try {\n      for (var _b = __values(Object.keys(CLASS.variantCacheIds)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var variant = _c.value;\n        _this.variant[variant].cacheID = 'TEX-' + CLASS.variantCacheIds[variant];\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return _this;\n  }\n\n  TeXFont.defaultDelimiters = delimiters_js_1.delimiters;\n  TeXFont.defaultChars = {\n    'normal': normal_js_1.normal,\n    'bold': bold_js_1.bold,\n    'italic': italic_js_1.italic,\n    'bold-italic': bold_italic_js_1.boldItalic,\n    'double-struck': double_struck_js_1.doubleStruck,\n    'fraktur': fraktur_js_1.fraktur,\n    'bold-fraktur': fraktur_bold_js_1.frakturBold,\n    'script': script_js_1.script,\n    'bold-script': script_bold_js_1.scriptBold,\n    'sans-serif': sans_serif_js_1.sansSerif,\n    'bold-sans-serif': sans_serif_bold_js_1.sansSerifBold,\n    'sans-serif-italic': sans_serif_italic_js_1.sansSerifItalic,\n    'sans-serif-bold-italic': sans_serif_bold_italic_js_1.sansSerifBoldItalic,\n    'monospace': monospace_js_1.monospace,\n    '-smallop': smallop_js_1.smallop,\n    '-largeop': largeop_js_1.largeop,\n    '-size3': tex_size3_js_1.texSize3,\n    '-size4': tex_size4_js_1.texSize4,\n    '-tex-calligraphic': tex_calligraphic_js_1.texCalligraphic,\n    '-tex-bold-calligraphic': tex_calligraphic_bold_js_1.texCalligraphicBold,\n    '-tex-mathit': tex_mathit_js_1.texMathit,\n    '-tex-oldstyle': tex_oldstyle_js_1.texOldstyle,\n    '-tex-bold-oldstyle': tex_oldstyle_bold_js_1.texOldstyleBold,\n    '-tex-variant': tex_variant_js_1.texVariant\n  };\n  TeXFont.variantCacheIds = {\n    'normal': 'N',\n    'bold': 'B',\n    'italic': 'I',\n    'bold-italic': 'BI',\n    'double-struck': 'D',\n    'fraktur': 'F',\n    'bold-fraktur': 'BF',\n    'script': 'S',\n    'bold-script': 'BS',\n    'sans-serif': 'SS',\n    'bold-sans-serif': 'BSS',\n    'sans-serif-italic': 'SSI',\n    'sans-serif-bold-italic': 'SSBI',\n    'monospace': 'M',\n    '-smallop': 'SO',\n    '-largeop': 'LO',\n    '-size3': 'S3',\n    '-size4': 'S4',\n    '-tex-calligraphic': 'C',\n    '-tex-bold-calligraphic': 'BC',\n    '-tex-mathit': 'MI',\n    '-tex-oldstyle': 'OS',\n    '-tex-bold-oldstyle': 'BOS',\n    '-tex-variant': 'V'\n  };\n  return TeXFont;\n}(tex_js_1.CommonTeXFontMixin(FontData_js_1.SVGFontData));\n\nexports.TeXFont = TeXFont;","map":{"version":3,"sources":["../../../../ts/output/svg/fonts/tex.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TeXFont = void 0;\nvar FontData_js_1 = require(\"../FontData.js\");\nvar tex_js_1 = require(\"../../common/fonts/tex.js\");\nvar bold_italic_js_1 = require(\"./tex/bold-italic.js\");\nvar bold_js_1 = require(\"./tex/bold.js\");\nvar double_struck_js_1 = require(\"./tex/double-struck.js\");\nvar fraktur_bold_js_1 = require(\"./tex/fraktur-bold.js\");\nvar fraktur_js_1 = require(\"./tex/fraktur.js\");\nvar italic_js_1 = require(\"./tex/italic.js\");\nvar largeop_js_1 = require(\"./tex/largeop.js\");\nvar monospace_js_1 = require(\"./tex/monospace.js\");\nvar normal_js_1 = require(\"./tex/normal.js\");\nvar sans_serif_bold_italic_js_1 = require(\"./tex/sans-serif-bold-italic.js\");\nvar sans_serif_bold_js_1 = require(\"./tex/sans-serif-bold.js\");\nvar sans_serif_italic_js_1 = require(\"./tex/sans-serif-italic.js\");\nvar sans_serif_js_1 = require(\"./tex/sans-serif.js\");\nvar script_bold_js_1 = require(\"./tex/script-bold.js\");\nvar script_js_1 = require(\"./tex/script.js\");\nvar smallop_js_1 = require(\"./tex/smallop.js\");\nvar tex_calligraphic_bold_js_1 = require(\"./tex/tex-calligraphic-bold.js\");\nvar tex_calligraphic_js_1 = require(\"./tex/tex-calligraphic.js\");\nvar tex_mathit_js_1 = require(\"./tex/tex-mathit.js\");\nvar tex_oldstyle_bold_js_1 = require(\"./tex/tex-oldstyle-bold.js\");\nvar tex_oldstyle_js_1 = require(\"./tex/tex-oldstyle.js\");\nvar tex_size3_js_1 = require(\"./tex/tex-size3.js\");\nvar tex_size4_js_1 = require(\"./tex/tex-size4.js\");\nvar tex_variant_js_1 = require(\"./tex/tex-variant.js\");\nvar delimiters_js_1 = require(\"../../common/fonts/tex/delimiters.js\");\nvar TeXFont = (function (_super) {\n    __extends(TeXFont, _super);\n    function TeXFont() {\n        var e_1, _a;\n        var _this = _super.call(this) || this;\n        var CLASS = _this.constructor;\n        try {\n            for (var _b = __values(Object.keys(CLASS.variantCacheIds)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var variant = _c.value;\n                _this.variant[variant].cacheID = 'TEX-' + CLASS.variantCacheIds[variant];\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return _this;\n    }\n    TeXFont.defaultDelimiters = delimiters_js_1.delimiters;\n    TeXFont.defaultChars = {\n        'normal': normal_js_1.normal,\n        'bold': bold_js_1.bold,\n        'italic': italic_js_1.italic,\n        'bold-italic': bold_italic_js_1.boldItalic,\n        'double-struck': double_struck_js_1.doubleStruck,\n        'fraktur': fraktur_js_1.fraktur,\n        'bold-fraktur': fraktur_bold_js_1.frakturBold,\n        'script': script_js_1.script,\n        'bold-script': script_bold_js_1.scriptBold,\n        'sans-serif': sans_serif_js_1.sansSerif,\n        'bold-sans-serif': sans_serif_bold_js_1.sansSerifBold,\n        'sans-serif-italic': sans_serif_italic_js_1.sansSerifItalic,\n        'sans-serif-bold-italic': sans_serif_bold_italic_js_1.sansSerifBoldItalic,\n        'monospace': monospace_js_1.monospace,\n        '-smallop': smallop_js_1.smallop,\n        '-largeop': largeop_js_1.largeop,\n        '-size3': tex_size3_js_1.texSize3,\n        '-size4': tex_size4_js_1.texSize4,\n        '-tex-calligraphic': tex_calligraphic_js_1.texCalligraphic,\n        '-tex-bold-calligraphic': tex_calligraphic_bold_js_1.texCalligraphicBold,\n        '-tex-mathit': tex_mathit_js_1.texMathit,\n        '-tex-oldstyle': tex_oldstyle_js_1.texOldstyle,\n        '-tex-bold-oldstyle': tex_oldstyle_bold_js_1.texOldstyleBold,\n        '-tex-variant': tex_variant_js_1.texVariant\n    };\n    TeXFont.variantCacheIds = {\n        'normal': 'N',\n        'bold': 'B',\n        'italic': 'I',\n        'bold-italic': 'BI',\n        'double-struck': 'D',\n        'fraktur': 'F',\n        'bold-fraktur': 'BF',\n        'script': 'S',\n        'bold-script': 'BS',\n        'sans-serif': 'SS',\n        'bold-sans-serif': 'BSS',\n        'sans-serif-italic': 'SSI',\n        'sans-serif-bold-italic': 'SSBI',\n        'monospace': 'M',\n        '-smallop': 'SO',\n        '-largeop': 'LO',\n        '-size3': 'S3',\n        '-size4': 'S4',\n        '-tex-calligraphic': 'C',\n        '-tex-bold-calligraphic': 'BC',\n        '-tex-mathit': 'MI',\n        '-tex-oldstyle': 'OS',\n        '-tex-bold-oldstyle': 'BOS',\n        '-tex-variant': 'V'\n    };\n    return TeXFont;\n}(tex_js_1.CommonTeXFontMixin(FontData_js_1.SVGFontData)));\nexports.TeXFont = TeXFont;\n//# sourceMappingURL=tex.js.map"]},"metadata":{},"sourceType":"script"}