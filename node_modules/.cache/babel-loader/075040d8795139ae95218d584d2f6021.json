{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\BubbleChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { chartjsDataTemplate, generateColorsForChart } from '../interfaces/SortInterfaces';\nimport { sortingStore } from './ModalContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BubbleChart = ({\n  commands,\n  callback\n}) => {\n  _s();\n\n  const chartReference = React.useRef();\n  let timer;\n  const [state, setState] = React.useState(chartjsDataTemplate);\n  const props = commands;\n  let timeouts = [];\n  let date = 0;\n  const chart = chartReference.current.chartInstance; // constructor(props: CommandsInterface) {\n  // \tsuper(props);\n  //\n  // \tthis.state = chartjsDataTemplate;\n  //\n  // \tthis.chartReference = React.createRef<any>();\n  //\n  // \tthis.timer = 0;\n  //\n  //\n  //\n  // \tthis.date =0;\n  //\n  //\n  // \tthis.timeouts = [];\n  //\n  // }\n  // randomize(size: number){\n  // \tthis.chart.data.labels = Array.from({length: size}, () => Math.floor(Math.random() * 1000));\n  // \tthis.chart.data.datasets[0].data = Array.from({ length: size }, (_, i) => (i+1).toString());\n  // }\n\n  const bubbleSort = () => {\n    const labels = chart.data.labels;\n    const data = chart.data.datasets[0].data;\n    const colors = chart.data.datasets[0].backgroundColor;\n    let swapped;\n    let timeout = 0;\n\n    do {\n      swapped = false;\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i] > data[i + 1]) {\n          [labels[i], labels[i + 1]] = [labels[i + 1], labels[i]];\n          [data[i], data[i + 1]] = [data[i + 1], data[i]];\n          [colors[i], colors[i + 1]] = [colors[i + 1], colors[i]];\n          timeout += 100;\n          const theTimeout = updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\n          timeouts.push(theTimeout);\n          swapped = true;\n        }\n      }\n    } while (swapped);\n  };\n\n  const equals = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\n  const updateChartDelayed = (labels, data, colors, timeout) => {\n    timer = setTimeout(() => {\n      const now = new Date().getTime();\n      const timeDifference = now - date;\n      const seconds = Math.floor(timeDifference % (1000 * 60) / 1000);\n      const mils = Math.floor(timeDifference % (1000 * 60) / 1);\n      chart.data.datasets[0].label = `${seconds}s ${mils.toString().substr(-3)}ms`;\n      chart.data.labels = labels;\n      chart.data.datasets[0].data = data;\n      chart.data.datasets[0].backgroundColor = colors;\n      chart.update();\n      const eth = [...chart.data.datasets[0].data].sort((x, y) => x - y);\n\n      if (eth.toString() === chart.data.datasets[0].data.toString()) {\n        sortingStore.dispatch({\n          type: ''\n        });\n        commands.callback();\n      }\n    }, timeout);\n    return timer;\n  };\n\n  const clearAllTimeouts = () => {\n    for (const timeout in timeouts) {\n      clearInterval(timeouts[timeout]);\n    }\n\n    timeouts = [];\n  };\n\n  const refreshChart = () => {\n    const temporaryDataToSort = chartjsDataTemplate;\n    temporaryDataToSort.datasets[0].data = Array.from({\n      length: props.commands.arrayLength\n    }, () => Math.floor(Math.random() * 1000));\n    temporaryDataToSort.labels = Array.from({\n      length: props.commands.arrayLength\n    }, (_, i) => (i + 1).toString());\n    [temporaryDataToSort.datasets[0].backgroundColor, temporaryDataToSort.datasets[0].borderColor] = generateColorsForChart(props.commands.arrayLength, 0.4);\n    setState(temporaryDataToSort);\n  };\n\n  date = new Date(Date.now()).getTime();\n  clearAllTimeouts();\n  refreshChart();\n  setTimeout(() => {\n    bubbleSort();\n  }, 800);\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    data: state,\n    width: 100,\n    height: 50,\n    options: {\n      legend: {\n        display: true,\n        position: 'top',\n        labels: {\n          boxWidth: 0\n        }\n      }\n    },\n    ref: chartReference\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 3\n  }, this);\n};\n\n_s(BubbleChart, \"+V019diLIFZ4McmGo1DyUnLdvEI=\");\n\n_c = BubbleChart;\nexport const MemorizedBubbleChart = /*#__PURE__*/React.memo(BubbleChart);\n_c2 = MemorizedBubbleChart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BubbleChart\");\n$RefreshReg$(_c2, \"MemorizedBubbleChart\");","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/BubbleChart.tsx"],"names":["React","Bar","chartjsDataTemplate","generateColorsForChart","sortingStore","BubbleChart","commands","callback","chartReference","useRef","timer","state","setState","useState","props","timeouts","date","chart","current","chartInstance","bubbleSort","labels","data","datasets","colors","backgroundColor","swapped","timeout","i","length","theTimeout","updateChartDelayed","slice","push","equals","a","b","JSON","stringify","setTimeout","now","Date","getTime","timeDifference","seconds","Math","floor","mils","label","toString","substr","update","eth","sort","x","y","dispatch","type","clearAllTimeouts","clearInterval","refreshChart","temporaryDataToSort","Array","from","arrayLength","random","_","borderColor","legend","display","position","boxWidth","MemorizedBubbleChart","memo"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport {CommandsInterface, chartjsDataTemplate, generateColorsForChart} from '../interfaces/SortInterfaces';\r\nimport {sortingStore} from './ModalContent';\r\n\r\n\r\nconst BubbleChart =  ({commands,callback}:{commands: CommandsInterface, callback:()=>void}) =>{\r\n\r\n\r\n\tconst chartReference =  React.useRef<any>();\r\n\tlet timer: any;\r\n\r\n\tconst [state, setState] = React.useState(chartjsDataTemplate);\r\n\tconst props = commands;\r\n\tlet timeouts:number[] = [];\r\n\tlet date = 0;\r\n\tconst chart = chartReference.current.chartInstance;\r\n\t// constructor(props: CommandsInterface) {\r\n\t// \tsuper(props);\r\n\t//\r\n\t// \tthis.state = chartjsDataTemplate;\r\n\t//\r\n\t// \tthis.chartReference = React.createRef<any>();\r\n\t//\r\n\t// \tthis.timer = 0;\r\n\t//\r\n\t//\r\n\r\n\t//\r\n\t// \tthis.date =0;\r\n\t//\r\n\t//\r\n\t// \tthis.timeouts = [];\r\n\t//\r\n\t// }\r\n\r\n\t// randomize(size: number){\r\n\t// \tthis.chart.data.labels = Array.from({length: size}, () => Math.floor(Math.random() * 1000));\r\n\t// \tthis.chart.data.datasets[0].data = Array.from({ length: size }, (_, i) => (i+1).toString());\r\n\t// }\r\n\r\n\tconst bubbleSort = ()=>{\r\n\t\tconst labels = chart.data.labels;\r\n\t\tconst data = chart.data.datasets[0].data;\r\n\t\tconst colors = chart.data.datasets[0].backgroundColor;\r\n\t\tlet swapped;\r\n\t\tlet timeout = 0;\r\n\r\n\t\tdo {\r\n\t\t\tswapped = false;\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tif (data[i] > data[i + 1]) {\r\n\r\n\t\t\t\t\t[labels[i], labels[i+1]] = [labels[i+1], labels[i]];\r\n\t\t\t\t\t[data[i], data[i+1]] = [data[i+1], data[i]];\r\n\t\t\t\t\t[colors[i], colors[i+1]] = [colors[i+1], colors[i]];\r\n\r\n\t\t\t\t\ttimeout += 100;\r\n\t\t\t\t\tconst theTimeout = updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\r\n\t\t\t\t\ttimeouts.push(theTimeout);\r\n\t\t\t\t\tswapped = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} while (swapped);\r\n\r\n\t};\r\n\r\n\r\n\tconst equals = (a:number[], b:number[]) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\n\r\n\tconst updateChartDelayed = (labels: string[], data:number[], colors:string[], timeout:number)=>{\r\n\r\n\r\n\t\ttimer = setTimeout(() => {\r\n\r\n\t\t\tconst now = new Date().getTime();\r\n\r\n\t\t\tconst timeDifference  = now - date;\r\n\t\t\tconst seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\r\n\t\t\tconst mils = Math.floor((timeDifference % (1000 * 60)) / 1);\r\n\r\n\t\t\tchart.data.datasets[0].label =  `${seconds}s ${mils.toString().substr(-3)}ms`  ;\r\n\t\t\tchart.data.labels = labels;\r\n\t\t\tchart.data.datasets[0].data = data;\r\n\t\t\tchart.data.datasets[0].backgroundColor = colors;\r\n\t\t\tchart.update();\r\n\r\n\t\t\tconst eth = [...chart.data.datasets[0].data].sort((x,y)=> x-y);\r\n\t\t\tif( eth.toString() === chart.data.datasets[0].data.toString()) {\r\n\t\t\t\tsortingStore.dispatch({type:''});\r\n\t\t\t\tcommands.callback();\r\n\t\t\t}\r\n\r\n\r\n\t\t}, timeout);\r\n\r\n\r\n\r\n\t\treturn timer;\r\n\t};\r\n\r\n\r\n\tconst clearAllTimeouts=()=>{\r\n\t\tfor(const timeout in timeouts){\r\n\t\t\tclearInterval(timeouts[timeout]);\r\n\t\t}\r\n\t\ttimeouts=[];\r\n\t};\r\n\r\n\tconst refreshChart=()=>{\r\n\t\tconst temporaryDataToSort = chartjsDataTemplate;\r\n\t\ttemporaryDataToSort.datasets[0].data = Array.from({length: props.commands.arrayLength}, () => Math.floor(Math.random() * 1000));\r\n\t\ttemporaryDataToSort.labels = Array.from({ length: props.commands.arrayLength }, (_, i) => (i+1).toString());\r\n\t\t[temporaryDataToSort.datasets[0].backgroundColor, temporaryDataToSort.datasets[0].borderColor] = generateColorsForChart(props.commands.arrayLength, 0.4);\r\n\t\tsetState(temporaryDataToSort);\r\n\t};\r\n\r\n\r\n\r\n\r\n\tdate = new Date(Date.now()).getTime();\r\n\r\n\tclearAllTimeouts();\r\n\r\n\trefreshChart();\r\n\tsetTimeout(() => {\r\n\t\tbubbleSort();\r\n\t}, 800);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\treturn (\r\n\r\n\t\t<Bar data={state} width={100} height={50} options={{\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: true,\r\n\t\t\t\tposition: 'top',\r\n\t\t\t\tlabels: {\r\n\t\t\t\t\tboxWidth: 0,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}} ref={chartReference}/>\r\n\r\n\t);\r\n\r\n\r\n};\r\n\r\n\r\nexport const MemorizedBubbleChart = React.memo(BubbleChart);\r\n"]},"metadata":{},"sourceType":"module"}