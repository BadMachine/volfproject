{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\coco.tsx\";\nimport React, { Component } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { MathComponent } from 'mathjax-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass COCO extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        xs: 2,\n        md: 14,\n        lg: 15,\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Bubble sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This simple algorithm performs poorly in real world use and is used primarily as an educational tool.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          md: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Complexity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginLeft: '-4rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(MathComponent, {\n              tex: String.raw`O(n^2)`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Visualization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            style: {\n              marginLeft: '4rem'\n            },\n            children: \"Panel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The only significant advantage that bubble sort has over most other algorithms, even quicksort, but not insertion sort, is that the ability to detect that the list is sorted efficiently is built into the algorithm.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/coco.tsx"],"names":["React","Component","Col","Container","Row","MathComponent","COCO","constructor","props","render","marginLeft","String","raw"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAAgBC,GAAhB,EAAqBC,SAArB,EAA6CC,GAA7C,QAAuD,iBAAvD;AACA,SAAQC,aAAR,QAA4B,eAA5B;;;AAOA,MAAMC,IAAN,SAAmBL,SAAnB,CAAuC;AACtCM,EAAAA,WAAW,CAACC,KAAD,EAAY;AACtB,UAAMA,KAAN;AAEA;;AAGDC,EAAAA,MAAM,GAAE;AAEP,wBAEC,QAAC,SAAD;AAAA,8BACC,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,EAAE,EAAE,EAAhB;AAAoB,QAAA,EAAE,EAAE,EAAxB;AAAA,+BACC,QAAC,GAAD;AAAA,iCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD,eAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARD,eAUC,QAAC,GAAD;AAAA,gCACC,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,EAAE,EAAE,CAAhB;AAAA,kCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC;AAAG,YAAA,KAAK,EAAE;AAACC,cAAAA,UAAU,EAAC;AAAZ,aAAV;AAAA,mCAAgC,QAAC,aAAD;AAAgB,cAAA,GAAG,EAAEC,MAAM,CAACC,GAAI;AAAhC;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAKC,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,EAAE,EAAE,CAAhB;AAAA,iCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBALD,eAWC,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,EAAE,EAAE,CAAhB;AAAA,iCACC;AAAI,YAAA,KAAK,EAAI;AAACF,cAAAA,UAAU,EAAE;AAAb,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAXD;AAAA;AAAA;AAAA;AAAA;AAAA,cAVD,eA2BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAkCA;;AA3CqC","sourcesContent":["import React, {Component} from 'react';\r\nimport {CommandsInterface} from '../interfaces/SortInterfaces';\r\nimport {Button, Col, Container, Form, Modal, Row} from 'react-bootstrap';\r\nimport {MathComponent} from 'mathjax-react';\r\nimport {MemorizedBubbleChart} from './BubbleChart';\r\nimport {bubbleSort} from '../redux/SortingStateReducer';\r\nimport {cancel, start} from '../rs-styles/rs-styles';\r\n\r\n\r\n\r\nclass COCO extends Component<any, any> {\r\n\tconstructor(props:any) {\r\n\t\tsuper(props);\r\n\r\n\t}\r\n\r\n\r\n\trender(){\r\n\r\n\t\treturn(\r\n\r\n\t\t\t<Container>\r\n\t\t\t\t<Row xs={2} md={14} lg={15}>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<h3>Bubble sort</h3>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\r\n\t\t\t\t<p>Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.</p>\r\n\t\t\t\t<p>This simple algorithm performs poorly in real world use and is used primarily as an educational tool.</p>\r\n\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t<h5>Complexity:</h5>\r\n\t\t\t\t\t\t<p style={{marginLeft:'-4rem'}}><MathComponent  tex={String.raw`O(n^2)`} /></p>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t<h5>Visualization</h5>\r\n\r\n\r\n\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t<Col xs={6} md={4}>\r\n\t\t\t\t\t\t<h5 style = {{marginLeft: '4rem'}}>Panel</h5>\r\n\r\n\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<p>The only significant advantage that bubble sort has over most other algorithms, even quicksort, but not insertion sort, is that the ability to detect that the list is sorted efficiently is built into the algorithm.</p>\r\n\r\n\t\t\t</Container>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}