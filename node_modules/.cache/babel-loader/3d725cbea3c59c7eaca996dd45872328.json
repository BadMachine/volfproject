{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractFactory = void 0;\n\nvar AbstractFactory = function () {\n  function AbstractFactory(nodes) {\n    var e_1, _a;\n\n    if (nodes === void 0) {\n      nodes = null;\n    }\n\n    this.defaultKind = 'unknown';\n    this.nodeMap = new Map();\n    this.node = {};\n\n    if (nodes === null) {\n      nodes = this.constructor.defaultNodes;\n    }\n\n    try {\n      for (var _b = __values(Object.keys(nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var kind = _c.value;\n        this.setNodeClass(kind, nodes[kind]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n\n  AbstractFactory.prototype.create = function (kind) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    return (this.node[kind] || this.node[this.defaultKind]).apply(void 0, __spread(args));\n  };\n\n  AbstractFactory.prototype.setNodeClass = function (kind, nodeClass) {\n    this.nodeMap.set(kind, nodeClass);\n    var THIS = this;\n    var KIND = this.nodeMap.get(kind);\n\n    this.node[kind] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new (KIND.bind.apply(KIND, __spread([void 0, THIS], args)))();\n    };\n  };\n\n  AbstractFactory.prototype.getNodeClass = function (kind) {\n    return this.nodeMap.get(kind);\n  };\n\n  AbstractFactory.prototype.deleteNodeClass = function (kind) {\n    this.nodeMap.delete(kind);\n    delete this.node[kind];\n  };\n\n  AbstractFactory.prototype.nodeIsKind = function (node, kind) {\n    return node instanceof this.getNodeClass(kind);\n  };\n\n  AbstractFactory.prototype.getKinds = function () {\n    return Array.from(this.nodeMap.keys());\n  };\n\n  AbstractFactory.defaultNodes = {};\n  return AbstractFactory;\n}();\n\nexports.AbstractFactory = AbstractFactory;","map":{"version":3,"sources":["../../../ts/core/Tree/Factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractFactory = void 0;\nvar AbstractFactory = (function () {\n    function AbstractFactory(nodes) {\n        var e_1, _a;\n        if (nodes === void 0) { nodes = null; }\n        this.defaultKind = 'unknown';\n        this.nodeMap = new Map();\n        this.node = {};\n        if (nodes === null) {\n            nodes = this.constructor.defaultNodes;\n        }\n        try {\n            for (var _b = __values(Object.keys(nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var kind = _c.value;\n                this.setNodeClass(kind, nodes[kind]);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    AbstractFactory.prototype.create = function (kind) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return (this.node[kind] || this.node[this.defaultKind]).apply(void 0, __spread(args));\n    };\n    AbstractFactory.prototype.setNodeClass = function (kind, nodeClass) {\n        this.nodeMap.set(kind, nodeClass);\n        var THIS = this;\n        var KIND = this.nodeMap.get(kind);\n        this.node[kind] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new (KIND.bind.apply(KIND, __spread([void 0, THIS], args)))();\n        };\n    };\n    AbstractFactory.prototype.getNodeClass = function (kind) {\n        return this.nodeMap.get(kind);\n    };\n    AbstractFactory.prototype.deleteNodeClass = function (kind) {\n        this.nodeMap.delete(kind);\n        delete this.node[kind];\n    };\n    AbstractFactory.prototype.nodeIsKind = function (node, kind) {\n        return (node instanceof this.getNodeClass(kind));\n    };\n    AbstractFactory.prototype.getKinds = function () {\n        return Array.from(this.nodeMap.keys());\n    };\n    AbstractFactory.defaultNodes = {};\n    return AbstractFactory;\n}());\nexports.AbstractFactory = AbstractFactory;\n//# sourceMappingURL=Factory.js.map"]},"metadata":{},"sourceType":"script"}