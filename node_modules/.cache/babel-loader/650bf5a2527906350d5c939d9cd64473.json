{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\TextDetection.tsx\";\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport '@tensorflow/tfjs-backend-webgl'; // import {loadGraphModel,} from '@tensorflow/tfjs-converter';\n\nimport { Form } from 'react-bootstrap';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class TextDetection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canva = void 0;\n    this.imageLoaderConfigs = void 0;\n    this.viewPortImage = void 0;\n    this.state;\n    this.viewPortImage = new Image();\n  }\n\n  loadCanvas() {\n    const ctx = this.canva.getContext('2d');\n    this.viewPortImage.src = './COCO_train2014_000000004172.jpg';\n\n    this.viewPortImage.onload = () => {\n      ctx.drawImage(this.viewPortImage, 0, 0);\n    };\n  }\n\n  load_model() {// loadGraphModel('./models/web_model2/model.json')\n    // \t.then((model)=>{\n    // \t\treturn model;\n    // \t})\n    // \t.catch((err)=>{\n    // \t\tconsole.log(err);\n    // \t});\n    //const model = await loadGraphModel('./models/text_in_context/model.json');\n    // const model = await loadGraphModel('http://localhost:8800/model.json');\n    // return model;\n  }\n\n  componentDidMount() {\n    this.loadCanvas(); //this.load_model();\n    // this.load_model().then((model)=>{\n    // \tconsole.log(model);\n    // });\n  }\n\n  loadImage(event) {\n    const files = event.target.files;\n    const file = files[0];\n\n    if (file.type.match('image.*')) {\n      const ctx = this.canva.getContext('2d');\n      const img = new Image();\n      const reader = new FileReader();\n      const image = this.viewPortImage;\n      reader.readAsDataURL(file);\n\n      reader.onload = function (fileEvent) {\n        if (fileEvent.target !== null) {\n          if (fileEvent.target.readyState == FileReader.DONE) {\n            image.src = fileEvent.target.result;\n            ctx.drawImage(img, 0, 0);\n          }\n        }\n      };\n    } else {\n      console.log('not an image');\n    }\n  }\n\n  predict() {\n    console.log('predicting'); //console.log(this.canva.toDataURL());\n\n    const predicted = axios.post('http://localhost:8800/predict_text', {\n      image: this.canva.toDataURL().split(',')[1]\n    }, {\n      responseType: 'json'\n    });\n    predicted.then(response => {\n      console.log(response);\n      response.data.boxes.forEach(box => {\n        const ctx = this.canva.getContext('2d');\n        ctx.fillRect(box.minX, box.minY, box.maxX - box.minX, box.maxY - box.minY);\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'tfTxtContainer',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'imagesContainer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'tfTxtWorkspace',\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: 'activeImage',\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            width: 640,\n            height: 427,\n            ref: canvas => this.canva = canvas,\n            id: 'input-canvas',\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.File, {\n              onChange: e => this.loadImage(e),\n              id: \"imageLoader\",\n              label: \"Your image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: event => this.predict(),\n              children: \"Predict \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/TextDetection.tsx"],"names":["React","Button","Form","axios","TextDetection","Component","constructor","props","canva","imageLoaderConfigs","viewPortImage","state","Image","loadCanvas","ctx","getContext","src","onload","drawImage","load_model","componentDidMount","loadImage","event","files","target","file","type","match","img","reader","FileReader","image","readAsDataURL","fileEvent","readyState","DONE","result","console","log","predict","predicted","post","toDataURL","split","responseType","then","response","data","boxes","forEach","box","fillRect","minX","minY","maxX","maxY","render","canvas","e"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Button, Modal} from 'react-bootstrap';\r\nimport {txtDetectionState} from '../interfaces/stateInterfaces';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { loadGraphModel } from '@tensorflow/tfjs-converter';\r\nimport '@tensorflow/tfjs-backend-webgl';\r\n// import {loadGraphModel,} from '@tensorflow/tfjs-converter';\r\nimport {Form} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nexport class TextDetection extends React.Component<any, txtDetectionState>{\r\n\tprivate canva: any;\r\n\tprivate imageLoaderConfigs:any;\r\n\tprivate viewPortImage:HTMLImageElement;\r\n\r\n\tconstructor(props:any) {\r\n\t\tsuper(props);\r\n\t\tthis.state;\r\n\t\tthis.viewPortImage = new Image();\r\n\r\n\t}\r\n\r\n\r\n\tloadCanvas(){\r\n\t\tconst ctx = this.canva.getContext('2d');\r\n\t\tthis.viewPortImage.src = './COCO_train2014_000000004172.jpg';\r\n\t\tthis.viewPortImage.onload = ()=>{\r\n\t\t\tctx.drawImage(this.viewPortImage,0,0);\r\n\t\t};\r\n\t}\r\n\r\n\tload_model() {\r\n\t\t// loadGraphModel('./models/web_model2/model.json')\r\n\t\t// \t.then((model)=>{\r\n\t\t// \t\treturn model;\r\n\t\t// \t})\r\n\t\t// \t.catch((err)=>{\r\n\t\t// \t\tconsole.log(err);\r\n\t\t// \t});\r\n\t\t//const model = await loadGraphModel('./models/text_in_context/model.json');\r\n\t\t// const model = await loadGraphModel('http://localhost:8800/model.json');\r\n\t\t// return model;\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.loadCanvas();\r\n\t\t//this.load_model();\r\n\t\t// this.load_model().then((model)=>{\r\n\t\t// \tconsole.log(model);\r\n\t\t// });\r\n\t}\r\n\r\n\tloadImage(event: any){\r\n\t\tconst files = event.target.files;\r\n\t\tconst file = files[0];\r\n\t\tif(file.type.match('image.*')) {\r\n\t\t\tconst ctx = this.canva.getContext('2d');\r\n\t\t\tconst img = new Image();\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\tconst image = this.viewPortImage;\r\n\t\t\treader.readAsDataURL(file);\r\n\t\t\treader.onload = function(fileEvent){\r\n\t\t\t\tif(fileEvent.target!==null) {\r\n\t\t\t\t\tif (fileEvent.target.readyState == FileReader.DONE) {\r\n\t\t\t\t\t\timage.src = fileEvent.target.result as string;\r\n\t\t\t\t\t\tctx.drawImage(img,0,0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t}else{\r\n\t\t\tconsole.log('not an image');\r\n\t\t}\r\n\t}\r\n\r\n\tpredict(){\r\n\t\tconsole.log('predicting');\r\n\t\t//console.log(this.canva.toDataURL());\r\n\r\n\t\tconst predicted = axios.post('http://localhost:8800/predict_text',\r\n\t\t\t{image: this.canva.toDataURL().split(',')[1]},\r\n\t\t\t{responseType: 'json'});\r\n\r\n\t\tpredicted.then((response)=>{\r\n\t\t\tconsole.log(response);\r\n\t\t\tresponse.data.boxes.forEach((box: {minX: number, minY: number, maxX: number, maxY: number}[])=>{\r\n\t\t\t\tconst ctx = this.canva.getContext('2d');\r\n\t\t\t\tctx.fillRect(box.minX, box.minY, box.maxX-box.minX, box.maxY-box.minY);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className={'tfTxtContainer'}>\r\n\t\t\t\t<div id={'imagesContainer'}>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div id={'tfTxtWorkspace'}>\r\n\t\t\t\t\t<div id={'activeImage'}>\r\n\t\t\t\t\t\t<canvas width={640} height={427} ref={(canvas)=>this.canva=canvas} id={'input-canvas'}> </canvas>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t<Form.File onChange={(e: any)=> this.loadImage(e)} id=\"imageLoader\" label=\"Your image\" />\r\n\t\t\t\t\t\t\t<Button onClick={event => this.predict()} >Predict </Button>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}