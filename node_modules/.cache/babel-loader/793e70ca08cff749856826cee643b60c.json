{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMfencedMixin = void 0;\n\nfunction CommonMfencedMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var _this = _super.apply(this, __spread(args)) || this;\n\n      _this.mrow = null;\n\n      _this.createMrow();\n\n      _this.addMrowChildren();\n\n      return _this;\n    }\n\n    class_1.prototype.createMrow = function () {\n      var mmlFactory = this.node.factory;\n      var mrow = mmlFactory.create('inferredMrow');\n      mrow.inheritAttributesFrom(this.node);\n      this.mrow = this.wrap(mrow);\n      this.mrow.parent = this;\n    };\n\n    class_1.prototype.addMrowChildren = function () {\n      var e_1, _a;\n\n      var mfenced = this.node;\n      var mrow = this.mrow;\n      this.addMo(mfenced.open);\n\n      if (this.childNodes.length) {\n        mrow.childNodes.push(this.childNodes[0]);\n      }\n\n      var i = 0;\n\n      try {\n        for (var _b = __values(this.childNodes.slice(1)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          this.addMo(mfenced.separators[i++]);\n          mrow.childNodes.push(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this.addMo(mfenced.close);\n      mrow.stretchChildren();\n    };\n\n    class_1.prototype.addMo = function (node) {\n      if (!node) return;\n      var mo = this.wrap(node);\n      this.mrow.childNodes.push(mo);\n      mo.parent = this.mrow;\n    };\n\n    class_1.prototype.computeBBox = function (bbox, recompute) {\n      if (recompute === void 0) {\n        recompute = false;\n      }\n\n      bbox.updateFrom(this.mrow.getBBox());\n      this.setChildPWidths(recompute);\n    };\n\n    return class_1;\n  }(Base);\n}\n\nexports.CommonMfencedMixin = CommonMfencedMixin;","map":{"version":3,"sources":["../../../../ts/output/common/Wrappers/mfenced.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonMfencedMixin = void 0;\nfunction CommonMfencedMixin(Base) {\n    return (function (_super) {\n        __extends(class_1, _super);\n        function class_1() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var _this = _super.apply(this, __spread(args)) || this;\n            _this.mrow = null;\n            _this.createMrow();\n            _this.addMrowChildren();\n            return _this;\n        }\n        class_1.prototype.createMrow = function () {\n            var mmlFactory = this.node.factory;\n            var mrow = mmlFactory.create('inferredMrow');\n            mrow.inheritAttributesFrom(this.node);\n            this.mrow = this.wrap(mrow);\n            this.mrow.parent = this;\n        };\n        class_1.prototype.addMrowChildren = function () {\n            var e_1, _a;\n            var mfenced = this.node;\n            var mrow = this.mrow;\n            this.addMo(mfenced.open);\n            if (this.childNodes.length) {\n                mrow.childNodes.push(this.childNodes[0]);\n            }\n            var i = 0;\n            try {\n                for (var _b = __values(this.childNodes.slice(1)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var child = _c.value;\n                    this.addMo(mfenced.separators[i++]);\n                    mrow.childNodes.push(child);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this.addMo(mfenced.close);\n            mrow.stretchChildren();\n        };\n        class_1.prototype.addMo = function (node) {\n            if (!node)\n                return;\n            var mo = this.wrap(node);\n            this.mrow.childNodes.push(mo);\n            mo.parent = this.mrow;\n        };\n        class_1.prototype.computeBBox = function (bbox, recompute) {\n            if (recompute === void 0) { recompute = false; }\n            bbox.updateFrom(this.mrow.getBBox());\n            this.setChildPWidths(recompute);\n        };\n        return class_1;\n    }(Base));\n}\nexports.CommonMfencedMixin = CommonMfencedMixin;\n//# sourceMappingURL=mfenced.js.map"]},"metadata":{},"sourceType":"script"}