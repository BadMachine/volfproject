{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\drawCOCOimage.tsx\";\nimport React from 'react'; //import * as React from 'react';\n\nimport { randomColor } from '../interfaces/SortInterfaces';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class DrawCOCOimage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = void 0;\n    this.canvasForeground = void 0;\n    this.imageHasBeenLoaded = void 0;\n    this.tooltipRef = void 0;\n    this.data = void 0;\n    this.hColors = void 0;\n    this.hColors = Array.from({\n      length: 150\n    }, () => `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.4`);\n    this.tooltipRef = /*#__PURE__*/React.createRef();\n    this.imageHasBeenLoaded = false;\n    this.data = {\n      bboxes: [],\n      segments: [],\n      descriptions: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateImage();\n  }\n\n  handleMouse(e) {\n    const ctx = this.canvasForeground.getContext('2d');\n    const rect = this.canvasForeground.getBoundingClientRect();\n  } // fillWithKeypoints(){\n  // \tconst ctxForeground = this.canvasForeground.getContext('2d');\n  //\n  // \tconst keypoints:number[] = [];\n  // \tconst descriptions: string[] = [];\n  //\n  // \tthis.props.props.Image.info.segments.forEach((segment, index)=>{\n  //\n  // \t\ttry {\n  //\n  // \t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // \t\t\t// @ts-ignore\n  // \t\t\tkeypoints.push(segment.segments[0]);\n  // \t\t\tdescriptions.push(segment.category);\n  // \t\t\tctxForeground.beginPath();\n  // \t\t\tctxForeground.moveTo(segment.segments[0][0], segment.segments[0][1]);\n  // \t\t\tfor (let i = 2; i < segment.segments[0].length - 1; i += 2) {\n  //\n  // \t\t\t\tctxForeground.lineTo(segment.segments[0][i], segment.segments[0][i + 1]);\n  //\n  // \t\t\t}\n  // \t\t\tctxForeground.lineTo(segment.segments[0][0], segment.segments[0][1]);\n  // \t\t\tctxForeground.lineWidth = 8;\n  // \t\t\tctxForeground.stroke();\n  // \t\t\tctxForeground.fillStyle = this.hColors[index];\n  // \t\t\tctxForeground.fill();\n  // \t\t\tctxForeground.beginPath();\n  // \t\t}catch (e) {\n  // \t\t\tconsole.log(e);\n  // \t\t}\n  // \t});\n  // \t//console.log(keypoints);\n  // \treturn [keypoints, descriptions];\n  // }\n\n\n  updateImage() {\n    this.imageHasBeenLoaded = false;\n    const bboxes = [];\n    const descriptions = [];\n    const segments = [];\n    const imageObj1 = new Image();\n    imageObj1.src = this.props.props.Image.url;\n\n    imageObj1.onload = () => {\n      const ctx = this.canvas.getContext('2d');\n      const ctxForeground = this.canvasForeground.getContext('2d');\n      ctx.drawImage(imageObj1, 0, 0);\n\n      if (this.props.props.Image.showBboxes && this.props.props.Image.showKeypoints) {\n        ctxForeground.clearRect(0, 0, this.props.props.Image.width, this.props.props.Image.height);\n        this.props.props.Image.info.bboxes.forEach((bbox, index) => {\n          const fillColor = this.hColors[index];\n          bboxes.push(bbox.box);\n          descriptions.push(bbox.category);\n          ctxForeground.fillStyle = fillColor;\n          ctxForeground.fillRect(bbox.box[0], bbox.box[1], bbox.box[2], bbox.box[3]);\n        });\n        this.props.props.Image.info.segments.forEach((segment, index) => {\n          segments.push(segment.segments[0]);\n\n          if (descriptions.length === 0) {\n            descriptions.push(segment.category);\n          }\n\n          ctxForeground.beginPath();\n          ctxForeground.moveTo(segment.segments[0][0], segment.segments[0][1]);\n\n          for (let i = 2; i < segment.segments[0].length - 2; i += 2) {\n            ctxForeground.lineTo(segment.segments[0][i], segment.segments[0][i + 1]);\n          }\n\n          ctxForeground.lineTo(segment.segments[0][0], segment.segments[0][1]);\n          ctxForeground.lineWidth = 8;\n          ctxForeground.stroke();\n          ctxForeground.fillStyle = this.hColors[index];\n          ctxForeground.fill();\n          ctxForeground.beginPath();\n        });\n        this.data = {\n          bboxes: bboxes,\n          segments: segments,\n          descriptions: descriptions\n        };\n      } else if (this.props.props.Image.showBboxes) {\n        //console.log('Boxes', this.props.props.Image.info.bboxes.length);\n        ctxForeground.clearRect(0, 0, this.props.props.Image.width, this.props.props.Image.height);\n        this.props.props.Image.info.bboxes.forEach((bbox, index) => {\n          const fillColor = this.hColors[index];\n          bboxes.push(bbox.box);\n          descriptions.push(bbox.category);\n          ctxForeground.fillStyle = fillColor;\n          ctxForeground.fillRect(bbox.box[0], bbox.box[1], bbox.box[2], bbox.box[3]);\n        });\n        this.data = {\n          bboxes: bboxes,\n          segments: this.data.segments,\n          descriptions: descriptions\n        };\n      } else if (this.props.props.Image.showKeypoints) {\n        //console.log('Segments', this.props.props.Image.info.segments.length);\n        ctxForeground.clearRect(0, 0, this.props.props.Image.width, this.props.props.Image.height);\n        this.props.props.Image.info.segments.forEach((segment, index) => {\n          let segmentData;\n\n          if (!('counts' in Object(segment.segments))) {\n            segmentData = segment.segments[0];\n          } else {\n            segmentData = segment.counts[0];\n          }\n\n          segments.push(segmentData);\n          descriptions.push(segment.category);\n          console.log('Segments : ', segmentData);\n          console.log('Boxes : ', this.props.props.Image.info.bboxes.length); // if('counts' in Object(segment.segments)) console.log('FUUUUUUUUU');\n\n          ctxForeground.moveTo(segmentData[0], segmentData[1]);\n          ctxForeground.beginPath(); //console.log(this.props.props.Image.info.segments);\n          //console.log('Before error', segment.segments);\n          // ctxForeground.moveTo(segment.segments[0][0], segment.segments[0][1]);\n\n          for (let i = 0; i < segmentData.length; i += 2) {\n            ctxForeground.lineTo(segmentData[i], segmentData[i + 1]);\n          }\n\n          ctxForeground.lineTo(segmentData[0], segmentData[1]);\n          ctxForeground.lineWidth = 8;\n          ctxForeground.stroke();\n          ctxForeground.fillStyle = this.hColors[index];\n          ctxForeground.fill(); //ctxForeground.beginPath();\n          //ctxForeground.closePath();\n        });\n        this.data = {\n          bboxes: this.data.bboxes,\n          segments: segments,\n          descriptions: descriptions\n        };\n      } else {\n        this.data = {\n          bboxes: this.data.bboxes,\n          segments: this.data.segments,\n          descriptions: this.data.descriptions\n        };\n        ctxForeground.clearRect(0, 0, this.props.props.Image.width, this.props.props.Image.height);\n      }\n    };\n\n    this.imageHasBeenLoaded = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    //\n    if (this.props.props.Image.showBboxes === true) {\n      //console.log('On');\n      this.updateImage();\n    } else {\n      //console.log('Off');\n      this.updateImage();\n    }\n\n    if (this.props.props.Image.showKeypoints === true) {\n      //console.log('segments true');\n      this.updateImage();\n    } else {\n      //console.log('segments false');\n      this.updateImage();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        placement: 'bottom',\n        overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: \"tooltip-disabled\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            ref: this.tooltipRef,\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 83\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 52\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n            style: {\n              zIndex: 1\n            },\n            ref: canvas => this.canvas = canvas,\n            width: this.props.props.Image.width,\n            height: this.props.props.Image.height,\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            style: {\n              top: 0,\n              zIndex: 2,\n              marginLeft: `-${this.props.props.Image.width}px`\n            },\n            onMouseMove: this.handleMouse.bind(this),\n            ref: canvas => this.canvasForeground = canvas,\n            width: this.props.props.Image.width,\n            height: this.props.props.Image.height\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/drawCOCOimage.tsx"],"names":["React","randomColor","OverlayTrigger","Tooltip","DrawCOCOimage","Component","constructor","props","canvas","canvasForeground","imageHasBeenLoaded","tooltipRef","data","hColors","Array","from","length","createRef","bboxes","segments","descriptions","componentDidMount","updateImage","handleMouse","e","ctx","getContext","rect","getBoundingClientRect","imageObj1","Image","src","url","onload","ctxForeground","drawImage","showBboxes","showKeypoints","clearRect","width","height","info","forEach","bbox","index","fillColor","push","box","category","fillStyle","fillRect","segment","beginPath","moveTo","i","lineTo","lineWidth","stroke","fill","segmentData","Object","counts","console","log","componentDidUpdate","prevProps","render","display","zIndex","top","marginLeft","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\n//import * as React from 'react';\r\nimport {CommandsInterface, randomColor} from '../interfaces/SortInterfaces';\r\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\r\nimport {ReactDOM} from 'react';\r\n\r\ninterface bbox{\r\n\tbox: number[],\r\n\tcategory:string\r\n}\r\ninterface segment{\r\n\tsegments: number[]\r\n}\r\n\r\ninterface segments{\r\n\tarea: number,\r\n\tsegments: number[][],\r\n\tcounts: number[][],\r\n\tcategory:string\r\n}\r\n\r\n\r\ninterface props{\r\n\tprops: {\r\n\t\tImage:{\r\n\t\tfilename: string,\r\n\t\turl: string,\r\n\t\theight: number,\r\n\t\twidth: number,\r\n\t\tinfo: {\r\n\t\t\tbboxes: bbox[],\r\n\t\t\tsegments: segments[]\r\n\t\t},\r\n\t\tshowBboxes: boolean,\r\n\t\tshowKeypoints: boolean\r\n\t}\r\n\t}\r\n}\r\ninterface stateInterface{\r\n\tbboxes:number[][], segments: number[][], descriptions:string[]\r\n}\r\n\r\n\r\n\r\nexport class DrawCOCOimage extends React.Component<props, any>{\r\n\tpublic canvas:any;\r\n\tpublic canvasForeground:any;\r\n\tprivate imageHasBeenLoaded: boolean;\r\n\tpublic tooltipRef:any;\r\n\tprivate data:stateInterface;\r\n\tprivate hColors: string[];\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.hColors = Array.from({length: 150}, () => `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.4`);\r\n\t\tthis.tooltipRef = React.createRef();\r\n\t\tthis.imageHasBeenLoaded = false;\r\n\t\tthis.data = { bboxes:[], segments:[], descriptions:[]};\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.updateImage();\r\n\t}\r\n\r\n\r\n\thandleMouse(e:any){\r\n\r\n\t\tconst ctx = this.canvasForeground.getContext('2d');\r\n\t\tconst rect = this.canvasForeground.getBoundingClientRect();\r\n\r\n\r\n\t}\r\n\r\n\r\n\t// fillWithKeypoints(){\r\n\t// \tconst ctxForeground = this.canvasForeground.getContext('2d');\r\n\t//\r\n\t// \tconst keypoints:number[] = [];\r\n\t// \tconst descriptions: string[] = [];\r\n\t//\r\n\t// \tthis.props.props.Image.info.segments.forEach((segment, index)=>{\r\n\t//\r\n\t// \t\ttry {\r\n\t//\r\n\t// \t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t// \t\t\t// @ts-ignore\r\n\t// \t\t\tkeypoints.push(segment.segments[0]);\r\n\t// \t\t\tdescriptions.push(segment.category);\r\n\t// \t\t\tctxForeground.beginPath();\r\n\t// \t\t\tctxForeground.moveTo(segment.segments[0][0], segment.segments[0][1]);\r\n\t// \t\t\tfor (let i = 2; i < segment.segments[0].length - 1; i += 2) {\r\n\t//\r\n\t// \t\t\t\tctxForeground.lineTo(segment.segments[0][i], segment.segments[0][i + 1]);\r\n\t//\r\n\t// \t\t\t}\r\n\t// \t\t\tctxForeground.lineTo(segment.segments[0][0], segment.segments[0][1]);\r\n\t// \t\t\tctxForeground.lineWidth = 8;\r\n\t// \t\t\tctxForeground.stroke();\r\n\t// \t\t\tctxForeground.fillStyle = this.hColors[index];\r\n\t// \t\t\tctxForeground.fill();\r\n\t// \t\t\tctxForeground.beginPath();\r\n\t// \t\t}catch (e) {\r\n\t// \t\t\tconsole.log(e);\r\n\t// \t\t}\r\n\t// \t});\r\n\t// \t//console.log(keypoints);\r\n\t// \treturn [keypoints, descriptions];\r\n\t// }\r\n\r\n\r\n\tupdateImage(){\r\n\t\tthis.imageHasBeenLoaded = false;\r\n\t\tconst bboxes:number[][]=[];\r\n\t\tconst descriptions:string[] = [];\r\n\t\tconst segments: number[][]=[];\r\n\r\n\t\tconst imageObj1 = new Image();\r\n\t\timageObj1.src = this.props.props.Image.url;\r\n\t\timageObj1.onload = ()=> {\r\n\t\t\tconst ctx = this.canvas.getContext('2d');\r\n\t\t\tconst ctxForeground = this.canvasForeground.getContext('2d');\r\n\t\t\tctx.drawImage(imageObj1,0,0);\r\n\r\n\t\t\tif(this.props.props.Image.showBboxes && this.props.props.Image.showKeypoints) {\r\n\t\t\t\tctxForeground.clearRect(0, 0, this.props.props.Image.width, this.props.props.Image.height);\r\n\r\n\t\t\t\tthis.props.props.Image.info.bboxes.forEach((bbox: any, index) => {\r\n\t\t\t\t\tconst fillColor = this.hColors[index];\r\n\t\t\t\t\tbboxes.push(bbox.box);\r\n\t\t\t\t\tdescriptions.push(bbox.category);\r\n\t\t\t\t\tctxForeground.fillStyle = fillColor;\r\n\t\t\t\t\tctxForeground.fillRect(bbox.box[0], bbox.box[1], bbox.box[2], bbox.box[3]);\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.props.props.Image.info.segments.forEach((segment, index)=>{\r\n\r\n\t\t\t\t\tsegments.push(segment.segments[0]);\r\n\t\t\t\t\tif (descriptions.length===0) {\r\n\t\t\t\t\t\tdescriptions.push(segment.category);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctxForeground.beginPath();\r\n\t\t\t\t\tctxForeground.moveTo(segment.segments[0][0], segment.segments[0][1]);\r\n\r\n\t\t\t\t\tfor (let i = 2; i < segment.segments[0].length - 2; i += 2) {\r\n\r\n\t\t\t\t\t\tctxForeground.lineTo(segment.segments[0][i], segment.segments[0][i + 1]);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctxForeground.lineTo(segment.segments[0][0], segment.segments[0][1]);\r\n\t\t\t\t\tctxForeground.lineWidth = 8;\r\n\t\t\t\t\tctxForeground.stroke();\r\n\t\t\t\t\tctxForeground.fillStyle = this.hColors[index];\r\n\t\t\t\t\tctxForeground.fill();\r\n\t\t\t\t\tctxForeground.beginPath();\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.data = { bboxes: bboxes, segments: segments, descriptions: descriptions };\r\n\r\n\t\t\t}else if(this.props.props.Image.showBboxes){\r\n\t\t\t\t//console.log('Boxes', this.props.props.Image.info.bboxes.length);\r\n\t\t\t\tctxForeground.clearRect(0,0,this.props.props.Image.width,this.props.props.Image.height);\r\n\t\t\t\tthis.props.props.Image.info.bboxes.forEach((bbox: any, index) => {\r\n\t\t\t\t\tconst fillColor = this.hColors[index];\r\n\t\t\t\t\tbboxes.push(bbox.box);\r\n\t\t\t\t\tdescriptions.push(bbox.category);\r\n\t\t\t\t\tctxForeground.fillStyle = fillColor;\r\n\t\t\t\t\tctxForeground.fillRect(bbox.box[0], bbox.box[1], bbox.box[2], bbox.box[3]);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.data = { bboxes: bboxes, segments: this.data.segments , descriptions: descriptions };\r\n\r\n\t\t\t}else if(this.props.props.Image.showKeypoints){\r\n\t\t\t\t//console.log('Segments', this.props.props.Image.info.segments.length);\r\n\t\t\t\tctxForeground.clearRect(0,0,this.props.props.Image.width,this.props.props.Image.height);\r\n\t\t\t\tthis.props.props.Image.info.segments.forEach((segment, index)=>{\r\n\t\t\t\t\tlet segmentData;\r\n\t\t\t\t\tif(!('counts' in Object(segment.segments)) ){\r\n\t\t\t\t\t\tsegmentData = segment.segments[0];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsegmentData = segment.counts[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegments.push(segmentData);\r\n\r\n\r\n\t\t\t\t\tdescriptions.push(segment.category);\r\n\r\n\t\t\t\t\tconsole.log('Segments : ', segmentData);\r\n\t\t\t\t\tconsole.log('Boxes : ', this.props.props.Image.info.bboxes.length);\r\n\t\t\t\t\t// if('counts' in Object(segment.segments)) console.log('FUUUUUUUUU');\r\n\t\t\t\t\tctxForeground.moveTo(segmentData[0], segmentData[1]);\r\n\t\t\t\t\tctxForeground.beginPath();\r\n\t\t\t\t\t//console.log(this.props.props.Image.info.segments);\r\n\t\t\t\t\t//console.log('Before error', segment.segments);\r\n\r\n\t\t\t\t\t// ctxForeground.moveTo(segment.segments[0][0], segment.segments[0][1]);\r\n\r\n\t\t\t\t\tfor (let i = 0; i < segmentData.length ; i += 2) {\r\n\r\n\t\t\t\t\t\tctxForeground.lineTo(segmentData[i], segmentData[i + 1]);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctxForeground.lineTo(segmentData[0], segmentData[1]);\r\n\t\t\t\t\tctxForeground.lineWidth = 8;\r\n\t\t\t\t\tctxForeground.stroke();\r\n\t\t\t\t\tctxForeground.fillStyle = this.hColors[index];\r\n\t\t\t\t\tctxForeground.fill();\r\n\t\t\t\t\t//ctxForeground.beginPath();\r\n\t\t\t\t\t//ctxForeground.closePath();\r\n\r\n\r\n\t\t\t\t});\r\n\t\t\t\tthis.data = { bboxes: this.data.bboxes, segments: segments , descriptions: descriptions };\r\n\r\n\r\n\t\t\t}else{\r\n\t\t\t\tthis.data = { bboxes: this.data.bboxes, segments: this.data.segments , descriptions: this.data.descriptions };\r\n\t\t\t\tctxForeground.clearRect(0,0,this.props.props.Image.width,this.props.props.Image.height);\r\n\t\t\t}\r\n\r\n\t\t};\r\n\t\tthis.imageHasBeenLoaded=true;\r\n\t}\r\n\r\n\r\n\tcomponentDidUpdate(prevProps:props) {\r\n\t\t//\r\n\r\n\t\tif(this.props.props.Image.showBboxes===true){\r\n\t\t\t//console.log('On');\r\n\t\t\tthis.updateImage();\r\n\t\t}else{\r\n\t\t\t//console.log('Off');\r\n\t\t\tthis.updateImage();\r\n\t\t}\r\n\r\n\t\tif(this.props.props.Image.showKeypoints===true){\r\n\t\t\t//console.log('segments true');\r\n\t\t\tthis.updateImage();\r\n\t\t}else{\r\n\t\t\t//console.log('segments false');\r\n\t\t\tthis.updateImage();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\r\n\t\t\t\t<OverlayTrigger placement={'bottom'} overlay={ <Tooltip id=\"tooltip-disabled\"><i ref={this.tooltipRef}> </i></Tooltip> } >\r\n\t\t\t\t\t<div style={{ display: 'flex'}}>\r\n\t\t\t\t\t\t<canvas style={{zIndex:1}}   ref={(canvas)=>this.canvas=canvas} width={this.props.props.Image.width} height={this.props.props.Image.height}> </canvas>\r\n\t\t\t\t\t\t<canvas style={{top: 0,zIndex:2, marginLeft:`-${this.props.props.Image.width}px`}} onMouseMove={this.handleMouse.bind(this)} ref={(canvas)=>this.canvasForeground=canvas} width={this.props.props.Image.width} height={this.props.props.Image.height}></canvas>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</OverlayTrigger>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}