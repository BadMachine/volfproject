{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XMLNode = exports.TextNode = exports.AbstractMmlEmptyNode = exports.AbstractMmlBaseNode = exports.AbstractMmlLayoutNode = exports.AbstractMmlTokenNode = exports.AbstractMmlNode = exports.indentAttributes = exports.TEXCLASSNAMES = exports.TEXCLASS = void 0;\n\nvar Attributes_js_1 = require(\"./Attributes.js\");\n\nvar Node_js_1 = require(\"../Tree/Node.js\");\n\nexports.TEXCLASS = {\n  ORD: 0,\n  OP: 1,\n  BIN: 2,\n  REL: 3,\n  OPEN: 4,\n  CLOSE: 5,\n  PUNCT: 6,\n  INNER: 7,\n  VCENTER: 8,\n  NONE: -1\n};\nexports.TEXCLASSNAMES = ['ORD', 'OP', 'BIN', 'REL', 'OPEN', 'CLOSE', 'PUNCT', 'INNER', 'VCENTER'];\nvar TEXSPACELENGTH = ['', 'thinmathspace', 'mediummathspace', 'thickmathspace'];\nvar TEXSPACE = [[0, -1, 2, 3, 0, 0, 0, 1], [-1, -1, 0, 3, 0, 0, 0, 1], [2, 2, 0, 0, 2, 0, 0, 2], [3, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 2, 3, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1], [1, -1, 2, 3, 1, 0, 1, 1]];\nexports.indentAttributes = ['indentalign', 'indentalignfirst', 'indentshift', 'indentshiftfirst'];\n\nvar AbstractMmlNode = function (_super) {\n  __extends(AbstractMmlNode, _super);\n\n  function AbstractMmlNode(factory, attributes, children) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    if (children === void 0) {\n      children = [];\n    }\n\n    var _this = _super.call(this, factory) || this;\n\n    _this.texClass = null;\n    _this.prevClass = null;\n    _this.prevLevel = null;\n\n    if (_this.arity < 0) {\n      _this.childNodes = [factory.create('inferredMrow')];\n      _this.childNodes[0].parent = _this;\n    }\n\n    _this.setChildren(children);\n\n    _this.attributes = new Attributes_js_1.Attributes(factory.getNodeClass(_this.kind).defaults, factory.getNodeClass('math').defaults);\n\n    _this.attributes.setList(attributes);\n\n    return _this;\n  }\n\n  Object.defineProperty(AbstractMmlNode.prototype, \"isToken\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"isEmbellished\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"isSpacelike\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"linebreakContainer\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"hasNewLine\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"arity\", {\n    get: function () {\n      return Infinity;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"isInferred\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"Parent\", {\n    get: function () {\n      var parent = this.parent;\n\n      while (parent && parent.notParent) {\n        parent = parent.Parent;\n      }\n\n      return parent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlNode.prototype, \"notParent\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractMmlNode.prototype.setChildren = function (children) {\n    if (this.arity < 0) {\n      return this.childNodes[0].setChildren(children);\n    }\n\n    return _super.prototype.setChildren.call(this, children);\n  };\n\n  AbstractMmlNode.prototype.appendChild = function (child) {\n    if (this.arity < 0) {\n      this.childNodes[0].appendChild(child);\n      return child;\n    }\n\n    return _super.prototype.appendChild.call(this, child);\n  };\n\n  AbstractMmlNode.prototype.replaceChild = function (newChild, oldChild) {\n    if (this.arity < 0) {\n      this.childNodes[0].replaceChild(newChild, oldChild);\n      return newChild;\n    }\n\n    return _super.prototype.replaceChild.call(this, newChild, oldChild);\n  };\n\n  AbstractMmlNode.prototype.core = function () {\n    return this;\n  };\n\n  AbstractMmlNode.prototype.coreMO = function () {\n    return this;\n  };\n\n  AbstractMmlNode.prototype.coreIndex = function () {\n    return 0;\n  };\n\n  AbstractMmlNode.prototype.childPosition = function () {\n    var e_1, _a;\n\n    var child = this;\n    var parent = child.parent;\n\n    while (parent && parent.notParent) {\n      child = parent;\n      parent = parent.parent;\n    }\n\n    if (parent) {\n      var i = 0;\n\n      try {\n        for (var _b = __values(parent.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var node = _c.value;\n\n          if (node === child) {\n            return i;\n          }\n\n          i++;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  AbstractMmlNode.prototype.setTeXclass = function (prev) {\n    this.getPrevClass(prev);\n    return this.texClass != null ? this : prev;\n  };\n\n  AbstractMmlNode.prototype.updateTeXclass = function (core) {\n    if (core) {\n      this.prevClass = core.prevClass;\n      this.prevLevel = core.prevLevel;\n      core.prevClass = core.prevLevel = null;\n      this.texClass = core.texClass;\n    }\n  };\n\n  AbstractMmlNode.prototype.getPrevClass = function (prev) {\n    if (prev) {\n      this.prevClass = prev.texClass;\n      this.prevLevel = prev.attributes.get('scriptlevel');\n    }\n  };\n\n  AbstractMmlNode.prototype.texSpacing = function () {\n    var prevClass = this.prevClass != null ? this.prevClass : exports.TEXCLASS.NONE;\n    var texClass = this.texClass || exports.TEXCLASS.ORD;\n\n    if (prevClass === exports.TEXCLASS.NONE || texClass === exports.TEXCLASS.NONE) {\n      return '';\n    }\n\n    if (prevClass === exports.TEXCLASS.VCENTER) {\n      prevClass = exports.TEXCLASS.ORD;\n    }\n\n    if (texClass === exports.TEXCLASS.VCENTER) {\n      texClass = exports.TEXCLASS.ORD;\n    }\n\n    var space = TEXSPACE[prevClass][texClass];\n\n    if ((this.prevLevel > 0 || this.attributes.get('scriptlevel') > 0) && space >= 0) {\n      return '';\n    }\n\n    return TEXSPACELENGTH[Math.abs(space)];\n  };\n\n  AbstractMmlNode.prototype.hasSpacingAttributes = function () {\n    return this.isEmbellished && this.coreMO().hasSpacingAttributes();\n  };\n\n  AbstractMmlNode.prototype.setInheritedAttributes = function (attributes, display, level, prime) {\n    var e_2, _a;\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    if (display === void 0) {\n      display = false;\n    }\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    if (prime === void 0) {\n      prime = false;\n    }\n\n    var defaults = this.attributes.getAllDefaults();\n\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n\n        if (defaults.hasOwnProperty(key) || AbstractMmlNode.alwaysInherit.hasOwnProperty(key)) {\n          var _d = __read(attributes[key], 2),\n              node = _d[0],\n              value = _d[1];\n\n          var noinherit = (AbstractMmlNode.noInherit[node] || {})[this.kind] || {};\n\n          if (!noinherit[key]) {\n            this.attributes.setInherited(key, value);\n          }\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var displaystyle = this.attributes.getExplicit('displaystyle');\n\n    if (displaystyle === undefined) {\n      this.attributes.setInherited('displaystyle', display);\n    }\n\n    var scriptlevel = this.attributes.getExplicit('scriptlevel');\n\n    if (scriptlevel === undefined) {\n      this.attributes.setInherited('scriptlevel', level);\n    }\n\n    if (prime) {\n      this.setProperty('texprimestyle', prime);\n    }\n\n    var arity = this.arity;\n\n    if (arity >= 0 && arity !== Infinity && (arity === 1 && this.childNodes.length === 0 || arity !== 1 && this.childNodes.length !== arity)) {\n      if (arity < this.childNodes.length) {\n        this.childNodes = this.childNodes.slice(0, arity);\n      } else {\n        while (this.childNodes.length < arity) {\n          this.appendChild(this.factory.create('mrow'));\n        }\n      }\n    }\n\n    this.setChildInheritedAttributes(attributes, display, level, prime);\n  };\n\n  AbstractMmlNode.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    var e_3, _a;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        child.setInheritedAttributes(attributes, display, level, prime);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  AbstractMmlNode.prototype.addInheritedAttributes = function (current, attributes) {\n    var e_4, _a;\n\n    var updated = __assign({}, current);\n\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var name_1 = _c.value;\n\n        if (name_1 !== 'displaystyle' && name_1 !== 'scriptlevel' && name_1 !== 'style') {\n          updated[name_1] = [this.kind, attributes[name_1]];\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return updated;\n  };\n\n  AbstractMmlNode.prototype.inheritAttributesFrom = function (node) {\n    var attributes = node.attributes;\n    var display = attributes.get('displaystyle');\n    var scriptlevel = attributes.get('scriptlevel');\n    var defaults = !attributes.isSet('mathsize') ? {} : {\n      mathsize: ['math', attributes.get('mathsize')]\n    };\n    var prime = node.getProperty('texprimestyle') || false;\n    this.setInheritedAttributes(defaults, display, scriptlevel, prime);\n  };\n\n  AbstractMmlNode.prototype.verifyTree = function (options) {\n    if (options === void 0) {\n      options = null;\n    }\n\n    if (options === null) {\n      return;\n    }\n\n    this.verifyAttributes(options);\n    var arity = this.arity;\n\n    if (options['checkArity']) {\n      if (arity >= 0 && arity !== Infinity && (arity === 1 && this.childNodes.length === 0 || arity !== 1 && this.childNodes.length !== arity)) {\n        this.mError('Wrong number of children for \"' + this.kind + '\" node', options, true);\n      }\n    }\n\n    this.verifyChildren(options);\n  };\n\n  AbstractMmlNode.prototype.verifyAttributes = function (options) {\n    var e_5, _a;\n\n    if (options['checkAttributes']) {\n      var attributes = this.attributes;\n      var bad = [];\n\n      try {\n        for (var _b = __values(attributes.getExplicitNames()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var name_2 = _c.value;\n\n          if (name_2.substr(0, 5) !== 'data-' && attributes.getDefault(name_2) === undefined && !name_2.match(/^(?:class|style|id|(?:xlink:)?href)$/)) {\n            bad.push(name_2);\n          }\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n\n      if (bad.length) {\n        this.mError('Unknown attributes for ' + this.kind + ' node: ' + bad.join(', '), options);\n      }\n    }\n  };\n\n  AbstractMmlNode.prototype.verifyChildren = function (options) {\n    var e_6, _a;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        child.verifyTree(options);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n  };\n\n  AbstractMmlNode.prototype.mError = function (message, options, short) {\n    if (short === void 0) {\n      short = false;\n    }\n\n    if (this.parent && this.parent.isKind('merror')) {\n      return null;\n    }\n\n    var merror = this.factory.create('merror');\n\n    if (options['fullErrors'] || short) {\n      var mtext = this.factory.create('mtext');\n      var text = this.factory.create('text');\n      text.setText(options['fullErrors'] ? message : this.kind);\n      mtext.appendChild(text);\n      merror.appendChild(mtext);\n      this.parent.replaceChild(merror, this);\n    } else {\n      this.parent.replaceChild(merror, this);\n      merror.appendChild(this);\n    }\n\n    return merror;\n  };\n\n  AbstractMmlNode.defaults = {\n    mathbackground: Attributes_js_1.INHERIT,\n    mathcolor: Attributes_js_1.INHERIT,\n    mathsize: Attributes_js_1.INHERIT,\n    dir: Attributes_js_1.INHERIT\n  };\n  AbstractMmlNode.noInherit = {\n    mstyle: {\n      mpadded: {\n        width: true,\n        height: true,\n        depth: true,\n        lspace: true,\n        voffset: true\n      },\n      mtable: {\n        width: true,\n        height: true,\n        depth: true,\n        align: true\n      }\n    },\n    maligngroup: {\n      mrow: {\n        groupalign: true\n      },\n      mtable: {\n        groupalign: true\n      }\n    }\n  };\n  AbstractMmlNode.alwaysInherit = {\n    scriptminsize: true,\n    scriptsizemultiplier: true\n  };\n  AbstractMmlNode.verifyDefaults = {\n    checkArity: true,\n    checkAttributes: false,\n    fullErrors: false,\n    fixMmultiscripts: true,\n    fixMtables: true\n  };\n  return AbstractMmlNode;\n}(Node_js_1.AbstractNode);\n\nexports.AbstractMmlNode = AbstractMmlNode;\n\nvar AbstractMmlTokenNode = function (_super) {\n  __extends(AbstractMmlTokenNode, _super);\n\n  function AbstractMmlTokenNode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(AbstractMmlTokenNode.prototype, \"isToken\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractMmlTokenNode.prototype.getText = function () {\n    var e_7, _a;\n\n    var text = '';\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n\n        if (child instanceof TextNode) {\n          text += child.getText();\n        }\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n\n    return text;\n  };\n\n  AbstractMmlTokenNode.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    var e_8, _a;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n\n        if (child instanceof AbstractMmlNode) {\n          child.setInheritedAttributes(attributes, display, level, prime);\n        }\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n  };\n\n  AbstractMmlTokenNode.prototype.walkTree = function (func, data) {\n    var e_9, _a;\n\n    func(this, data);\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n\n        if (child instanceof AbstractMmlNode) {\n          child.walkTree(func, data);\n        }\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return data;\n  };\n\n  AbstractMmlTokenNode.defaults = __assign(__assign({}, AbstractMmlNode.defaults), {\n    mathvariant: 'normal',\n    mathsize: Attributes_js_1.INHERIT\n  });\n  return AbstractMmlTokenNode;\n}(AbstractMmlNode);\n\nexports.AbstractMmlTokenNode = AbstractMmlTokenNode;\n\nvar AbstractMmlLayoutNode = function (_super) {\n  __extends(AbstractMmlLayoutNode, _super);\n\n  function AbstractMmlLayoutNode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(AbstractMmlLayoutNode.prototype, \"isSpacelike\", {\n    get: function () {\n      return this.childNodes[0].isSpacelike;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlLayoutNode.prototype, \"isEmbellished\", {\n    get: function () {\n      return this.childNodes[0].isEmbellished;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlLayoutNode.prototype, \"arity\", {\n    get: function () {\n      return -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractMmlLayoutNode.prototype.core = function () {\n    return this.childNodes[0];\n  };\n\n  AbstractMmlLayoutNode.prototype.coreMO = function () {\n    return this.childNodes[0].coreMO();\n  };\n\n  AbstractMmlLayoutNode.prototype.setTeXclass = function (prev) {\n    prev = this.childNodes[0].setTeXclass(prev);\n    this.updateTeXclass(this.childNodes[0]);\n    return prev;\n  };\n\n  AbstractMmlLayoutNode.defaults = AbstractMmlNode.defaults;\n  return AbstractMmlLayoutNode;\n}(AbstractMmlNode);\n\nexports.AbstractMmlLayoutNode = AbstractMmlLayoutNode;\n\nvar AbstractMmlBaseNode = function (_super) {\n  __extends(AbstractMmlBaseNode, _super);\n\n  function AbstractMmlBaseNode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(AbstractMmlBaseNode.prototype, \"isEmbellished\", {\n    get: function () {\n      return this.childNodes[0].isEmbellished;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractMmlBaseNode.prototype.core = function () {\n    return this.childNodes[0];\n  };\n\n  AbstractMmlBaseNode.prototype.coreMO = function () {\n    return this.childNodes[0].coreMO();\n  };\n\n  AbstractMmlBaseNode.prototype.setTeXclass = function (prev) {\n    var e_10, _a;\n\n    this.getPrevClass(prev);\n    this.texClass = exports.TEXCLASS.ORD;\n    var base = this.childNodes[0];\n\n    if (base) {\n      if (this.isEmbellished || base.isKind('mi')) {\n        prev = base.setTeXclass(prev);\n        this.updateTeXclass(this.core());\n      } else {\n        base.setTeXclass(null);\n        prev = this;\n      }\n    } else {\n      prev = this;\n    }\n\n    try {\n      for (var _b = __values(this.childNodes.slice(1)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n\n        if (child) {\n          child.setTeXclass(null);\n        }\n      }\n    } catch (e_10_1) {\n      e_10 = {\n        error: e_10_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_10) throw e_10.error;\n      }\n    }\n\n    return prev;\n  };\n\n  AbstractMmlBaseNode.defaults = AbstractMmlNode.defaults;\n  return AbstractMmlBaseNode;\n}(AbstractMmlNode);\n\nexports.AbstractMmlBaseNode = AbstractMmlBaseNode;\n\nvar AbstractMmlEmptyNode = function (_super) {\n  __extends(AbstractMmlEmptyNode, _super);\n\n  function AbstractMmlEmptyNode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isToken\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isEmbellished\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isSpacelike\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"linebreakContainer\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"hasNewLine\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"arity\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isInferred\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"notParent\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"Parent\", {\n    get: function () {\n      return this.parent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"texClass\", {\n    get: function () {\n      return exports.TEXCLASS.NONE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"prevClass\", {\n    get: function () {\n      return exports.TEXCLASS.NONE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"prevLevel\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractMmlEmptyNode.prototype.hasSpacingAttributes = function () {\n    return false;\n  };\n\n  Object.defineProperty(AbstractMmlEmptyNode.prototype, \"attributes\", {\n    get: function () {\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractMmlEmptyNode.prototype.core = function () {\n    return this;\n  };\n\n  AbstractMmlEmptyNode.prototype.coreMO = function () {\n    return this;\n  };\n\n  AbstractMmlEmptyNode.prototype.coreIndex = function () {\n    return 0;\n  };\n\n  AbstractMmlEmptyNode.prototype.childPosition = function () {\n    return 0;\n  };\n\n  AbstractMmlEmptyNode.prototype.setTeXclass = function (prev) {\n    return prev;\n  };\n\n  AbstractMmlEmptyNode.prototype.texSpacing = function () {\n    return '';\n  };\n\n  AbstractMmlEmptyNode.prototype.setInheritedAttributes = function (_attributes, _display, _level, _prime) {};\n\n  AbstractMmlEmptyNode.prototype.inheritAttributesFrom = function (_node) {};\n\n  AbstractMmlEmptyNode.prototype.verifyTree = function (_options) {};\n\n  AbstractMmlEmptyNode.prototype.mError = function (_message, _options, _short) {\n    if (_short === void 0) {\n      _short = false;\n    }\n  };\n\n  return AbstractMmlEmptyNode;\n}(Node_js_1.AbstractEmptyNode);\n\nexports.AbstractMmlEmptyNode = AbstractMmlEmptyNode;\n\nvar TextNode = function (_super) {\n  __extends(TextNode, _super);\n\n  function TextNode() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.text = '';\n    return _this;\n  }\n\n  Object.defineProperty(TextNode.prototype, \"kind\", {\n    get: function () {\n      return 'text';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TextNode.prototype.getText = function () {\n    return this.text;\n  };\n\n  TextNode.prototype.setText = function (text) {\n    this.text = text;\n    return this;\n  };\n\n  TextNode.prototype.toString = function () {\n    return this.text;\n  };\n\n  return TextNode;\n}(AbstractMmlEmptyNode);\n\nexports.TextNode = TextNode;\n\nvar XMLNode = function (_super) {\n  __extends(XMLNode, _super);\n\n  function XMLNode() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.xml = null;\n    _this.adaptor = null;\n    return _this;\n  }\n\n  Object.defineProperty(XMLNode.prototype, \"kind\", {\n    get: function () {\n      return 'XML';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  XMLNode.prototype.getXML = function () {\n    return this.xml;\n  };\n\n  XMLNode.prototype.setXML = function (xml, adaptor) {\n    if (adaptor === void 0) {\n      adaptor = null;\n    }\n\n    this.xml = xml;\n    this.adaptor = adaptor;\n    return this;\n  };\n\n  XMLNode.prototype.getSerializedXML = function () {\n    return this.adaptor.outerHTML(this.xml);\n  };\n\n  XMLNode.prototype.toString = function () {\n    return 'XML data';\n  };\n\n  return XMLNode;\n}(AbstractMmlEmptyNode);\n\nexports.XMLNode = XMLNode;","map":{"version":3,"sources":["../../../ts/core/MmlTree/MmlNode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.XMLNode = exports.TextNode = exports.AbstractMmlEmptyNode = exports.AbstractMmlBaseNode = exports.AbstractMmlLayoutNode = exports.AbstractMmlTokenNode = exports.AbstractMmlNode = exports.indentAttributes = exports.TEXCLASSNAMES = exports.TEXCLASS = void 0;\nvar Attributes_js_1 = require(\"./Attributes.js\");\nvar Node_js_1 = require(\"../Tree/Node.js\");\nexports.TEXCLASS = {\n    ORD: 0,\n    OP: 1,\n    BIN: 2,\n    REL: 3,\n    OPEN: 4,\n    CLOSE: 5,\n    PUNCT: 6,\n    INNER: 7,\n    VCENTER: 8,\n    NONE: -1\n};\nexports.TEXCLASSNAMES = ['ORD', 'OP', 'BIN', 'REL', 'OPEN', 'CLOSE', 'PUNCT', 'INNER', 'VCENTER'];\nvar TEXSPACELENGTH = ['', 'thinmathspace', 'mediummathspace', 'thickmathspace'];\nvar TEXSPACE = [\n    [0, -1, 2, 3, 0, 0, 0, 1],\n    [-1, -1, 0, 3, 0, 0, 0, 1],\n    [2, 2, 0, 0, 2, 0, 0, 2],\n    [3, 3, 0, 0, 3, 0, 0, 3],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, -1, 2, 3, 0, 0, 0, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1],\n    [1, -1, 2, 3, 1, 0, 1, 1]\n];\nexports.indentAttributes = [\n    'indentalign', 'indentalignfirst',\n    'indentshift', 'indentshiftfirst'\n];\nvar AbstractMmlNode = (function (_super) {\n    __extends(AbstractMmlNode, _super);\n    function AbstractMmlNode(factory, attributes, children) {\n        if (attributes === void 0) { attributes = {}; }\n        if (children === void 0) { children = []; }\n        var _this = _super.call(this, factory) || this;\n        _this.texClass = null;\n        _this.prevClass = null;\n        _this.prevLevel = null;\n        if (_this.arity < 0) {\n            _this.childNodes = [factory.create('inferredMrow')];\n            _this.childNodes[0].parent = _this;\n        }\n        _this.setChildren(children);\n        _this.attributes = new Attributes_js_1.Attributes(factory.getNodeClass(_this.kind).defaults, factory.getNodeClass('math').defaults);\n        _this.attributes.setList(attributes);\n        return _this;\n    }\n    Object.defineProperty(AbstractMmlNode.prototype, \"isToken\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"isEmbellished\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"isSpacelike\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"linebreakContainer\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"hasNewLine\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"arity\", {\n        get: function () {\n            return Infinity;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"isInferred\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"Parent\", {\n        get: function () {\n            var parent = this.parent;\n            while (parent && parent.notParent) {\n                parent = parent.Parent;\n            }\n            return parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlNode.prototype, \"notParent\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractMmlNode.prototype.setChildren = function (children) {\n        if (this.arity < 0) {\n            return this.childNodes[0].setChildren(children);\n        }\n        return _super.prototype.setChildren.call(this, children);\n    };\n    AbstractMmlNode.prototype.appendChild = function (child) {\n        if (this.arity < 0) {\n            this.childNodes[0].appendChild(child);\n            return child;\n        }\n        return _super.prototype.appendChild.call(this, child);\n    };\n    AbstractMmlNode.prototype.replaceChild = function (newChild, oldChild) {\n        if (this.arity < 0) {\n            this.childNodes[0].replaceChild(newChild, oldChild);\n            return newChild;\n        }\n        return _super.prototype.replaceChild.call(this, newChild, oldChild);\n    };\n    AbstractMmlNode.prototype.core = function () {\n        return this;\n    };\n    AbstractMmlNode.prototype.coreMO = function () {\n        return this;\n    };\n    AbstractMmlNode.prototype.coreIndex = function () {\n        return 0;\n    };\n    AbstractMmlNode.prototype.childPosition = function () {\n        var e_1, _a;\n        var child = this;\n        var parent = child.parent;\n        while (parent && parent.notParent) {\n            child = parent;\n            parent = parent.parent;\n        }\n        if (parent) {\n            var i = 0;\n            try {\n                for (var _b = __values(parent.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var node = _c.value;\n                    if (node === child) {\n                        return i;\n                    }\n                    i++;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        return null;\n    };\n    AbstractMmlNode.prototype.setTeXclass = function (prev) {\n        this.getPrevClass(prev);\n        return (this.texClass != null ? this : prev);\n    };\n    AbstractMmlNode.prototype.updateTeXclass = function (core) {\n        if (core) {\n            this.prevClass = core.prevClass;\n            this.prevLevel = core.prevLevel;\n            core.prevClass = core.prevLevel = null;\n            this.texClass = core.texClass;\n        }\n    };\n    AbstractMmlNode.prototype.getPrevClass = function (prev) {\n        if (prev) {\n            this.prevClass = prev.texClass;\n            this.prevLevel = prev.attributes.get('scriptlevel');\n        }\n    };\n    AbstractMmlNode.prototype.texSpacing = function () {\n        var prevClass = (this.prevClass != null ? this.prevClass : exports.TEXCLASS.NONE);\n        var texClass = this.texClass || exports.TEXCLASS.ORD;\n        if (prevClass === exports.TEXCLASS.NONE || texClass === exports.TEXCLASS.NONE) {\n            return '';\n        }\n        if (prevClass === exports.TEXCLASS.VCENTER) {\n            prevClass = exports.TEXCLASS.ORD;\n        }\n        if (texClass === exports.TEXCLASS.VCENTER) {\n            texClass = exports.TEXCLASS.ORD;\n        }\n        var space = TEXSPACE[prevClass][texClass];\n        if ((this.prevLevel > 0 || this.attributes.get('scriptlevel') > 0) && space >= 0) {\n            return '';\n        }\n        return TEXSPACELENGTH[Math.abs(space)];\n    };\n    AbstractMmlNode.prototype.hasSpacingAttributes = function () {\n        return this.isEmbellished && this.coreMO().hasSpacingAttributes();\n    };\n    AbstractMmlNode.prototype.setInheritedAttributes = function (attributes, display, level, prime) {\n        var e_2, _a;\n        if (attributes === void 0) { attributes = {}; }\n        if (display === void 0) { display = false; }\n        if (level === void 0) { level = 0; }\n        if (prime === void 0) { prime = false; }\n        var defaults = this.attributes.getAllDefaults();\n        try {\n            for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var key = _c.value;\n                if (defaults.hasOwnProperty(key) || AbstractMmlNode.alwaysInherit.hasOwnProperty(key)) {\n                    var _d = __read(attributes[key], 2), node = _d[0], value = _d[1];\n                    var noinherit = (AbstractMmlNode.noInherit[node] || {})[this.kind] || {};\n                    if (!noinherit[key]) {\n                        this.attributes.setInherited(key, value);\n                    }\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        var displaystyle = this.attributes.getExplicit('displaystyle');\n        if (displaystyle === undefined) {\n            this.attributes.setInherited('displaystyle', display);\n        }\n        var scriptlevel = this.attributes.getExplicit('scriptlevel');\n        if (scriptlevel === undefined) {\n            this.attributes.setInherited('scriptlevel', level);\n        }\n        if (prime) {\n            this.setProperty('texprimestyle', prime);\n        }\n        var arity = this.arity;\n        if (arity >= 0 && arity !== Infinity && ((arity === 1 && this.childNodes.length === 0) ||\n            (arity !== 1 && this.childNodes.length !== arity))) {\n            if (arity < this.childNodes.length) {\n                this.childNodes = this.childNodes.slice(0, arity);\n            }\n            else {\n                while (this.childNodes.length < arity) {\n                    this.appendChild(this.factory.create('mrow'));\n                }\n            }\n        }\n        this.setChildInheritedAttributes(attributes, display, level, prime);\n    };\n    AbstractMmlNode.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var child = _c.value;\n                child.setInheritedAttributes(attributes, display, level, prime);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    AbstractMmlNode.prototype.addInheritedAttributes = function (current, attributes) {\n        var e_4, _a;\n        var updated = __assign({}, current);\n        try {\n            for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var name_1 = _c.value;\n                if (name_1 !== 'displaystyle' && name_1 !== 'scriptlevel' && name_1 !== 'style') {\n                    updated[name_1] = [this.kind, attributes[name_1]];\n                }\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return updated;\n    };\n    AbstractMmlNode.prototype.inheritAttributesFrom = function (node) {\n        var attributes = node.attributes;\n        var display = attributes.get('displaystyle');\n        var scriptlevel = attributes.get('scriptlevel');\n        var defaults = (!attributes.isSet('mathsize') ? {} : {\n            mathsize: ['math', attributes.get('mathsize')]\n        });\n        var prime = node.getProperty('texprimestyle') || false;\n        this.setInheritedAttributes(defaults, display, scriptlevel, prime);\n    };\n    AbstractMmlNode.prototype.verifyTree = function (options) {\n        if (options === void 0) { options = null; }\n        if (options === null) {\n            return;\n        }\n        this.verifyAttributes(options);\n        var arity = this.arity;\n        if (options['checkArity']) {\n            if (arity >= 0 && arity !== Infinity &&\n                ((arity === 1 && this.childNodes.length === 0) ||\n                    (arity !== 1 && this.childNodes.length !== arity))) {\n                this.mError('Wrong number of children for \"' + this.kind + '\" node', options, true);\n            }\n        }\n        this.verifyChildren(options);\n    };\n    AbstractMmlNode.prototype.verifyAttributes = function (options) {\n        var e_5, _a;\n        if (options['checkAttributes']) {\n            var attributes = this.attributes;\n            var bad = [];\n            try {\n                for (var _b = __values(attributes.getExplicitNames()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var name_2 = _c.value;\n                    if (name_2.substr(0, 5) !== 'data-' && attributes.getDefault(name_2) === undefined &&\n                        !name_2.match(/^(?:class|style|id|(?:xlink:)?href)$/)) {\n                        bad.push(name_2);\n                    }\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n            if (bad.length) {\n                this.mError('Unknown attributes for ' + this.kind + ' node: ' + bad.join(', '), options);\n            }\n        }\n    };\n    AbstractMmlNode.prototype.verifyChildren = function (options) {\n        var e_6, _a;\n        try {\n            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var child = _c.value;\n                child.verifyTree(options);\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n    };\n    AbstractMmlNode.prototype.mError = function (message, options, short) {\n        if (short === void 0) { short = false; }\n        if (this.parent && this.parent.isKind('merror')) {\n            return null;\n        }\n        var merror = this.factory.create('merror');\n        if (options['fullErrors'] || short) {\n            var mtext = this.factory.create('mtext');\n            var text = this.factory.create('text');\n            text.setText(options['fullErrors'] ? message : this.kind);\n            mtext.appendChild(text);\n            merror.appendChild(mtext);\n            this.parent.replaceChild(merror, this);\n        }\n        else {\n            this.parent.replaceChild(merror, this);\n            merror.appendChild(this);\n        }\n        return merror;\n    };\n    AbstractMmlNode.defaults = {\n        mathbackground: Attributes_js_1.INHERIT,\n        mathcolor: Attributes_js_1.INHERIT,\n        mathsize: Attributes_js_1.INHERIT,\n        dir: Attributes_js_1.INHERIT\n    };\n    AbstractMmlNode.noInherit = {\n        mstyle: {\n            mpadded: { width: true, height: true, depth: true, lspace: true, voffset: true },\n            mtable: { width: true, height: true, depth: true, align: true }\n        },\n        maligngroup: {\n            mrow: { groupalign: true },\n            mtable: { groupalign: true }\n        }\n    };\n    AbstractMmlNode.alwaysInherit = {\n        scriptminsize: true,\n        scriptsizemultiplier: true\n    };\n    AbstractMmlNode.verifyDefaults = {\n        checkArity: true,\n        checkAttributes: false,\n        fullErrors: false,\n        fixMmultiscripts: true,\n        fixMtables: true\n    };\n    return AbstractMmlNode;\n}(Node_js_1.AbstractNode));\nexports.AbstractMmlNode = AbstractMmlNode;\nvar AbstractMmlTokenNode = (function (_super) {\n    __extends(AbstractMmlTokenNode, _super);\n    function AbstractMmlTokenNode() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(AbstractMmlTokenNode.prototype, \"isToken\", {\n        get: function () {\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractMmlTokenNode.prototype.getText = function () {\n        var e_7, _a;\n        var text = '';\n        try {\n            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var child = _c.value;\n                if (child instanceof TextNode) {\n                    text += child.getText();\n                }\n            }\n        }\n        catch (e_7_1) { e_7 = { error: e_7_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_7) throw e_7.error; }\n        }\n        return text;\n    };\n    AbstractMmlTokenNode.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n        var e_8, _a;\n        try {\n            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var child = _c.value;\n                if (child instanceof AbstractMmlNode) {\n                    child.setInheritedAttributes(attributes, display, level, prime);\n                }\n            }\n        }\n        catch (e_8_1) { e_8 = { error: e_8_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_8) throw e_8.error; }\n        }\n    };\n    AbstractMmlTokenNode.prototype.walkTree = function (func, data) {\n        var e_9, _a;\n        func(this, data);\n        try {\n            for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var child = _c.value;\n                if (child instanceof AbstractMmlNode) {\n                    child.walkTree(func, data);\n                }\n            }\n        }\n        catch (e_9_1) { e_9 = { error: e_9_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_9) throw e_9.error; }\n        }\n        return data;\n    };\n    AbstractMmlTokenNode.defaults = __assign(__assign({}, AbstractMmlNode.defaults), { mathvariant: 'normal', mathsize: Attributes_js_1.INHERIT });\n    return AbstractMmlTokenNode;\n}(AbstractMmlNode));\nexports.AbstractMmlTokenNode = AbstractMmlTokenNode;\nvar AbstractMmlLayoutNode = (function (_super) {\n    __extends(AbstractMmlLayoutNode, _super);\n    function AbstractMmlLayoutNode() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(AbstractMmlLayoutNode.prototype, \"isSpacelike\", {\n        get: function () {\n            return this.childNodes[0].isSpacelike;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlLayoutNode.prototype, \"isEmbellished\", {\n        get: function () {\n            return this.childNodes[0].isEmbellished;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlLayoutNode.prototype, \"arity\", {\n        get: function () {\n            return -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractMmlLayoutNode.prototype.core = function () {\n        return this.childNodes[0];\n    };\n    AbstractMmlLayoutNode.prototype.coreMO = function () {\n        return this.childNodes[0].coreMO();\n    };\n    AbstractMmlLayoutNode.prototype.setTeXclass = function (prev) {\n        prev = this.childNodes[0].setTeXclass(prev);\n        this.updateTeXclass(this.childNodes[0]);\n        return prev;\n    };\n    AbstractMmlLayoutNode.defaults = AbstractMmlNode.defaults;\n    return AbstractMmlLayoutNode;\n}(AbstractMmlNode));\nexports.AbstractMmlLayoutNode = AbstractMmlLayoutNode;\nvar AbstractMmlBaseNode = (function (_super) {\n    __extends(AbstractMmlBaseNode, _super);\n    function AbstractMmlBaseNode() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(AbstractMmlBaseNode.prototype, \"isEmbellished\", {\n        get: function () {\n            return this.childNodes[0].isEmbellished;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractMmlBaseNode.prototype.core = function () {\n        return this.childNodes[0];\n    };\n    AbstractMmlBaseNode.prototype.coreMO = function () {\n        return this.childNodes[0].coreMO();\n    };\n    AbstractMmlBaseNode.prototype.setTeXclass = function (prev) {\n        var e_10, _a;\n        this.getPrevClass(prev);\n        this.texClass = exports.TEXCLASS.ORD;\n        var base = this.childNodes[0];\n        if (base) {\n            if (this.isEmbellished || base.isKind('mi')) {\n                prev = base.setTeXclass(prev);\n                this.updateTeXclass(this.core());\n            }\n            else {\n                base.setTeXclass(null);\n                prev = this;\n            }\n        }\n        else {\n            prev = this;\n        }\n        try {\n            for (var _b = __values(this.childNodes.slice(1)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var child = _c.value;\n                if (child) {\n                    child.setTeXclass(null);\n                }\n            }\n        }\n        catch (e_10_1) { e_10 = { error: e_10_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_10) throw e_10.error; }\n        }\n        return prev;\n    };\n    AbstractMmlBaseNode.defaults = AbstractMmlNode.defaults;\n    return AbstractMmlBaseNode;\n}(AbstractMmlNode));\nexports.AbstractMmlBaseNode = AbstractMmlBaseNode;\nvar AbstractMmlEmptyNode = (function (_super) {\n    __extends(AbstractMmlEmptyNode, _super);\n    function AbstractMmlEmptyNode() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isToken\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isEmbellished\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isSpacelike\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"linebreakContainer\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"hasNewLine\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"arity\", {\n        get: function () {\n            return 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"isInferred\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"notParent\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"Parent\", {\n        get: function () {\n            return this.parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"texClass\", {\n        get: function () {\n            return exports.TEXCLASS.NONE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"prevClass\", {\n        get: function () {\n            return exports.TEXCLASS.NONE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"prevLevel\", {\n        get: function () {\n            return 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractMmlEmptyNode.prototype.hasSpacingAttributes = function () {\n        return false;\n    };\n    Object.defineProperty(AbstractMmlEmptyNode.prototype, \"attributes\", {\n        get: function () {\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractMmlEmptyNode.prototype.core = function () {\n        return this;\n    };\n    AbstractMmlEmptyNode.prototype.coreMO = function () {\n        return this;\n    };\n    AbstractMmlEmptyNode.prototype.coreIndex = function () {\n        return 0;\n    };\n    AbstractMmlEmptyNode.prototype.childPosition = function () {\n        return 0;\n    };\n    AbstractMmlEmptyNode.prototype.setTeXclass = function (prev) {\n        return prev;\n    };\n    AbstractMmlEmptyNode.prototype.texSpacing = function () {\n        return '';\n    };\n    AbstractMmlEmptyNode.prototype.setInheritedAttributes = function (_attributes, _display, _level, _prime) { };\n    AbstractMmlEmptyNode.prototype.inheritAttributesFrom = function (_node) { };\n    AbstractMmlEmptyNode.prototype.verifyTree = function (_options) { };\n    AbstractMmlEmptyNode.prototype.mError = function (_message, _options, _short) {\n        if (_short === void 0) { _short = false; }\n    };\n    return AbstractMmlEmptyNode;\n}(Node_js_1.AbstractEmptyNode));\nexports.AbstractMmlEmptyNode = AbstractMmlEmptyNode;\nvar TextNode = (function (_super) {\n    __extends(TextNode, _super);\n    function TextNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.text = '';\n        return _this;\n    }\n    Object.defineProperty(TextNode.prototype, \"kind\", {\n        get: function () {\n            return 'text';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TextNode.prototype.getText = function () {\n        return this.text;\n    };\n    TextNode.prototype.setText = function (text) {\n        this.text = text;\n        return this;\n    };\n    TextNode.prototype.toString = function () {\n        return this.text;\n    };\n    return TextNode;\n}(AbstractMmlEmptyNode));\nexports.TextNode = TextNode;\nvar XMLNode = (function (_super) {\n    __extends(XMLNode, _super);\n    function XMLNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.xml = null;\n        _this.adaptor = null;\n        return _this;\n    }\n    Object.defineProperty(XMLNode.prototype, \"kind\", {\n        get: function () {\n            return 'XML';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    XMLNode.prototype.getXML = function () {\n        return this.xml;\n    };\n    XMLNode.prototype.setXML = function (xml, adaptor) {\n        if (adaptor === void 0) { adaptor = null; }\n        this.xml = xml;\n        this.adaptor = adaptor;\n        return this;\n    };\n    XMLNode.prototype.getSerializedXML = function () {\n        return this.adaptor.outerHTML(this.xml);\n    };\n    XMLNode.prototype.toString = function () {\n        return 'XML data';\n    };\n    return XMLNode;\n}(AbstractMmlEmptyNode));\nexports.XMLNode = XMLNode;\n//# sourceMappingURL=MmlNode.js.map"]},"metadata":{},"sourceType":"script"}