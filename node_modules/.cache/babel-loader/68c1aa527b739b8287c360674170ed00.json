{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\BubbleChart.tsx\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BarChart extends Component {\n  constructor(props) {\n    super(props);\n    [this.state, this.setState] = React.useState({\n      data: {\n        labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n        datasets: [{\n          label: 'Bubble Sort',\n          data: this.createdata(),\n          backgroundColor: this.createBg()\n        }]\n      }\n    });\n  }\n\n  createdata() {\n    const data = [];\n\n    for (let i = 0; i < 10; i++) {\n      data[i] = Math.floor(Math.random() * 1000) + 1;\n    }\n\n    return data;\n  }\n\n  createBg() {\n    console.log('bbbbbbbbbbbbbbbb', this.state.data);\n    const colors = [];\n\n    for (let i = 0; i < 10; i++) {\n      // generate colors\n      const red = Math.floor(Math.random() * 255) + 1;\n      const green = Math.floor(Math.random() * 255) + 1;\n      const blue = Math.floor(Math.random() * 255) + 1;\n      colors[i] = `rgba(${red}, ${green}, ${blue}, 0.5)`;\n    }\n\n    return colors;\n  }\n\n  update() {\n    // create copy of dataset\n    const datasetsCopy = this.state.data.datasets.slice(0);\n    const dataCopy = datasetsCopy[0].data.slice(0); // update chartdata with random values\n\n    for (let i = 0; i < dataCopy.length; i++) {\n      dataCopy[i] = Math.floor(Math.random() * (100 - 10 + 1)) + 10;\n    } // set copied updated dataset\n\n\n    datasetsCopy[0].data = dataCopy; // update data state of chart\n\n    this.setState({\n      data: Object.assign({}, this.state.data, {\n        datasets: datasetsCopy\n      })\n    });\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.bubbleSort();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(1);\n  }\n\n  bubbleSort() {\n    // create copy of dataset\n    console.log(`aaaaaaaaa ${this.state.datasets[0]}`);\n    const data = this.state.datasets[0].data;\n    let timeout = 10;\n\n    for (let it = 0; it < data.length; ++it) {\n      for (let that = 0; that < data.length - 1 - it; ++that) {\n        if (data[that] > data[that + 1]) {\n          const temporary = data[that];\n          data[that] = data[that + 1];\n          data[that + 1] = temporary; //setArrayToSort({label: arrayToSort.label, labels:arrayToSort.labels, data:data});\n\n          const temporaryState = this.state;\n          temporaryState.datasets[0].data = data;\n          timeout += 1;\n          setTimeout(() => {\n            this.setState({\n              data: Object.assign({}, this.state.data, {\n                datasets: temporaryState\n              })\n            });\n          }, timeout);\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: this.state.data,\n        width: 100,\n        height: 500,\n        options: {\n          maintainAspectRatio: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/BubbleChart.tsx"],"names":["React","Component","Bar","BarChart","constructor","props","state","setState","useState","data","labels","datasets","label","createdata","backgroundColor","createBg","i","Math","floor","random","console","log","colors","red","green","blue","update","datasetsCopy","slice","dataCopy","length","Object","assign","componentDidMount","setTimeout","bubbleSort","componentWillUnmount","clearInterval","timeout","it","that","temporary","temporaryState","render","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\ntype propstosort = {\r\n\tdata: number;\r\n\tlabels: number;\r\n};\r\n\r\nexport default class BarChart extends Component<propstosort, any> {\r\n\r\n\tconstructor(props: propstosort) {\r\n\t\tsuper(props);\r\n\r\n\t\t[this.state, this.setState] = React.useState({\r\n\t\t\tdata: {\r\n\t\t\t\tlabels: ['1', '2', '3', '4', '5', '6','7','8','9','10'],\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Bubble Sort',\r\n\t\t\t\t\t\tdata: this.createdata(),\r\n\t\t\t\t\t\tbackgroundColor: this.createBg()\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tcreatedata(){\r\n\t\tconst data = [];\r\n\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\tdata[i] = Math.floor(Math.random() * 1000) + 1;\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tcreateBg() {\r\n\t\tconsole.log('bbbbbbbbbbbbbbbb', this.state.data);\r\n\t\tconst colors = [];\r\n\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\t// generate colors\r\n\t\t\tconst red = Math.floor(Math.random() * 255) + 1;\r\n\t\t\tconst green = Math.floor(Math.random() * 255) + 1;\r\n\t\t\tconst blue = Math.floor(Math.random() * 255) + 1;\r\n\t\t\tcolors[i] = `rgba(${red}, ${green}, ${blue}, 0.5)`;\r\n\t\t}\r\n\r\n\t\treturn colors;\r\n\t}\r\n\r\n\r\n\r\n\tupdate() {\r\n\t\t// create copy of dataset\r\n\t\tconst datasetsCopy = this.state.data.datasets.slice(0);\r\n\r\n\t\tconst dataCopy = datasetsCopy[0].data.slice(0);\r\n\r\n\t\t// update chartdata with random values\r\n\t\tfor (let i = 0; i < dataCopy.length; i++) {\r\n\t\t\tdataCopy[i] = Math.floor(Math.random() * (100 - 10 + 1)) + 10;\r\n\t\t}\r\n\r\n\t\t// set copied updated dataset\r\n\t\tdatasetsCopy[0].data = dataCopy;\r\n\r\n\t\t// update data state of chart\r\n\t\tthis.setState({\r\n\t\t\tdata: Object.assign({}, this.state.data, {\r\n\t\t\t\tdatasets: datasetsCopy\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.bubbleSort();\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(1);\r\n\t}\r\n\r\n\tbubbleSort() {\r\n\r\n\t\t// create copy of dataset\r\n\t\tconsole.log(`aaaaaaaaa ${this.state.datasets[0]}`);\r\n\t\tconst data = this.state.datasets[0].data;\r\n\r\n\t\tlet timeout = 10;\r\n\r\n\t\tfor(let it=0; it<data.length; ++it){\r\n\r\n\t\t\tfor(let that=0; that< data.length-1 -it;++that){\r\n\t\t\t\tif (data[that] > data[that+1]) {\r\n\t\t\t\t\tconst temporary = data[that];\r\n\t\t\t\t\tdata[that] = data[that+1];\r\n\t\t\t\t\tdata[that+1] = temporary;\r\n\r\n\t\t\t\t\t//setArrayToSort({label: arrayToSort.label, labels:arrayToSort.labels, data:data});\r\n\t\t\t\t\tconst temporaryState = this.state;\r\n\t\t\t\t\ttemporaryState.datasets[0].data = data;\r\n\t\t\t\t\ttimeout += 1;\r\n\t\t\t\t\tsetTimeout(()=>{\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tdata: Object.assign({}, this.state.data, {\r\n\t\t\t\t\t\t\t\tdatasets: temporaryState\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}, timeout);\r\n\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Bar\r\n\t\t\t\t\tdata={this.state.data}\r\n\t\t\t\t\twidth={100}\r\n\t\t\t\t\theight={500}\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\tmaintainAspectRatio: false\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}