{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MmlNode_js_1 = require(\"../../core/MmlTree/MmlNode.js\");\n\nvar mo_js_1 = require(\"../../core/MmlTree/MmlNodes/mo.js\");\n\nvar NodeUtil;\n\n(function (NodeUtil) {\n  var attrs = new Map([['autoOP', true], ['fnOP', true], ['movesupsub', true], ['subsupOK', true], ['texprimestyle', true], ['useHeight', true], ['variantForm', true], ['withDelims', true], ['open', true], ['close', true]]);\n\n  function createEntity(code) {\n    return String.fromCodePoint(parseInt(code, 16));\n  }\n\n  NodeUtil.createEntity = createEntity;\n\n  function getChildren(node) {\n    return node.childNodes;\n  }\n\n  NodeUtil.getChildren = getChildren;\n\n  function getText(node) {\n    return node.getText();\n  }\n\n  NodeUtil.getText = getText;\n\n  function appendChildren(node, children) {\n    var e_1, _a;\n\n    try {\n      for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n        var child = children_1_1.value;\n        node.appendChild(child);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n\n  NodeUtil.appendChildren = appendChildren;\n\n  function setAttribute(node, attribute, value) {\n    node.attributes.set(attribute, value);\n  }\n\n  NodeUtil.setAttribute = setAttribute;\n\n  function setProperty(node, property, value) {\n    node.setProperty(property, value);\n  }\n\n  NodeUtil.setProperty = setProperty;\n\n  function setProperties(node, properties) {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(Object.keys(properties)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var name_1 = _c.value;\n        var value = properties[name_1];\n\n        if (name_1 === 'texClass') {\n          node.texClass = value;\n          node.setProperty(name_1, value);\n        } else if (name_1 === 'movablelimits') {\n          node.setProperty('movablelimits', value);\n\n          if (node.isKind('mo') || node.isKind('mstyle')) {\n            node.attributes.set('movablelimits', value);\n          }\n        } else if (name_1 === 'inferred') {} else if (attrs.has(name_1)) {\n          node.setProperty(name_1, value);\n        } else {\n          node.attributes.set(name_1, value);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  }\n\n  NodeUtil.setProperties = setProperties;\n\n  function getProperty(node, property) {\n    return node.getProperty(property);\n  }\n\n  NodeUtil.getProperty = getProperty;\n\n  function getAttribute(node, attr) {\n    return node.attributes.get(attr);\n  }\n\n  NodeUtil.getAttribute = getAttribute;\n\n  function removeProperties(node) {\n    var properties = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      properties[_i - 1] = arguments[_i];\n    }\n\n    node.removeProperty.apply(node, __spread(properties));\n  }\n\n  NodeUtil.removeProperties = removeProperties;\n\n  function getChildAt(node, position) {\n    return node.childNodes[position];\n  }\n\n  NodeUtil.getChildAt = getChildAt;\n\n  function setChild(node, position, child) {\n    var children = node.childNodes;\n    children[position] = child;\n\n    if (child) {\n      child.parent = node;\n    }\n  }\n\n  NodeUtil.setChild = setChild;\n\n  function copyChildren(oldNode, newNode) {\n    var children = oldNode.childNodes;\n\n    for (var i = 0; i < children.length; i++) {\n      setChild(newNode, i, children[i]);\n    }\n  }\n\n  NodeUtil.copyChildren = copyChildren;\n\n  function copyAttributes(oldNode, newNode) {\n    newNode.attributes = oldNode.attributes;\n    setProperties(newNode, oldNode.getAllProperties());\n  }\n\n  NodeUtil.copyAttributes = copyAttributes;\n\n  function isType(node, kind) {\n    return node.isKind(kind);\n  }\n\n  NodeUtil.isType = isType;\n\n  function isEmbellished(node) {\n    return node.isEmbellished;\n  }\n\n  NodeUtil.isEmbellished = isEmbellished;\n\n  function getTexClass(node) {\n    return node.texClass;\n  }\n\n  NodeUtil.getTexClass = getTexClass;\n\n  function getCoreMO(node) {\n    return node.coreMO();\n  }\n\n  NodeUtil.getCoreMO = getCoreMO;\n\n  function isNode(item) {\n    return item instanceof MmlNode_js_1.AbstractMmlNode || item instanceof MmlNode_js_1.AbstractMmlEmptyNode;\n  }\n\n  NodeUtil.isNode = isNode;\n\n  function isInferred(node) {\n    return node.isInferred;\n  }\n\n  NodeUtil.isInferred = isInferred;\n\n  function getForm(node) {\n    var e_3, _a;\n\n    if (!isType(node, 'mo')) {\n      return null;\n    }\n\n    var mo = node;\n    var forms = mo.getForms();\n\n    try {\n      for (var forms_1 = __values(forms), forms_1_1 = forms_1.next(); !forms_1_1.done; forms_1_1 = forms_1.next()) {\n        var form = forms_1_1.value;\n        var symbol = mo_js_1.MmlMo.OPTABLE[form][mo.getText()];\n\n        if (symbol) {\n          return symbol;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (forms_1_1 && !forms_1_1.done && (_a = forms_1.return)) _a.call(forms_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return null;\n  }\n\n  NodeUtil.getForm = getForm;\n})(NodeUtil || (NodeUtil = {}));\n\nexports.default = NodeUtil;","map":{"version":3,"sources":["../../../ts/input/tex/NodeUtil.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MmlNode_js_1 = require(\"../../core/MmlTree/MmlNode.js\");\nvar mo_js_1 = require(\"../../core/MmlTree/MmlNodes/mo.js\");\nvar NodeUtil;\n(function (NodeUtil) {\n    var attrs = new Map([\n        ['autoOP', true],\n        ['fnOP', true],\n        ['movesupsub', true],\n        ['subsupOK', true],\n        ['texprimestyle', true],\n        ['useHeight', true],\n        ['variantForm', true],\n        ['withDelims', true],\n        ['open', true],\n        ['close', true]\n    ]);\n    function createEntity(code) {\n        return String.fromCodePoint(parseInt(code, 16));\n    }\n    NodeUtil.createEntity = createEntity;\n    function getChildren(node) {\n        return node.childNodes;\n    }\n    NodeUtil.getChildren = getChildren;\n    function getText(node) {\n        return node.getText();\n    }\n    NodeUtil.getText = getText;\n    function appendChildren(node, children) {\n        var e_1, _a;\n        try {\n            for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                var child = children_1_1.value;\n                node.appendChild(child);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    NodeUtil.appendChildren = appendChildren;\n    function setAttribute(node, attribute, value) {\n        node.attributes.set(attribute, value);\n    }\n    NodeUtil.setAttribute = setAttribute;\n    function setProperty(node, property, value) {\n        node.setProperty(property, value);\n    }\n    NodeUtil.setProperty = setProperty;\n    function setProperties(node, properties) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(Object.keys(properties)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var name_1 = _c.value;\n                var value = properties[name_1];\n                if (name_1 === 'texClass') {\n                    node.texClass = value;\n                    node.setProperty(name_1, value);\n                }\n                else if (name_1 === 'movablelimits') {\n                    node.setProperty('movablelimits', value);\n                    if (node.isKind('mo') || node.isKind('mstyle')) {\n                        node.attributes.set('movablelimits', value);\n                    }\n                }\n                else if (name_1 === 'inferred') {\n                }\n                else if (attrs.has(name_1)) {\n                    node.setProperty(name_1, value);\n                }\n                else {\n                    node.attributes.set(name_1, value);\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    }\n    NodeUtil.setProperties = setProperties;\n    function getProperty(node, property) {\n        return node.getProperty(property);\n    }\n    NodeUtil.getProperty = getProperty;\n    function getAttribute(node, attr) {\n        return node.attributes.get(attr);\n    }\n    NodeUtil.getAttribute = getAttribute;\n    function removeProperties(node) {\n        var properties = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            properties[_i - 1] = arguments[_i];\n        }\n        node.removeProperty.apply(node, __spread(properties));\n    }\n    NodeUtil.removeProperties = removeProperties;\n    function getChildAt(node, position) {\n        return node.childNodes[position];\n    }\n    NodeUtil.getChildAt = getChildAt;\n    function setChild(node, position, child) {\n        var children = node.childNodes;\n        children[position] = child;\n        if (child) {\n            child.parent = node;\n        }\n    }\n    NodeUtil.setChild = setChild;\n    function copyChildren(oldNode, newNode) {\n        var children = oldNode.childNodes;\n        for (var i = 0; i < children.length; i++) {\n            setChild(newNode, i, children[i]);\n        }\n    }\n    NodeUtil.copyChildren = copyChildren;\n    function copyAttributes(oldNode, newNode) {\n        newNode.attributes = oldNode.attributes;\n        setProperties(newNode, oldNode.getAllProperties());\n    }\n    NodeUtil.copyAttributes = copyAttributes;\n    function isType(node, kind) {\n        return node.isKind(kind);\n    }\n    NodeUtil.isType = isType;\n    function isEmbellished(node) {\n        return node.isEmbellished;\n    }\n    NodeUtil.isEmbellished = isEmbellished;\n    function getTexClass(node) {\n        return node.texClass;\n    }\n    NodeUtil.getTexClass = getTexClass;\n    function getCoreMO(node) {\n        return node.coreMO();\n    }\n    NodeUtil.getCoreMO = getCoreMO;\n    function isNode(item) {\n        return item instanceof MmlNode_js_1.AbstractMmlNode || item instanceof MmlNode_js_1.AbstractMmlEmptyNode;\n    }\n    NodeUtil.isNode = isNode;\n    function isInferred(node) {\n        return node.isInferred;\n    }\n    NodeUtil.isInferred = isInferred;\n    function getForm(node) {\n        var e_3, _a;\n        if (!isType(node, 'mo')) {\n            return null;\n        }\n        var mo = node;\n        var forms = mo.getForms();\n        try {\n            for (var forms_1 = __values(forms), forms_1_1 = forms_1.next(); !forms_1_1.done; forms_1_1 = forms_1.next()) {\n                var form = forms_1_1.value;\n                var symbol = mo_js_1.MmlMo.OPTABLE[form][mo.getText()];\n                if (symbol) {\n                    return symbol;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (forms_1_1 && !forms_1_1.done && (_a = forms_1.return)) _a.call(forms_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return null;\n    }\n    NodeUtil.getForm = getForm;\n})(NodeUtil || (NodeUtil = {}));\nexports.default = NodeUtil;\n//# sourceMappingURL=NodeUtil.js.map"]},"metadata":{},"sourceType":"script"}