{"ast":null,"code":"import * as instancesVal from '../instances_val2017.json';\n\nconst parseCategories = () => {\n  const classesTemp = [];\n  instancesVal.categories.forEach(item => {\n    if (!(item.supercategory in classesTemp)) {\n      classesTemp[item.supercategory] = [];\n    }\n\n    if (!(item.name in classesTemp[item.supercategory])) {\n      classesTemp[item.supercategory].push(item.name);\n    }\n  });\n  return classesTemp;\n};\n\nconst classes = parseCategories(); // export function parseSuperCategories(): string[]{\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.supercategory).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\n// \treturn supercategories as string[];\n// }\n// export function parseSubCategories(): string[]{\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.name).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\n// \treturn supercategories as string[];\n// }","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/cocoParser.ts"],"names":["instancesVal","parseCategories","classesTemp","categories","forEach","item","supercategory","name","push","classes"],"mappings":"AACA,OAAO,KAAKA,YAAZ,MAA8B,2BAA9B;;AAGA,MAAMC,eAAe,GAAC,MAAK;AAC1B,QAAMC,WAAe,GAAG,EAAxB;AACMF,EAAAA,YAAN,CAAoBG,UAApB,CAA+BC,OAA/B,CAAwCC,IAAD,IAAe;AAErD,QAAI,EAAEA,IAAI,CAACC,aAAL,IAAsBJ,WAAxB,CAAJ,EAA0C;AACzCA,MAAAA,WAAW,CAACG,IAAI,CAACC,aAAN,CAAX,GAAkC,EAAlC;AACA;;AACD,QAAI,EAAED,IAAI,CAACE,IAAL,IAAaL,WAAW,CAACG,IAAI,CAACC,aAAN,CAA1B,CAAJ,EAAqD;AACpDJ,MAAAA,WAAW,CAACG,IAAI,CAACC,aAAN,CAAX,CAAgCE,IAAhC,CAAqCH,IAAI,CAACE,IAA1C;AACA;AACD,GARD;AASA,SAAOL,WAAP;AACA,CAZD;;AAaA,MAAMO,OAAO,GAAGR,eAAe,EAA/B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport * as instancesVal from '../instances_val2017.json';\r\n\r\n\r\nconst parseCategories=()=> {\r\n\tconst classesTemp:any = [];\r\n\t(<any>instancesVal).categories.forEach((item: any) => {\r\n\r\n\t\tif (!(item.supercategory in classesTemp)) {\r\n\t\t\tclassesTemp[item.supercategory] = [];\r\n\t\t}\r\n\t\tif (!(item.name in classesTemp[item.supercategory])) {\r\n\t\t\tclassesTemp[item.supercategory].push(item.name);\r\n\t\t}\r\n\t});\r\n\treturn classesTemp;\r\n};\r\nconst classes = parseCategories();\r\n\r\n\r\n// export function parseSuperCategories(): string[]{\r\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.supercategory).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\r\n// \treturn supercategories as string[];\r\n// }\r\n// export function parseSubCategories(): string[]{\r\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.name).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\r\n// \treturn supercategories as string[];\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}