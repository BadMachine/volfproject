{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\drawCOCOimage.tsx\";\nimport React from 'react';\nimport { randomColor } from '../interfaces/SortInterfaces';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class DrawCOCOimage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvas = void 0;\n    this.state = {\n      bboxes: [],\n      descriptions: [],\n      colors: []\n    };\n  }\n\n  componentDidMount() {\n    //console.log('qweqwe     ', this.props.props.Image.width);\n    this.updateImage();\n  }\n\n  updateImage() {\n    const bboxes = [];\n    const descriptions = [];\n    const colors = [];\n    const imageObj1 = new Image();\n    imageObj1.src = this.props.props.Image.url;\n\n    imageObj1.onload = () => {\n      const ctx = this.canvas.getContext('2d');\n      ctx.drawImage(imageObj1, 0, 0); //ctx.fillStyle = 'rgba(21,235,21,0.5)';\n      //ctx.fillRect(25,72,32,32);\n\n      this.props.props.Image.info.bboxes.forEach(bbox => {\n        const fillColor = `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.3`;\n        bboxes.push(bbox.box);\n        descriptions.push(bbox.category);\n        colors.push(fillColor);\n        ctx.fillStyle = fillColor;\n        ctx.fillRect(bbox.box[0], bbox.box[1], bbox.box[2], bbox.box[3]);\n      });\n    };\n\n    this.setState({\n      bboxes: bboxes,\n      descriptions: descriptions\n    });\n  }\n\n  componentDidUpdate(prevProps, Props) {\n    if (this.props !== prevProps) {\n      this.updateImage();\n    }\n  }\n\n  handleMouse(e) {\n    const ctx = this.canvas.getContext('2d');\n    const rect = ctx.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    let i = 0;\n    let r;\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    while (true) {\n      r = this.state.bboxes[i++];\n      ctx.beginPath();\n      ctx.rect(r.x, r.y, r.w, r.h);\n      ctx.fillStyle = context.isPointInPath(x, y) ? \"blue\" : \"yellow\";\n      ctx.fill();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseMove: this.handleMouse,\n        ref: canvas => this.canvas = canvas,\n        width: this.props.props.Image.width,\n        height: this.props.props.Image.height,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/drawCOCOimage.tsx"],"names":["React","randomColor","DrawCOCOimage","Component","constructor","props","canvasRef","createRef","canvas","state","bboxes","descriptions","colors","componentDidMount","updateImage","imageObj1","Image","src","url","onload","ctx","getContext","drawImage","info","forEach","bbox","fillColor","push","box","category","fillStyle","fillRect","setState","componentDidUpdate","prevProps","Props","handleMouse","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","i","r","clearRect","width","height","beginPath","w","h","context","isPointInPath","fill","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {randomColor} from '../interfaces/SortInterfaces';\r\ninterface bbox{\r\n\tbbox: number[],\r\n\tcategory:string\r\n}\r\ninterface segment{\r\n\tsegments: number[][]\r\n}\r\ninterface segments{\r\n\tarea: number,\r\n\tsegments:segment,\r\n\tcategory:string\r\n}\r\n\r\n\r\n\r\ninterface props{\r\n\tfilename: string,\r\n\turl: string,\r\n\theight: number,\r\n\twidth: number,\r\n\tinfo: {\r\n\t\tbboxes: bbox[],\r\n\t\tsegments: segments\r\n\r\n\t}\r\n}\r\n\r\nexport class DrawCOCOimage extends React.Component<any, any>{\r\n\tpublic canvasRef = React.createRef<any>();\r\n\tpublic canvas:any;\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { bboxes:[], descriptions:[], colors:[]};\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t//console.log('qweqwe     ', this.props.props.Image.width);\r\n\t\tthis.updateImage();\r\n\t}\r\n\tupdateImage(){\r\n\t\tconst bboxes:number[]=[];\r\n\t\tconst descriptions:string[] = [];\r\n\t\tconst colors:string[] = [];\r\n\t\tconst imageObj1 = new Image();\r\n\t\timageObj1.src = this.props.props.Image.url;\r\n\t\timageObj1.onload = ()=> {\r\n\t\t\tconst ctx = this.canvas.getContext('2d');\r\n\t\t\tctx.drawImage(imageObj1,0,0);\r\n\t\t\t//ctx.fillStyle = 'rgba(21,235,21,0.5)';\r\n\t\t\t//ctx.fillRect(25,72,32,32);\r\n\t\t\tthis.props.props.Image.info.bboxes.forEach( (bbox: any)=>{\r\n\t\t\t\tconst fillColor = `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.3`;\r\n\t\t\t\tbboxes.push(bbox.box);\r\n\t\t\t\tdescriptions.push(bbox.category);\r\n\t\t\t\tcolors.push(fillColor);\r\n\t\t\t\tctx.fillStyle = fillColor;\r\n\t\t\t\tctx.fillRect(bbox.box[0],bbox.box[1],bbox.box[2],bbox.box[3]);\r\n\r\n\t\t\t});\r\n\r\n\t\t};\r\n\t\tthis.setState({bboxes: bboxes as number[], descriptions: descriptions});\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: Readonly<any>, Props: Readonly<any>) {\r\n\t\tif(this.props!==prevProps){\r\n\t\t\tthis.updateImage();\r\n\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\thandleMouse(e:any){\r\n\t\tconst ctx = this.canvas.getContext('2d');\r\n\t\tconst rect = ctx.getBoundingClientRect();\r\n\t\tconst x = e.clientX - rect.left;\r\n\t\tconst y = e.clientY - rect.top;\r\n\t\tlet i = 0;\r\n\t\tlet r:number[];\r\n\t\tctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n\t\twhile (true) {\r\n\t\t\tr = this.state.bboxes[i++];\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.rect(r.x, r.y, r.w, r.h);\r\n\t\t\tctx.fillStyle = context.isPointInPath(x, y) ? \"blue\":\"yellow\";\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<canvas onMouseMove={this.handleMouse}  ref={(canvas)=>this.canvas=canvas} width={this.props.props.Image.width} height={this.props.props.Image.height}> </canvas>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}