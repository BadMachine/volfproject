{"ast":null,"code":"import * as instancesVal from '../instances_val2017.json';\n\nconst parseCategories = () => {\n  const classesTemp = [];\n  instancesVal.categories.forEach(item => {\n    if (!(item.supercategory in classesTemp)) {\n      classesTemp[item.supercategory] = [];\n    }\n\n    if (!(item.name in classesTemp[item.supercategory])) {\n      classesTemp[item.supercategory].push(item.name);\n    }\n  });\n  return classesTemp;\n};\n\nexport const classes = parseCategories();\nexport const parseSubCategories = supercategory => {\n  //console.log('aaa', Object.values(classes).flat());\n  console.log(supercategory);\n\n  if (supercategory === 'all') {\n    return Object.values(classes).flat();\n  } else return classes[supercategory];\n}; // export function parseSuperCategories(): string[]{\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.supercategory).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\n// \treturn supercategories as string[];\n// }\n// export function parseSubCategories(): string[]{\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.name).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\n// \treturn supercategories as string[];\n// }","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/cocoParser.ts"],"names":["instancesVal","parseCategories","classesTemp","categories","forEach","item","supercategory","name","push","classes","parseSubCategories","console","log","Object","values","flat"],"mappings":"AACA,OAAO,KAAKA,YAAZ,MAA8B,2BAA9B;;AAGA,MAAMC,eAAe,GAAC,MAAK;AAC1B,QAAMC,WAAe,GAAG,EAAxB;AACMF,EAAAA,YAAN,CAAoBG,UAApB,CAA+BC,OAA/B,CAAwCC,IAAD,IAAe;AAErD,QAAI,EAAEA,IAAI,CAACC,aAAL,IAAsBJ,WAAxB,CAAJ,EAA0C;AACzCA,MAAAA,WAAW,CAACG,IAAI,CAACC,aAAN,CAAX,GAAkC,EAAlC;AACA;;AACD,QAAI,EAAED,IAAI,CAACE,IAAL,IAAaL,WAAW,CAACG,IAAI,CAACC,aAAN,CAA1B,CAAJ,EAAqD;AACpDJ,MAAAA,WAAW,CAACG,IAAI,CAACC,aAAN,CAAX,CAAgCE,IAAhC,CAAqCH,IAAI,CAACE,IAA1C;AACA;AACD,GARD;AASA,SAAOL,WAAP;AACA,CAZD;;AAaA,OAAO,MAAMO,OAAO,GAAGR,eAAe,EAA/B;AAEP,OAAO,MAAMS,kBAAkB,GAAIJ,aAAD,IAAyB;AAC1D;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;;AACA,MAAGA,aAAa,KAAG,KAAnB,EAA0B;AACzB,WAAOO,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,IAAvB,EAAP;AACA,GAFD,MAGK,OAAON,OAAO,CAACH,aAAD,CAAd;AACL,CAPM,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport * as instancesVal from '../instances_val2017.json';\r\n\r\n\r\nconst parseCategories=()=> {\r\n\tconst classesTemp:any = [];\r\n\t(<any>instancesVal).categories.forEach((item: any) => {\r\n\r\n\t\tif (!(item.supercategory in classesTemp)) {\r\n\t\t\tclassesTemp[item.supercategory] = [];\r\n\t\t}\r\n\t\tif (!(item.name in classesTemp[item.supercategory])) {\r\n\t\t\tclassesTemp[item.supercategory].push(item.name);\r\n\t\t}\r\n\t});\r\n\treturn classesTemp;\r\n};\r\nexport const classes = parseCategories();\r\n\r\nexport const parseSubCategories = (supercategory: string)=>{\r\n\t//console.log('aaa', Object.values(classes).flat());\r\n\tconsole.log(supercategory);\r\n\tif(supercategory==='all') {\r\n\t\treturn Object.values(classes).flat();\r\n\t}\r\n\telse return classes[supercategory];\r\n};\r\n\r\n// export function parseSuperCategories(): string[]{\r\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.supercategory).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\r\n// \treturn supercategories as string[];\r\n// }\r\n// export function parseSubCategories(): string[]{\r\n// \tconst supercategories = (<any>instancesVal).categories.map((item:any) => item.name).filter((value:any, index:any, self:any) => self.indexOf(value) === index);\r\n// \treturn supercategories as string[];\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}