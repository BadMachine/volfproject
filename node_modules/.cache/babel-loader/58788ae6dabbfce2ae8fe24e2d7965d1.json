{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitFieldClass = exports.BitField = void 0;\n\nvar BitField = function () {\n  function BitField() {\n    this.bits = 0;\n  }\n\n  BitField.allocate = function () {\n    var e_1, _a;\n\n    var names = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      names[_i] = arguments[_i];\n    }\n\n    try {\n      for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n        var name_1 = names_1_1.value;\n\n        if (this.has(name_1)) {\n          throw new Error('Bit already allocated for ' + name_1);\n        }\n\n        if (this.next === BitField.MAXBIT) {\n          throw new Error('Maximum number of bits already allocated');\n        }\n\n        this.names.set(name_1, this.next);\n        this.next <<= 1;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  BitField.has = function (name) {\n    return this.names.has(name);\n  };\n\n  BitField.prototype.set = function (name) {\n    this.bits |= this.getBit(name);\n  };\n\n  BitField.prototype.clear = function (name) {\n    this.bits &= ~this.getBit(name);\n  };\n\n  BitField.prototype.isSet = function (name) {\n    return !!(this.bits & this.getBit(name));\n  };\n\n  BitField.prototype.reset = function () {\n    this.bits = 0;\n  };\n\n  BitField.prototype.getBit = function (name) {\n    var bit = this.constructor.names.get(name);\n\n    if (!bit) {\n      throw new Error('Unknown bit-field name: ' + name);\n    }\n\n    return bit;\n  };\n\n  BitField.MAXBIT = 1 << 31;\n  BitField.next = 1;\n  BitField.names = new Map();\n  return BitField;\n}();\n\nexports.BitField = BitField;\n\nfunction BitFieldClass() {\n  var names = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    names[_i] = arguments[_i];\n  }\n\n  var Bits = function (_super) {\n    __extends(Bits, _super);\n\n    function Bits() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    return Bits;\n  }(BitField);\n\n  Bits.allocate.apply(Bits, __spread(names));\n  return Bits;\n}\n\nexports.BitFieldClass = BitFieldClass;","map":{"version":3,"sources":["../../ts/util/BitField.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitFieldClass = exports.BitField = void 0;\nvar BitField = (function () {\n    function BitField() {\n        this.bits = 0;\n    }\n    BitField.allocate = function () {\n        var e_1, _a;\n        var names = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            names[_i] = arguments[_i];\n        }\n        try {\n            for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n                var name_1 = names_1_1.value;\n                if (this.has(name_1)) {\n                    throw new Error('Bit already allocated for ' + name_1);\n                }\n                if (this.next === BitField.MAXBIT) {\n                    throw new Error('Maximum number of bits already allocated');\n                }\n                this.names.set(name_1, this.next);\n                this.next <<= 1;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    BitField.has = function (name) {\n        return this.names.has(name);\n    };\n    BitField.prototype.set = function (name) {\n        this.bits |= this.getBit(name);\n    };\n    BitField.prototype.clear = function (name) {\n        this.bits &= ~this.getBit(name);\n    };\n    BitField.prototype.isSet = function (name) {\n        return !!(this.bits & this.getBit(name));\n    };\n    BitField.prototype.reset = function () {\n        this.bits = 0;\n    };\n    BitField.prototype.getBit = function (name) {\n        var bit = this.constructor.names.get(name);\n        if (!bit) {\n            throw new Error('Unknown bit-field name: ' + name);\n        }\n        return bit;\n    };\n    BitField.MAXBIT = 1 << 31;\n    BitField.next = 1;\n    BitField.names = new Map();\n    return BitField;\n}());\nexports.BitField = BitField;\nfunction BitFieldClass() {\n    var names = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        names[_i] = arguments[_i];\n    }\n    var Bits = (function (_super) {\n        __extends(Bits, _super);\n        function Bits() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return Bits;\n    }(BitField));\n    Bits.allocate.apply(Bits, __spread(names));\n    return Bits;\n}\nexports.BitFieldClass = BitFieldClass;\n//# sourceMappingURL=BitField.js.map"]},"metadata":{},"sourceType":"script"}