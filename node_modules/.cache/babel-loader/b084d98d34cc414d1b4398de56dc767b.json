{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\TextDetection.tsx\";\nimport React from 'react';\nimport { Tensor, InferenceSession } from 'onnxjs';\nimport loadImage from 'blueimp-load-image';\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class TextDetection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.imageLoaderConfigs = void 0;\n    this.state;\n    this.imageLoaderConfigs = {\n      maxWidth: 256,\n      maxHeight: 256,\n      cover: true,\n      crop: true,\n      canvas: true,\n      crossOrigin: 'Anonymous'\n    };\n  }\n\n  renderImage(img) {\n    if (img.type === 'error') {\n      return;\n    }\n\n    try {\n      const element = document.getElementById('input-canvas');\n      const ctx = element.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  loadImageToCanvas(url) {\n    if (!url) {\n      return;\n    }\n\n    loadImage(url, this.renderImage, this.imageLoaderConfigs);\n  }\n\n  preProcess(ctx) {\n    const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const {\n      data,\n      width,\n      height\n    } = imageData;\n    const dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n    const dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [1, 3, width, height]);\n    ops.assign(dataProcessedTensor.pick(0, 0, null, null), dataTensor.pick(null, null, 2));\n    ops.assign(dataProcessedTensor.pick(0, 1, null, null), dataTensor.pick(null, null, 1));\n    ops.assign(dataProcessedTensor.pick(0, 2, null, null), dataTensor.pick(null, null, 0));\n    ops.divseq(dataProcessedTensor, 255);\n    ops.subseq(dataProcessedTensor.pick(0, 0, null, null), 0.485);\n    ops.subseq(dataProcessedTensor.pick(0, 1, null, null), 0.456);\n    ops.subseq(dataProcessedTensor.pick(0, 2, null, null), 0.406);\n    ops.divseq(dataProcessedTensor.pick(0, 0, null, null), 0.229);\n    ops.divseq(dataProcessedTensor.pick(0, 1, null, null), 0.224);\n    ops.divseq(dataProcessedTensor.pick(0, 2, null, null), 0.225);\n    const tensor = new Tensor(new Float32Array(3 * width * height), 'float32', [1, 3, width, height]);\n    tensor.data.set(dataProcessedTensor.data);\n    return tensor;\n  }\n\n  async start() {\n    const session = new InferenceSession(); // const session = new InferenceSession({ backendHint, Profiler });\n\n    const url = 'E:\\\\PROJCT\\\\CMDER\\\\volf_server\\\\east_model.onnx';\n    await session.loadModel(url); // Load image.\n    //const imageLoader = new ImageLoader(777, 1000);\n    //const imageData = await imageLoader.getImageData('E:\\\\PROJCT\\\\CMDER\\\\volf_server\\\\00040534.png');\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'tfTxtContainer',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'imagesContainer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'tfTxtWorkspace',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: 'activeImage',\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: 'input-canvas',\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/TextDetection.tsx"],"names":["React","Tensor","InferenceSession","loadImage","ndarray","ops","TextDetection","Component","constructor","props","imageLoaderConfigs","state","maxWidth","maxHeight","cover","crop","canvas","crossOrigin","renderImage","img","type","element","document","getElementById","ctx","getContext","drawImage","e","console","error","loadImageToCanvas","url","preProcess","imageData","getImageData","width","height","data","dataTensor","Float32Array","dataProcessedTensor","assign","pick","divseq","subseq","tensor","set","start","session","loadModel","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Modal} from 'react-bootstrap';\r\nimport {txtDetectionState} from '../interfaces/stateInterfaces';\r\nimport { Tensor, InferenceSession} from 'onnxjs';\r\nimport loadImage from 'blueimp-load-image';\r\n\r\nimport ndarray from 'ndarray';\r\nimport ops from 'ndarray-ops';\r\n\r\n\r\nexport class TextDetection extends React.Component<any, txtDetectionState>{\r\n\tprivate imageLoaderConfigs: any;\r\n\tconstructor(props:any) {\r\n\t\tsuper(props);\r\n\t\tthis.state;\r\n\t\tthis.imageLoaderConfigs = {\r\n\t\t\tmaxWidth: 256,\r\n\t\t\tmaxHeight: 256,\r\n\t\t\tcover: true,\r\n\t\t\tcrop: true,\r\n\t\t\tcanvas: true,\r\n\t\t\tcrossOrigin: 'Anonymous',\r\n\t\t};\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\trenderImage(img: Event | HTMLImageElement | HTMLCanvasElement) {\r\n\t\tif ((img as Event).type === 'error') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst element = document.getElementById('input-canvas') as HTMLCanvasElement;\r\n\t\t\tconst ctx = element.getContext('2d');\r\n\t\t\tctx!.drawImage(img as HTMLImageElement, 0, 0);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t}\r\n\r\n\tloadImageToCanvas(url: string) {\r\n\t\tif (!url) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tloadImage(url, this.renderImage, this.imageLoaderConfigs);\r\n\t}\r\n\r\n\r\n\tpreProcess(ctx: CanvasRenderingContext2D): Tensor {\r\n\t\tconst imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\t\tconst { data, width, height } = imageData;\r\n\t\tconst dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\r\n\t\tconst dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [1, 3, width, height]);\r\n\t\tops.assign(dataProcessedTensor.pick(0, 0, null, null), dataTensor.pick(null, null, 2));\r\n\t\tops.assign(dataProcessedTensor.pick(0, 1, null, null), dataTensor.pick(null, null, 1));\r\n\t\tops.assign(dataProcessedTensor.pick(0, 2, null, null), dataTensor.pick(null, null, 0));\r\n\t\tops.divseq(dataProcessedTensor, 255);\r\n\t\tops.subseq(dataProcessedTensor.pick(0, 0, null, null), 0.485);\r\n\t\tops.subseq(dataProcessedTensor.pick(0, 1, null, null), 0.456);\r\n\t\tops.subseq(dataProcessedTensor.pick(0, 2, null, null), 0.406);\r\n\t\tops.divseq(dataProcessedTensor.pick(0, 0, null, null), 0.229);\r\n\t\tops.divseq(dataProcessedTensor.pick(0, 1, null, null), 0.224);\r\n\t\tops.divseq(dataProcessedTensor.pick(0, 2, null, null), 0.225);\r\n\t\tconst tensor = new Tensor(new Float32Array(3 * width * height), 'float32', [1, 3, width, height]);\r\n\t\t(tensor.data as Float32Array).set(dataProcessedTensor.data);\r\n\t\treturn tensor;\r\n\t}\r\n\r\n\r\n\r\n\tasync start(){\r\n\r\n\t\tconst session = new InferenceSession();\r\n\t\t// const session = new InferenceSession({ backendHint, Profiler });\r\n\t\tconst url = 'E:\\\\PROJCT\\\\CMDER\\\\volf_server\\\\east_model.onnx';\r\n\t\tawait session.loadModel(url);\r\n\t\t// Load image.\r\n\t\t//const imageLoader = new ImageLoader(777, 1000);\r\n\t\t//const imageData = await imageLoader.getImageData('E:\\\\PROJCT\\\\CMDER\\\\volf_server\\\\00040534.png');\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.start();\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className={'tfTxtContainer'}>\r\n\t\t\t\t<div id={'imagesContainer'}>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div id={'tfTxtWorkspace'}>\r\n\t\t\t\t\t<div id={'activeImage'}>\r\n\t\t\t\t\t\t<canvas id={'input-canvas'}> </canvas>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}