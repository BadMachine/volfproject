{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\BackGroundParticles.tsx\";\nimport React from 'react';\nimport { backgroundParticlesConfig } from './configs/particlesConfig';\nimport { NIGHT } from '../interfaces/stateInterfaces';\nimport Particles from 'react-tsparticles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BackGroundParticles extends React.Component {\n  constructor(properties) {\n    super(properties);\n    this.particlesContainer = void 0;\n    this.theme = void 0;\n    this.options = void 0;\n    this.particlesInit = this.particlesInit.bind(this);\n    this.particlesLoaded = this.particlesLoaded.bind(this);\n    this.theme = properties.theme;\n    this.particlesContainer;\n    this.options = backgroundParticlesConfig;\n  }\n\n  componentDidMount() {//\n  }\n\n  particlesInit(main) {\n    console.log(main);\n  }\n\n  particlesLoaded(container) {\n    this.particlesContainer = container; //console.log(this.particlesContainer);\n  }\n\n  pause(theme) {\n    setTimeout(() => {\n      var _this$particlesContai;\n\n      return (_this$particlesContai = this.particlesContainer) === null || _this$particlesContai === void 0 ? void 0 : _this$particlesContai.pause();\n    }, 300); // this.options.particles.color.value = (theme === NIGHT)? '#ffffff': '#141414';\n    // this.options.particles.line_linked.color = (theme === NIGHT)? '#ffffff': '#141414';\n    //setTimeout(()=>this.particlesContainer?.pause(), 300);\n    // this.particlesContainer?.pause();\n  }\n\n  resume() {\n    var _this$particlesContai2;\n\n    (_this$particlesContai2 = this.particlesContainer) === null || _this$particlesContai2 === void 0 ? void 0 : _this$particlesContai2.play();\n  }\n\n  changeTheme(theme) {\n    // console.log(theme);\n    // this.options = this.particlesContainer?.options;\n    this.options.particles.color.value = theme === NIGHT ? '#ffffff' : '#141414';\n    this.options.particles.line_linked.color = theme === NIGHT ? '#ffffff' : '#141414'; //\n    // this.forceUpdate();\n    // this.particlesContainer?.refresh();\n    // this.options.particles.color.value = (theme === NIGHT)? '#141414': '#ffffff';\n    // this.options.particles.line_linked.color = (theme === NIGHT)? '#141414': '#ffffff';\n    //this.forceUpdate();\n    // this.particlesContainer?.options.load(JSON.parse(JSON.stringify(this.options)));\n    //\n    // this.particlesContainer?.refresh();\n    // this.particlesContainer?.destroy();\n    // this.particlesContainer?.start();\n    //console.log(this.particlesContainer);\n  }\n\n  componentDidUpdate(prevProps) {\n    // console.log(this.particlesContainer);\n    // this.props.theme==='day'? this.changeTheme(): this.changeTheme();\n    if (prevProps.theme !== this.props.theme) this.changeTheme(this.props.theme);\n    Object.values(this.props.properties).includes(true) ? this.pause(this.props.theme) : this.resume();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Particles, {\n      loaded: this.particlesLoaded,\n      params: JSON.parse(JSON.stringify(this.options))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport const MemorizedBackgroundParticles = /*#__PURE__*/React.memo(BackGroundParticles);\n_c = MemorizedBackgroundParticles;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemorizedBackgroundParticles\");","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/BackGroundParticles.tsx"],"names":["React","backgroundParticlesConfig","NIGHT","Particles","BackGroundParticles","Component","constructor","properties","particlesContainer","theme","options","particlesInit","bind","particlesLoaded","componentDidMount","main","console","log","container","pause","setTimeout","resume","play","changeTheme","particles","color","value","line_linked","componentDidUpdate","prevProps","props","Object","values","includes","render","JSON","parse","stringify","MemorizedBackgroundParticles","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SAAQC,yBAAR,QAAwC,2BAAxC;AAEA,SAA6BC,KAA7B,QAA8C,+BAA9C;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;;AAQA,MAAMC,mBAAN,SAAkCJ,KAAK,CAACK,SAAxC,CAA6D;AAK5DC,EAAAA,WAAW,CAACC,UAAD,EAAwB;AAClC,UAAMA,UAAN;AADkC,SAH5BC,kBAG4B;AAAA,SAF3BC,KAE2B;AAAA,SAD5BC,OAC4B;AAElC,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKH,KAAL,GAAaF,UAAU,CAACE,KAAxB;AACA,SAAKD,kBAAL;AACA,SAAKE,OAAL,GAAeT,yBAAf;AACA;;AAEDa,EAAAA,iBAAiB,GAAG,CACnB;AACA;;AACDH,EAAAA,aAAa,CAACI,IAAD,EAAW;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA;;AAEDF,EAAAA,eAAe,CAACK,SAAD,EAAgB;AAC9B,SAAKV,kBAAL,GAA0BU,SAA1B,CAD8B,CAE9B;AACA;;AAGDC,EAAAA,KAAK,CAACV,KAAD,EAAe;AAEnBW,IAAAA,UAAU,CAAC;AAAA;;AAAA,sCAAI,KAAKZ,kBAAT,0DAAI,sBAAyBW,KAAzB,EAAJ;AAAA,KAAD,EAAuC,GAAvC,CAAV,CAFmB,CAGnB;AACA;AACA;AACA;AACA;;AACDE,EAAAA,MAAM,GAAE;AAAA;;AAEP,mCAAKb,kBAAL,kFAAyBc,IAAzB;AACA;;AAEDC,EAAAA,WAAW,CAACd,KAAD,EAAe;AACzB;AACA;AACA,SAAKC,OAAL,CAAac,SAAb,CAAuBC,KAAvB,CAA6BC,KAA7B,GAAsCjB,KAAK,KAAKP,KAAX,GAAmB,SAAnB,GAA8B,SAAnE;AACA,SAAKQ,OAAL,CAAac,SAAb,CAAuBG,WAAvB,CAAmCF,KAAnC,GAA4ChB,KAAK,KAAKP,KAAX,GAAmB,SAAnB,GAA8B,SAAzE,CAJyB,CAKzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAED0B,EAAAA,kBAAkB,CAACC,SAAD,EAAkC;AACnD;AACA;AACA,QAAGA,SAAS,CAACpB,KAAV,KAAkB,KAAKqB,KAAL,CAAWrB,KAAhC,EAAuC,KAAKc,WAAL,CAAiB,KAAKO,KAAL,CAAWrB,KAA5B;AACvCsB,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,KAAL,CAAWvB,UAAzB,EAAqC0B,QAArC,CAA8C,IAA9C,IAAqD,KAAKd,KAAL,CAAW,KAAKW,KAAL,CAAWrB,KAAtB,CAArD,GAAmF,KAAKY,MAAL,EAAnF;AACA;;AAIDa,EAAAA,MAAM,GAAE;AACP,wBACC,QAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKrB,eAAxB;AAAyC,MAAA,MAAM,EAAEsB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK3B,OAApB,CAAX;AAAjD;AAAA;AAAA;AAAA;AAAA,YADD;AAGA;;AAxE2D;;AA2E7D,OAAO,MAAM4B,4BAA4B,gBAAGtC,KAAK,CAACuC,IAAN,CAAWnC,mBAAX,CAArC;KAAMkC,4B","sourcesContent":["import React, {useContext} from 'react';\r\nimport {backgroundParticlesConfig} from './configs/particlesConfig';\r\nimport {Container} from 'tsparticles/dist/Core/Container';\r\nimport {modalStateInterface, NIGHT, DAY} from '../interfaces/stateInterfaces';\r\nimport Particles from 'react-tsparticles';\r\n\r\ninterface properties {\r\n\tproperties: modalStateInterface,\r\n\ttheme: string\r\n}\r\n\r\n\r\nclass BackGroundParticles extends React.Component<properties>{\r\n\r\n\tpublic particlesContainer: Container | undefined;\r\n\tprivate theme:string;\r\n\tpublic options:any;\r\n\tconstructor(properties:properties) {\r\n\t\tsuper(properties);\r\n\t\tthis.particlesInit = this.particlesInit.bind(this);\r\n\t\tthis.particlesLoaded = this.particlesLoaded.bind(this);\r\n\t\tthis.theme = properties.theme;\r\n\t\tthis.particlesContainer;\r\n\t\tthis.options = backgroundParticlesConfig;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t//\r\n\t}\r\n\tparticlesInit(main:any) {\r\n\t\tconsole.log(main);\r\n\t}\r\n\r\n\tparticlesLoaded(container:any) {\r\n\t\tthis.particlesContainer = container;\r\n\t\t//console.log(this.particlesContainer);\r\n\t}\r\n\r\n\r\n\tpause(theme: string){\r\n\r\n\t\tsetTimeout(()=>this.particlesContainer?.pause(), 300);\r\n\t\t// this.options.particles.color.value = (theme === NIGHT)? '#ffffff': '#141414';\r\n\t\t// this.options.particles.line_linked.color = (theme === NIGHT)? '#ffffff': '#141414';\r\n\t\t//setTimeout(()=>this.particlesContainer?.pause(), 300);\r\n\t\t// this.particlesContainer?.pause();\r\n\t}\r\n\tresume(){\r\n\r\n\t\tthis.particlesContainer?.play();\r\n\t}\r\n\r\n\tchangeTheme(theme: string){\r\n\t\t// console.log(theme);\r\n\t\t// this.options = this.particlesContainer?.options;\r\n\t\tthis.options.particles.color.value = (theme === NIGHT)? '#ffffff': '#141414';\r\n\t\tthis.options.particles.line_linked.color = (theme === NIGHT)? '#ffffff': '#141414';\r\n\t\t//\r\n\t\t// this.forceUpdate();\r\n\t\t// this.particlesContainer?.refresh();\r\n\t\t// this.options.particles.color.value = (theme === NIGHT)? '#141414': '#ffffff';\r\n\t\t// this.options.particles.line_linked.color = (theme === NIGHT)? '#141414': '#ffffff';\r\n\t\t//this.forceUpdate();\r\n\t\t// this.particlesContainer?.options.load(JSON.parse(JSON.stringify(this.options)));\r\n\t\t//\r\n\t\t// this.particlesContainer?.refresh();\r\n\t\t// this.particlesContainer?.destroy();\r\n\t\t// this.particlesContainer?.start();\r\n\t\t//console.log(this.particlesContainer);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: Readonly<properties>) {\r\n\t\t// console.log(this.particlesContainer);\r\n\t\t// this.props.theme==='day'? this.changeTheme(): this.changeTheme();\r\n\t\tif(prevProps.theme!==this.props.theme) this.changeTheme(this.props.theme);\r\n\t\tObject.values(this.props.properties).includes(true)? this.pause(this.props.theme): this.resume();\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<Particles loaded={this.particlesLoaded} params={JSON.parse(JSON.stringify(this.options)) }/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport const MemorizedBackgroundParticles = React.memo(BackGroundParticles);\r\n"]},"metadata":{},"sourceType":"module"}