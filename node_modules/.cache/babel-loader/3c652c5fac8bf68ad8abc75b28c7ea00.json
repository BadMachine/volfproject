{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\InsertionSortChart.tsx\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { chartjsDataTemplate, generateColorsForChart } from '../interfaces/SortInterfaces';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InsertionSortChart extends Component {\n  constructor(props) {\n    super(props);\n    this.chartReference = void 0;\n    this.chart = void 0;\n    this.timer = void 0;\n    this.isSorting = void 0;\n    this.interrupt = void 0;\n    this.uselessRefresh = void 0;\n    this.state = void 0;\n    this.props = void 0;\n    this.timeouts = void 0;\n    this.date = void 0;\n\n    this.equals = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\n    this.state = chartjsDataTemplate;\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.timer = 0;\n    this.isSorting = false;\n    this.interrupt = false;\n    this.date = 0;\n    this.uselessRefresh = false;\n    this.timeouts = [];\n  }\n\n  insertionSort() {\n    const labels = this.chart.data.labels;\n    const data = this.chart.data.datasets[0].data;\n    const colors = this.chart.data.datasets[0].backgroundColor;\n    let timeout = 0;\n\n    for (let i = 1; i < data.length; i++) {\n      const current = data[i];\n      let j = i - 1;\n\n      while (j > -1 && current < data[j]) {\n        data[j + 1] = data[j];\n        j--;\n      }\n\n      data[j + 1] = current;\n    }\n  }\n\n  componentDidMount() {\n    this.chart = this.chartReference.current.chartInstance;\n  }\n\n  updateChartDelayed(labels, data, colors, timeout) {\n    this.timer = setTimeout(() => {\n      const now = new Date().getTime();\n      const timeDifference = now - this.date;\n      const seconds = Math.floor(timeDifference % (1000 * 60) / 1000);\n      const mins = timeDifference / 60000;\n      const mils = Math.floor(timeDifference % (1000 * 60) / 1);\n      this.chart.data.datasets[0].label = `${mins.toString().substr(0, 1)}m ${seconds}s ${mils.toString().substr(-3)}ms`;\n      this.chart.data.labels = labels;\n      this.chart.data.datasets[0].data = data;\n      this.chart.data.datasets[0].backgroundColor = colors;\n      this.chart.update();\n      const eth = [...this.chart.data.datasets[0].data].sort((x, y) => x - y);\n\n      if (eth.toString() === this.chart.data.datasets[0].data.toString()) {\n        this.props.callback();\n      }\n    }, timeout);\n    return this.timer;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  clearAllTimeouts() {\n    for (const timeout in this.timeouts) {\n      clearInterval(this.timeouts[timeout]);\n    }\n\n    this.timeouts = [];\n  }\n\n  refreshChart() {\n    //console.log(this.props.commands.arrayLength);\n    const temporaryDataToSort = chartjsDataTemplate;\n    temporaryDataToSort.datasets[0].data = Array.from({\n      length: this.props.commands.arrayLength\n    }, () => Math.floor(Math.random() * 1000));\n    temporaryDataToSort.labels = Array.from({\n      length: this.props.commands.arrayLength\n    }, (_, i) => (i + 1).toString());\n    [temporaryDataToSort.datasets[0].backgroundColor, temporaryDataToSort.datasets[0].borderColor] = generateColorsForChart(this.props.commands.arrayLength, 0.4); //console.log(temporaryDataToSort.datasets[0].data);\n\n    this.setState(temporaryDataToSort);\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('QUICK TRIGGERED!');\n\n    if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\n      this.date = new Date(Date.now()).getTime();\n      this.clearAllTimeouts();\n\n      if (this.props.commands.StopSort) {\n        this.clearAllTimeouts();\n      } else if (this.props.commands.name !== prevProps.commands.name && this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n        this.clearAllTimeouts();\n        this.refreshChart();\n        setTimeout(() => {\n          this.insertionSort();\n        }, 800);\n      } else if (this.props.commands.name !== prevProps.commands.name) {\n        this.insertionSort();\n      } else if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n        this.refreshChart();\n        this.clearAllTimeouts();\n        setTimeout(() => {\n          this.insertionSort();\n        }, 800);\n      } else if (this.props.commands.arrayLength === prevProps.commands.arrayLength) {\n        this.refreshChart();\n        this.clearAllTimeouts();\n        setTimeout(() => {\n          this.insertionSort();\n        }, 800);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: this.state,\n        width: 100,\n        height: 50,\n        options: {\n          legend: {\n            display: true,\n            position: 'top',\n            labels: {\n              boxWidth: 0\n            }\n          }\n        },\n        ref: this.chartReference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport const MemorizedInsertionChart = /*#__PURE__*/React.memo(InsertionSortChart);\n_c = MemorizedInsertionChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemorizedInsertionChart\");","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/InsertionSortChart.tsx"],"names":["React","Component","Bar","chartjsDataTemplate","generateColorsForChart","InsertionSortChart","constructor","props","chartReference","chart","timer","isSorting","interrupt","uselessRefresh","state","timeouts","date","equals","a","b","JSON","stringify","createRef","insertionSort","labels","data","datasets","colors","backgroundColor","timeout","i","length","current","j","componentDidMount","chartInstance","updateChartDelayed","setTimeout","now","Date","getTime","timeDifference","seconds","Math","floor","mins","mils","label","toString","substr","update","eth","sort","x","y","callback","componentWillUnmount","clearInterval","clearAllTimeouts","refreshChart","temporaryDataToSort","Array","from","commands","arrayLength","random","_","borderColor","setState","componentDidUpdate","prevProps","console","log","StopSort","name","render","legend","display","position","boxWidth","MemorizedInsertionChart","memo"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport {CommandsInterface, chartjsDataTemplate, generateColorsForChart} from '../interfaces/SortInterfaces';\r\n\r\n\r\nclass InsertionSortChart extends Component<CommandsInterface>{\r\n\tprivate chartReference: React.RefObject<any>;\r\n\tprivate chart: any;\r\n\tprivate timer: any;\r\n\tprivate isSorting: boolean;\r\n\tprivate interrupt: boolean;\r\n\tprivate uselessRefresh: boolean;\r\n\tpublic state;\r\n\tpublic props: any;\r\n\tprivate timeouts:number[];\r\n\tprivate date: number;\r\n\r\n\tconstructor(props: CommandsInterface) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = chartjsDataTemplate;\r\n\r\n\t\tthis.chartReference = React.createRef<any>();\r\n\r\n\t\tthis.timer = 0;\r\n\r\n\t\tthis.isSorting = false;\r\n\r\n\t\tthis.interrupt = false;\r\n\r\n\t\tthis.date = 0;\r\n\r\n\t\tthis.uselessRefresh = false;\r\n\r\n\t\tthis.timeouts = [];\r\n\r\n\t}\r\n\r\n\r\n\r\n\tinsertionSort() {\r\n\r\n\t\tconst labels = this.chart.data.labels;\r\n\t\tconst data = this.chart.data.datasets[0].data;\r\n\t\tconst colors = this.chart.data.datasets[0].backgroundColor;\r\n\t\tlet timeout = 0;\r\n\r\n\t\tfor (let i = 1; i < data.length; i++) {\r\n\t\t\tconst current = data[i];\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile ((j > -1) && (current < data[j])) {\r\n\t\t\t\tdata[j+1] = data[j];\r\n\t\t\t\tj--;\r\n\t\t\t\t\r\n\r\n\t\t\t}\r\n\t\t\tdata[j+1] = current;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tequals = (a:number[], b:number[]) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\n\tcomponentDidMount(){\r\n\r\n\t\tthis.chart = this.chartReference.current.chartInstance;\r\n\t}\r\n\r\n\r\n\tupdateChartDelayed(labels: string[], data:number[], colors:string[], timeout:number) {\r\n\r\n\r\n\t\tthis.timer = setTimeout(() => {\r\n\r\n\t\t\tconst now = new Date().getTime();\r\n\t\t\tconst timeDifference  = now - this.date;\r\n\t\t\tconst seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\r\n\t\t\tconst mins = timeDifference /60000;\r\n\t\t\tconst mils = Math.floor((timeDifference % (1000 * 60)) / 1);\r\n\r\n\t\t\tthis.chart.data.datasets[0].label =  `${mins.toString().substr(0,1)}m ${seconds}s ${mils.toString().substr(-3)}ms`  ;\r\n\t\t\tthis.chart.data.labels = labels;\r\n\t\t\tthis.chart.data.datasets[0].data = data;\r\n\t\t\tthis.chart.data.datasets[0].backgroundColor = colors;\r\n\t\t\tthis.chart.update();\r\n\r\n\t\t\tconst eth = [...this.chart.data.datasets[0].data].sort((x,y)=> x-y);\r\n\t\t\tif( eth.toString() === this.chart.data.datasets[0].data.toString()) {\r\n\t\t\t\tthis.props.callback();\r\n\t\t\t}\r\n\r\n\r\n\t\t}, timeout);\r\n\r\n\r\n\r\n\t\treturn this.timer;\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timer);\r\n\r\n\t}\r\n\r\n\r\n\tclearAllTimeouts(){\r\n\t\tfor(const timeout in this.timeouts){\r\n\t\t\tclearInterval(this.timeouts[timeout]);\r\n\t\t}\r\n\t\tthis.timeouts=[];\r\n\t}\r\n\r\n\trefreshChart(){\r\n\t\t//console.log(this.props.commands.arrayLength);\r\n\t\tconst temporaryDataToSort = chartjsDataTemplate;\r\n\t\ttemporaryDataToSort.datasets[0].data = Array.from({length: this.props.commands.arrayLength}, () => Math.floor(Math.random() * 1000));\r\n\t\ttemporaryDataToSort.labels = Array.from({ length: this.props.commands.arrayLength }, (_, i) => (i+1).toString());\r\n\t\t[temporaryDataToSort.datasets[0].backgroundColor, temporaryDataToSort.datasets[0].borderColor] = generateColorsForChart(this.props.commands.arrayLength, 0.4);\r\n\r\n\t\t//console.log(temporaryDataToSort.datasets[0].data);\r\n\t\tthis.setState(temporaryDataToSort);\r\n\t}\r\n\r\n\r\n\tcomponentDidUpdate(prevProps:CommandsInterface) {\r\n\r\n\t\tconsole.log('QUICK TRIGGERED!');\r\n\r\n\t\tif(JSON.stringify(prevProps)!==JSON.stringify(this.props)) {\r\n\r\n\r\n\t\t\tthis.date = new Date(Date.now()).getTime();\r\n\r\n\t\t\tthis.clearAllTimeouts();\r\n\r\n\t\t\tif (this.props.commands.StopSort) {\r\n\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\r\n\t\t\t} else if (this.props.commands.name !== prevProps.commands.name && this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\t\t\t\tthis.refreshChart();\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.insertionSort();\r\n\t\t\t\t}, 800);\r\n\t\t\t} else if (this.props.commands.name !== prevProps.commands.name) {\r\n\r\n\t\t\t\tthis.insertionSort();\r\n\t\t\t} else if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\r\n\t\t\t\tthis.refreshChart();\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.insertionSort();\r\n\t\t\t\t}, 800);\r\n\r\n\t\t\t} else if (this.props.commands.arrayLength === prevProps.commands.arrayLength) {\r\n\r\n\t\t\t\tthis.refreshChart();\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.insertionSort();\r\n\t\t\t\t}, 800);\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<Bar data={this.state} width={100} height={50} options={{\r\n\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\tposition: 'top',\r\n\t\t\t\t\t\tlabels: {\r\n\t\t\t\t\t\t\tboxWidth: 0,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}} ref={this.chartReference}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t}\r\n\r\n\r\n}\r\nexport const MemorizedInsertionChart = React.memo(InsertionSortChart);\r\n"]},"metadata":{},"sourceType":"module"}