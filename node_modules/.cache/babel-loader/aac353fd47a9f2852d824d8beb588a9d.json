{"ast":null,"code":"export const initialBubbleCommandsState = {\n  commands: {\n    name: '',\n    arrayLength: 10,\n    startSorting: false,\n    refreshChart: false\n  }\n};\nexport const chartjsDataTemplate = {\n  labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n  datasets: [{\n    label: 'Unnamed',\n    data: Array.from({\n      length: 10\n    }, () => Math.floor(Math.random() * 100)),\n    backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'],\n    borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n    borderWidth: 1\n  }]\n};\n\nfunction BubbleSort(chartjsData) {\n  let dataToSort = chartjsData.data.datasets[0].data; // loop to access each array element\n\n  for (let step = 0; step < dataToSort.length - 1; ++step) {\n    // check if swapping occurs\n    let swapped = 0; // loop to compare two elements\n\n    for (let i = 0; i < dataToSort.length - step - 1; ++i) {\n      // compare two array elements\n      // change > to < to sort in descending order\n      if (dataToSort[i] > dataToSort[i + 1]) {\n        // swapping occurs if\n        // the first element is greater than the second\n        const temp = dataToSort[i];\n        dataToSort[i] = dataToSort[i + 1];\n        dataToSort[i + 1] = temp;\n        swapped = 1;\n      }\n    } // no swapping means the array is already sorted\n    // so no need of further comparison\n\n\n    if (swapped == 0) break;\n  }\n}\n\n_c = BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/interfaces/SortInterfaces.tsx"],"names":["initialBubbleCommandsState","commands","name","arrayLength","startSorting","refreshChart","chartjsDataTemplate","labels","datasets","label","data","Array","from","length","Math","floor","random","backgroundColor","borderColor","borderWidth","BubbleSort","chartjsData","dataToSort","step","swapped","i","temp"],"mappings":"AAeA,OAAO,MAAMA,0BAA0B,GAAG;AACzCC,EAAAA,QAAQ,EAAC;AACRC,IAAAA,IAAI,EAAE,EADE;AAERC,IAAAA,WAAW,EAAE,EAFL;AAGRC,IAAAA,YAAY,EAAE,KAHN;AAIRC,IAAAA,YAAY,EAAE;AAJN;AADgC,CAAnC;AAqBP,OAAO,MAAMC,mBAAmB,GAAG;AAClCC,EAAAA,MAAM,EAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA8B,GAA9B,EAAkC,GAAlC,EAAsC,GAAtC,EAA0C,IAA1C,CAD2B;AAElCC,EAAAA,QAAQ,EAAE,CAAC;AACVC,IAAAA,KAAK,EAAE,SADG;AAEVC,IAAAA,IAAI,EAAEC,KAAK,CAACC,IAAN,CAAW;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAX,EAAyB,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAA/B,CAFI;AAGVC,IAAAA,eAAe,EAAE,CAChB,yBADgB,EAEhB,yBAFgB,EAGhB,yBAHgB,EAIhB,yBAJgB,EAKhB,0BALgB,EAMhB,yBANgB,EAOhB,yBAPgB,EAQhB,yBARgB,EAShB,yBATgB,EAUhB,0BAVgB,CAHP;AAgBVC,IAAAA,WAAW,EAAE,CACZ,uBADY,EAEZ,uBAFY,EAGZ,uBAHY,EAIZ,uBAJY,EAKZ,wBALY,EAMZ,uBANY,EAOZ,uBAPY,EAQZ,uBARY,EASZ,uBATY,EAUZ,wBAVY,CAhBH;AA4BVC,IAAAA,WAAW,EAAE;AA5BH,GAAD;AAFwB,CAA5B;;AAmCP,SAASC,UAAT,CAAoBC,WAApB,EAAiD;AAEhD,MAAIC,UAAU,GAAGD,WAAW,CAACX,IAAZ,CAAiBF,QAAjB,CAA0B,CAA1B,EAA6BE,IAA9C,CAFgD,CAIhD;;AACA,OAAK,IAAIa,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAID,UAAU,CAACT,MAAX,GAAkB,CAA7C,EAAiD,EAAEU,IAAnD,EAAyD;AACxD;AACA,QAAIC,OAAO,GAAG,CAAd,CAFwD,CAGxD;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAIH,UAAU,CAACT,MAAX,GAAkBU,IAAlB,GAAuB,CAA5C,EAAgD,EAAEE,CAAlD,EAAqD;AACpD;AACA;AACA,UAAIH,UAAU,CAACG,CAAD,CAAV,GAAgBH,UAAU,CAACG,CAAC,GAAG,CAAL,CAA9B,EAAuC;AACtC;AACA;AACA,cAAMC,IAAI,GAAGJ,UAAU,CAACG,CAAD,CAAvB;AACAH,QAAAA,UAAU,CAACG,CAAD,CAAV,GAAeH,UAAU,CAACG,CAAC,GAAG,CAAL,CAAzB;AACAH,QAAAA,UAAU,CAACG,CAAC,GAAG,CAAL,CAAV,GAAoBC,IAApB;AAEAF,QAAAA,OAAO,GAAG,CAAV;AACA;AACD,KAhBuD,CAkBxD;AACA;;;AACA,QAAIA,OAAO,IAAI,CAAf,EACC;AACD;AACD;;KA5BQJ,U","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nexport interface commands{\r\n\tname: string,\r\n    arrayLength: number,\r\n    startSorting: boolean,\r\n    refreshChart: boolean\r\n}\r\n\r\nexport interface BubbleCommandsInterface{\r\n    commands: commands\r\n}\r\n\r\nexport const initialBubbleCommandsState = {\r\n\tcommands:{\r\n\t\tname: '',\r\n\t\tarrayLength: 10,\r\n\t\tstartSorting: false,\r\n\t\trefreshChart: false\r\n\t}\r\n};\r\n\r\nexport type chartjsDataType = {\r\n    data: {\r\n        labels: string[]; datasets: {\r\n            label: string;\r\n            data: number[];\r\n            backgroundColor: string[];\r\n            borderColor: string[];\r\n            borderWidth: number; }[];\r\n    }\r\n};\r\n\r\n\r\nexport const chartjsDataTemplate = {\r\n\tlabels:['1', '2', '3', '4', '5', '6','7','8','9','10'],\r\n\tdatasets: [{\r\n\t\tlabel: 'Unnamed',\r\n\t\tdata: Array.from({length: 10}, () => Math.floor(Math.random() * 100)),\r\n\t\tbackgroundColor: [\r\n\t\t\t'rgba(255, 99, 132, 0.2)',\r\n\t\t\t'rgba(54, 162, 235, 0.2)',\r\n\t\t\t'rgba(255, 206, 86, 0.2)',\r\n\t\t\t'rgba(75, 192, 192, 0.2)',\r\n\t\t\t'rgba(153, 102, 255, 0.2)',\r\n\t\t\t'rgba(255, 159, 64, 0.2)',\r\n\t\t\t'rgba(54, 162, 235, 0.2)',\r\n\t\t\t'rgba(255, 206, 86, 0.2)',\r\n\t\t\t'rgba(75, 192, 192, 0.2)',\r\n\t\t\t'rgba(153, 102, 255, 0.2)',\r\n\r\n\t\t],\r\n\t\tborderColor: [\r\n\t\t\t'rgba(255, 99, 132, 1)',\r\n\t\t\t'rgba(54, 162, 235, 1)',\r\n\t\t\t'rgba(255, 206, 86, 1)',\r\n\t\t\t'rgba(75, 192, 192, 1)',\r\n\t\t\t'rgba(153, 102, 255, 1)',\r\n\t\t\t'rgba(255, 159, 64, 1)',\r\n\t\t\t'rgba(54, 162, 235, 1)',\r\n\t\t\t'rgba(255, 206, 86, 1)',\r\n\t\t\t'rgba(75, 192, 192, 1)',\r\n\t\t\t'rgba(153, 102, 255, 1)'\r\n\t\t],\r\n\t\tborderWidth: 1\r\n\t}]\r\n};\r\n\r\n\r\nfunction BubbleSort(chartjsData: chartjsDataType){\r\n\r\n\tlet dataToSort = chartjsData.data.datasets[0].data;\r\n\r\n\t// loop to access each array element\r\n\tfor (let step = 0; step < (dataToSort.length-1); ++step) {\r\n\t\t// check if swapping occurs\r\n\t\tlet swapped = 0;\r\n\t\t// loop to compare two elements\r\n\t\tfor (let i = 0; i < (dataToSort.length-step-1); ++i) {\r\n\t\t\t// compare two array elements\r\n\t\t\t// change > to < to sort in descending order\r\n\t\t\tif (dataToSort[i] > dataToSort[i + 1]) {\r\n\t\t\t\t// swapping occurs if\r\n\t\t\t\t// the first element is greater than the second\r\n\t\t\t\tconst temp = dataToSort[i];\r\n\t\t\t\tdataToSort[i] =dataToSort[i + 1];\r\n\t\t\t\tdataToSort[i + 1] = temp;\r\n\r\n\t\t\t\tswapped = 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// no swapping means the array is already sorted\r\n\t\t// so no need of further comparison\r\n\t\tif (swapped == 0)\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}