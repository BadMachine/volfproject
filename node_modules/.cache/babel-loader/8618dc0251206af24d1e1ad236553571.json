{"ast":null,"code":"import * as instancesVal from '../instances_val2017.json';\n\nconst parseCategories = () => {\n  const classesTemp = [];\n  instancesVal.categories.forEach(item => {\n    if (!(item.supercategory in classesTemp)) {\n      classesTemp[item.supercategory] = [];\n    }\n\n    if (!(item.name in classesTemp[item.supercategory])) {\n      classesTemp[item.supercategory].push(item.name);\n    }\n  });\n  return classesTemp;\n};\n\nexport const classes = parseCategories();\nexport const parseSubCategories = supercategory => {\n  if (supercategory === 'all') {\n    console.log('qqqq');\n    console.log(Object.values(classes).flat());\n    return Object.values(classes).flat();\n  } else return classes[supercategory];\n};\n\nfunction fetchBboxesAndSegments(imageID) {\n  const bboxes = [];\n  const segments = [];\n  const annotationForImage = instancesVal.annotations.filter(annotation => annotation.image_id === imageID);\n  annotationForImage.forEach(annotation => {\n    bboxes.push({\n      box: annotation.bbox,\n      category: instancesVal.categories.find(item => item.id === annotation.category_id).name\n    });\n    segments.push({\n      area: annotation.area,\n      segments: annotation.segmentation,\n      category: instancesVal.categories.find(item => item.id === annotation.category_id).name\n    });\n  });\n  return {\n    bboxes: bboxes,\n    segments: segments\n  };\n}\n\nexport const getRandomCocoExample = () => {\n  const random = Math.round(Math.random() * instancesVal.images.length);\n  const image = instancesVal.images[random];\n  return {\n    filename: image.file_name,\n    path: 'C:\\\\',\n    url: image.coco_url,\n    height: image.height,\n    width: image.width,\n    info: fetchBboxesAndSegments(image.id),\n    showBboxes: false,\n    showKeypoints: false\n  };\n};\nexport const getFilteredCocoExample = filter => {\n  console.log('FILTER');\n  const classesToSearch = filter.superclass === 'all' ? instancesVal.categories.map(classes => classes.id) : instancesVal.categories.filter(category => category.supercategory === filter.superclass).map(item => item.id);\n  const images_filtered_by_size = filter.image.width > 0 && filter.image.height > 0 ? instancesVal.images.filter(image => image.height <= filter.image.height).map(image => ({\n    url: image.coco_url,\n    id: image.id,\n    width: image.width,\n    height: image.height,\n    license: image.license\n  })) : instancesVal.images.map(image => ({\n    url: image.coco_url,\n    id: image.id,\n    width: image.width,\n    height: image.height,\n    license: image.license\n  }));\n  const annos_filtered_by_ClHs = instancesVal.annotations.filter(annotation => classesToSearch.includes(annotation.category_id) && images_filtered_by_size.map(image => image.id).includes(annotation.image_id));\n  let annos_filtered_by_bbox_shape;\n\n  if (filter.only === 1 || filter.only === 3) {\n    annos_filtered_by_bbox_shape = filter.bboxes.maxWidth > 0 && filter.bboxes.maxHeight > 0 ? annos_filtered_by_ClHs.filter(anno => Math.abs(anno.bbox[2] - anno.bbox[0]) <= filter.bboxes.maxWidth && Math.abs(anno.bbox[3] - anno.bbox[1]) <= filter.bboxes.maxHeight) : annos_filtered_by_ClHs;\n    annos_filtered_by_bbox_shape = filter.bboxes.minWidth > 0 && filter.bboxes.minHeight > 0 ? annos_filtered_by_bbox_shape.filter(anno => Math.abs(anno.bbox[0] - anno.bbox[2]) >= filter.bboxes.minWidth && filter.bboxes.minHeight <= Math.abs(anno.bbox[1] - anno.bbox[3])) : annos_filtered_by_bbox_shape;\n  } else annos_filtered_by_bbox_shape = annos_filtered_by_ClHs;\n\n  let resultImages = images_filtered_by_size.filter(image => annos_filtered_by_bbox_shape.map(anno => anno.image_id).includes(image.id));\n  resultImages = resultImages.map(image => ({\n    url: image.url,\n    id: image.id,\n    width: image.width,\n    height: image.height,\n    license: instancesVal.licenses.find(license => license.id === image.license).name\n  }));\n  resultImages = resultImages.map(image => ({\n    filename: image.url.split('/')[4],\n    path: path + image.url.split('/')[4],\n    url: image.url,\n    width: image.width,\n    height: image.height,\n    license: image.license,\n    info: {\n      bboxes: only === 1 || only === 3 ? annos_filtered_by_bbox_shape.filter(anno => anno.image_id === image.id).map(item => item.bbox) : [],\n      segments: only === 2 || only === 3 ? annos_filtered_by_bbox_shape.filter(anno => anno.image_id === image.id).map(item => item.segmentation) : []\n    },\n    showBboxes: only === 1 || only === 3,\n    showKeypoints: only === 2 || only === 3\n  }));\n  return resultImages;\n};","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/cocoParser.ts"],"names":["instancesVal","parseCategories","classesTemp","categories","forEach","item","supercategory","name","push","classes","parseSubCategories","console","log","Object","values","flat","fetchBboxesAndSegments","imageID","bboxes","segments","annotationForImage","annotations","filter","annotation","image_id","box","bbox","category","find","id","category_id","area","segmentation","getRandomCocoExample","random","Math","round","images","length","image","filename","file_name","path","url","coco_url","height","width","info","showBboxes","showKeypoints","getFilteredCocoExample","classesToSearch","superclass","map","images_filtered_by_size","license","annos_filtered_by_ClHs","includes","annos_filtered_by_bbox_shape","only","maxWidth","maxHeight","anno","abs","minWidth","minHeight","resultImages","licenses","split"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as instancesVal from '../instances_val2017.json';\r\nimport {randomColor} from '../interfaces/SortInterfaces';\r\nimport {filterData} from './classesCOCO';\r\n\r\nconst parseCategories=()=> {\r\n\tconst classesTemp:any = [];\r\n\t(<any>instancesVal).categories.forEach((item: any) => {\r\n\r\n\t\tif (!(item.supercategory in classesTemp)) {\r\n\t\t\tclassesTemp[item.supercategory] = [];\r\n\t\t}\r\n\t\tif (!(item.name in classesTemp[item.supercategory])) {\r\n\t\t\tclassesTemp[item.supercategory].push(item.name);\r\n\t\t}\r\n\t});\r\n\treturn classesTemp;\r\n};\r\nexport const classes = parseCategories();\r\n\r\nexport const parseSubCategories = (supercategory: string)=>{\r\n\r\n\tif(supercategory==='all') {\r\n\t\tconsole.log('qqqq');\r\n\t\tconsole.log(Object.values(classes).flat());\r\n\t\treturn Object.values(classes).flat();\r\n\t}\r\n\telse return classes[supercategory];\r\n};\r\n\r\n\r\nfunction fetchBboxesAndSegments(imageID:number){\r\n\tconst bboxes:any = [];\r\n\tconst segments:any = [];\r\n\r\n\tconst annotationForImage = (<any>instancesVal).annotations.filter((annotation: any) => annotation.image_id === imageID);\r\n\tannotationForImage.forEach((annotation:any)=>{\r\n\t\tbboxes.push({box: annotation.bbox, category: (<any>instancesVal).categories.find((item: any)=> item.id ===annotation.category_id).name});\r\n\t\tsegments.push({area: annotation.area, segments: annotation.segmentation, category: (<any>instancesVal).categories.find((item: any)=> item.id ===annotation.category_id).name   });\r\n\t});\r\n\treturn {bboxes: bboxes, segments: segments};\r\n\r\n}\r\n\r\n\r\nexport const getRandomCocoExample = ()=>{\r\n\r\n\tconst random = Math.round(Math.random() * ((<any>instancesVal).images.length));\r\n\tconst image = (<any>instancesVal).images[random];\r\n\r\n\treturn {\r\n\t\tfilename: image.file_name,\r\n\t\tpath: 'C:\\\\',\r\n\t\turl: image.coco_url,\r\n\t\theight: image.height,\r\n\t\twidth: image.width,\r\n\t\tinfo: fetchBboxesAndSegments(image.id),\r\n\t\tshowBboxes: false,\r\n\t\tshowKeypoints: false\r\n\t};\r\n\r\n\r\n};\r\n\r\nexport const getFilteredCocoExample = (filter: filterData) =>{\r\n\r\n\tconsole.log('FILTER');\r\n\tconst classesToSearch = (filter.superclass==='all') ? (<any>instancesVal).categories.map((classes:any)=> classes.id)\r\n\t\t:\r\n\t\t(<any>instancesVal).categories.filter((category:any)=> category.supercategory===filter.superclass).map((item:any)=> item.id);\r\n\r\n\tconst images_filtered_by_size = (filter.image.width>0 && filter.image.height>0) ?\r\n\t\t(<any>instancesVal).images.filter((image:any)=> image.height<=filter.image.height).map((image:any)=> ({url:image.coco_url, id: image.id, width: image.width, height: image.height, license: image.license}))\r\n\t\t:\r\n\t\t(<any>instancesVal).images.map((image:any)=> ({url: image.coco_url, id: image.id, width: image.width, height: image.height, license: image.license}));\r\n\r\n\tconst annos_filtered_by_ClHs = (<any>instancesVal).annotations.filter((annotation:any)=>\r\n\t\tclassesToSearch.includes(annotation.category_id) && images_filtered_by_size.map((image:any)=> image.id).includes(annotation.image_id) );\r\n\r\n\tlet annos_filtered_by_bbox_shape:any;\r\n\tif(filter.only===1 || filter.only===3) {\r\n\t\tannos_filtered_by_bbox_shape = (filter.bboxes.maxWidth > 0 && filter.bboxes.maxHeight > 0) ?\r\n\t\t\tannos_filtered_by_ClHs.filter((anno:any) => Math.abs(anno.bbox[2] - anno.bbox[0]) <= filter.bboxes.maxWidth && Math.abs(anno.bbox[3] - anno.bbox[1]) <= filter.bboxes.maxHeight )\r\n\t\t\t:\r\n\t\t\tannos_filtered_by_ClHs;\r\n\r\n\t\tannos_filtered_by_bbox_shape = (filter.bboxes.minWidth > 0 && filter.bboxes.minHeight > 0) ?\r\n\t\t\tannos_filtered_by_bbox_shape.filter((anno:any) => Math.abs(anno.bbox[0] - anno.bbox[2]) >= filter.bboxes.minWidth && filter.bboxes.minHeight <= Math.abs(anno.bbox[1] - anno.bbox[3]))\r\n\t\t\t:\r\n\t\t\tannos_filtered_by_bbox_shape;\r\n\t}else annos_filtered_by_bbox_shape = annos_filtered_by_ClHs;\r\n\r\n\tlet resultImages = images_filtered_by_size.filter((image:any)=>  annos_filtered_by_bbox_shape.map((anno:any)=> anno.image_id).includes(image.id) );\r\n\r\n\tresultImages = resultImages.map((image:any)=> ({ url:image.url, id: image.id, width: image.width, height: image.height, license: (<any>instancesVal).licenses.find((license:any) => license.id === image.license).name }));\r\n\r\n\tresultImages = resultImages.map((image:any) => ({\r\n\t\tfilename: image.url.split('/')[4],\r\n\t\tpath: path+image.url.split('/')[4],\r\n\t\turl: image.url,\r\n\t\twidth: image.width,\r\n\t\theight: image.height,\r\n\t\tlicense: image.license,\r\n\t\tinfo:{\r\n\t\t\tbboxes: (only===1 || only===3)? annos_filtered_by_bbox_shape.filter(anno => anno.image_id === image.id).map(item=> item.bbox) : [],\r\n\t\t\tsegments: (only===2 || only===3)? annos_filtered_by_bbox_shape.filter(anno => anno.image_id === image.id).map(item=> item.segmentation) : []\r\n\t\t},\r\n\t\tshowBboxes: only===1 || only===3,\r\n\t\tshowKeypoints: only===2 || only===3\r\n\t}) );\r\n\r\n\treturn resultImages;\r\n\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}