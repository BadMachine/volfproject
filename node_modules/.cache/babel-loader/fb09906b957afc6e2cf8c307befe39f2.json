{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\TextDetection.tsx\";\nimport React from 'react';\nimport { Tensor, InferenceSession } from 'onnxjs';\nimport loadImage from 'blueimp-load-image';\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class TextDetection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canva = void 0;\n    this.imageLoaderConfigs = void 0;\n    this.state;\n    this.imageLoaderConfigs = {\n      maxWidth: 256,\n      maxHeight: 256,\n      cover: true,\n      crop: true,\n      canvas: true,\n      crossOrigin: 'Anonymous'\n    };\n  }\n\n  preProcess(ctx) {\n    const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const {\n      data,\n      width,\n      height\n    } = imageData;\n    const dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n    const dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [1, 3, width, height]);\n    ops.assign(dataProcessedTensor.pick(0, 0, null, null), dataTensor.pick(null, null, 2));\n    ops.assign(dataProcessedTensor.pick(0, 1, null, null), dataTensor.pick(null, null, 1));\n    ops.assign(dataProcessedTensor.pick(0, 2, null, null), dataTensor.pick(null, null, 0));\n    ops.divseq(dataProcessedTensor, 255);\n    ops.subseq(dataProcessedTensor.pick(0, 0, null, null), 0.485);\n    ops.subseq(dataProcessedTensor.pick(0, 1, null, null), 0.456);\n    ops.subseq(dataProcessedTensor.pick(0, 2, null, null), 0.406);\n    ops.divseq(dataProcessedTensor.pick(0, 0, null, null), 0.229);\n    ops.divseq(dataProcessedTensor.pick(0, 1, null, null), 0.224);\n    ops.divseq(dataProcessedTensor.pick(0, 2, null, null), 0.225);\n    const tensor = new Tensor(new Float32Array(3 * width * height), 'float32', [1, 3, width, height]);\n    tensor.data.set(dataProcessedTensor.data);\n    return tensor;\n  }\n\n  loadCanvas() {\n    const ctx = this.canva.getContext('2d');\n    const img = new Image();\n    img.src = './00040534.png';\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n  }\n\n  async run(preProcessedData) {\n    const session = new InferenceSession();\n    const url = './east_model.onnx';\n    await session.loadModel(url);\n    const start = new Date();\n\n    try {\n      const outputData = await model.run([preProcessedData]);\n      const end = new Date();\n      const inferenceTime = end.getTime() - start.getTime();\n      const output = outputData.values().next().value;\n      return [output, inferenceTime];\n    } catch (e) {\n      console.error(e);\n      throw new Error();\n    }\n  }\n\n  componentDidMount() {\n    loadImage('./00040534.png', this.loadCanvas.bind(this), this.imageLoaderConfigs);\n    const preprocessed = this.preProcess(this.canva.getContext('2d'));\n    this.run(preprocessed); //this.loadCanvas();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'tfTxtContainer',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'imagesContainer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'tfTxtWorkspace',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: 'activeImage',\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            width: 777,\n            height: 1000,\n            ref: canvas => this.canva = canvas,\n            id: 'input-canvas',\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/TextDetection.tsx"],"names":["React","Tensor","InferenceSession","loadImage","ndarray","ops","TextDetection","Component","constructor","props","canva","imageLoaderConfigs","state","maxWidth","maxHeight","cover","crop","canvas","crossOrigin","preProcess","ctx","imageData","getImageData","width","height","data","dataTensor","Float32Array","dataProcessedTensor","assign","pick","divseq","subseq","tensor","set","loadCanvas","getContext","img","Image","src","onload","drawImage","run","preProcessedData","session","url","loadModel","start","Date","outputData","model","end","inferenceTime","getTime","output","values","next","value","e","console","error","Error","componentDidMount","bind","preprocessed","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Modal} from 'react-bootstrap';\r\nimport {txtDetectionState} from '../interfaces/stateInterfaces';\r\nimport { Tensor, InferenceSession} from 'onnxjs';\r\nimport loadImage from 'blueimp-load-image';\r\nimport ndarray from 'ndarray';\r\nimport ops from 'ndarray-ops';\r\n\r\nexport class TextDetection extends React.Component<any, txtDetectionState>{\r\n\tprivate canva: any;\r\n\tprivate imageLoaderConfigs:any;\r\n\tconstructor(props:any) {\r\n\t\tsuper(props);\r\n\t\tthis.state;\r\n\t\tthis.imageLoaderConfigs = {\r\n\t\t\tmaxWidth: 256,\r\n\t\t\tmaxHeight: 256,\r\n\t\t\tcover: true,\r\n\t\t\tcrop: true,\r\n\t\t\tcanvas: true,\r\n\t\t\tcrossOrigin: 'Anonymous',\r\n\t\t};\r\n\t}\r\n\r\n\tpreProcess(ctx: CanvasRenderingContext2D): Tensor {\r\n\t\tconst imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\t\tconst { data, width, height } = imageData;\r\n\t\tconst dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\r\n\t\tconst dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [1, 3, width, height]);\r\n\t\tops.assign(dataProcessedTensor.pick(0, 0, null, null), dataTensor.pick(null, null, 2));\r\n\t\tops.assign(dataProcessedTensor.pick(0, 1, null, null), dataTensor.pick(null, null, 1));\r\n\t\tops.assign(dataProcessedTensor.pick(0, 2, null, null), dataTensor.pick(null, null, 0));\r\n\t\tops.divseq(dataProcessedTensor, 255);\r\n\t\tops.subseq(dataProcessedTensor.pick(0, 0, null, null), 0.485);\r\n\t\tops.subseq(dataProcessedTensor.pick(0, 1, null, null), 0.456);\r\n\t\tops.subseq(dataProcessedTensor.pick(0, 2, null, null), 0.406);\r\n\t\tops.divseq(dataProcessedTensor.pick(0, 0, null, null), 0.229);\r\n\t\tops.divseq(dataProcessedTensor.pick(0, 1, null, null), 0.224);\r\n\t\tops.divseq(dataProcessedTensor.pick(0, 2, null, null), 0.225);\r\n\t\tconst tensor = new Tensor(new Float32Array(3 * width * height), 'float32', [1, 3, width, height]);\r\n\t\t(tensor.data as Float32Array).set(dataProcessedTensor.data);\r\n\t\treturn tensor;\r\n\t}\r\n\r\n\tloadCanvas(){\r\n\t\tconst ctx = this.canva.getContext('2d');\r\n\t\tconst img = new Image();\r\n\t\timg.src = './00040534.png';\r\n\t\timg.onload = ()=>{\r\n\t\t\tctx.drawImage(img,0,0);\r\n\t\t};\r\n\t}\r\n\r\n\tasync run(preProcessedData: Tensor){\r\n\t\tconst session = new InferenceSession();\r\n\t\tconst url = './east_model.onnx';\r\n\t\tawait session.loadModel(url);\r\n\r\n\t\tconst start = new Date();\r\n\t\ttry {\r\n\t\t\tconst outputData = await model.run([preProcessedData]);\r\n\t\t\tconst end = new Date();\r\n\t\t\tconst inferenceTime = (end.getTime() - start.getTime());\r\n\t\t\tconst output = outputData.values().next().value;\r\n\t\t\treturn [output, inferenceTime];\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t\tthrow new Error();\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tloadImage('./00040534.png', this.loadCanvas.bind(this), this.imageLoaderConfigs);\r\n\t\tconst preprocessed = this.preProcess(this.canva.getContext('2d'));\r\n\t\tthis.run(preprocessed);\r\n\t\t//this.loadCanvas();\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className={'tfTxtContainer'}>\r\n\t\t\t\t<div id={'imagesContainer'}>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div id={'tfTxtWorkspace'}>\r\n\t\t\t\t\t<div id={'activeImage'}>\r\n\t\t\t\t\t\t<canvas width={777} height={1000} ref={(canvas)=>this.canva=canvas} id={'input-canvas'}> </canvas>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}