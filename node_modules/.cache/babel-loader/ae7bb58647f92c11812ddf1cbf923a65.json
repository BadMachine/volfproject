{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\drawCOCOimage.tsx\";\nimport React from 'react';\nimport { randomColor } from '../interfaces/SortInterfaces';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class DrawCOCOimage extends React.Component {\n  //public canvasRef = React.createRef<any>();\n  //public tooltip = '';\n  //readonly state:stateInterface;\n  constructor(props) {\n    super(props); //this.state={};\n\n    this.canvas = void 0;\n    this.canvasForeground = void 0;\n    this.currentCategory = void 0;\n    this.imageHasBeenLoaded = void 0;\n    this.tooltipRef = void 0;\n    this.data = void 0;\n    this.tooltipRef = /*#__PURE__*/React.createRef();\n    this.imageHasBeenLoaded = false;\n    this.currentCategory = '';\n    this.data = {\n      bboxes: [],\n      descriptions: [],\n      colors: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateImage();\n  }\n\n  handleMouse(e) {\n    const ctx = this.canvasForeground.getContext('2d');\n    const rect = this.canvasForeground.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    let i = 0;\n    let r;\n\n    if (this.props.props.Image.showBboxes && this.imageHasBeenLoaded) {\n      ctx.clearRect(0, 0, e.target.width, e.target.height);\n\n      while (i < this.data.bboxes.length) {\n        r = this.data.bboxes[i];\n        ctx.beginPath();\n        ctx.rect(r[0], r[1], r[2], r[3]);\n        const [R, G, B, A] = this.data.colors[i].slice(5, this.data.colors[i].length).split(',');\n        ctx.fillStyle = ctx.isPointInPath(x, y) ? `rgba(${R},${G},${B},0.6)` : this.data.colors[i];\n\n        if (ctx.isPointInPath(x, y)) {\n          ctx.font = '30px Arial serif';\n\n          try {\n            this.currentCategory = this.props.props.Image.info.bboxes[i].category;\n            ctx.fillText(this.props.props.Image.info.bboxes[i].category, r[0], r[1] - 30, 100);\n          } catch (e) {\n            console.log('Maybe we can find category for chosen segment');\n          }\n        }\n\n        ctx.fill();\n        i++;\n      }\n    }\n  }\n\n  updateImage() {\n    this.imageHasBeenLoaded = false;\n    const bboxes = [];\n    const descriptions = [];\n    const colors = [];\n    const imageObj1 = new Image(); //console.log(this.props.props.Image.url);\n\n    imageObj1.src = this.props.props.Image.url;\n\n    imageObj1.onload = () => {\n      const ctx = this.canvas.getContext('2d');\n      const ctxForeground = this.canvasForeground.getContext('2d');\n      ctx.drawImage(imageObj1, 0, 0);\n\n      if (this.props.props.Image.showBboxes) {\n        //console.log(this.props.props.Image.showBboxes);\n        this.props.props.Image.info.bboxes.forEach(bbox => {\n          const fillColor = `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.4`;\n          bboxes.push(bbox.box);\n          descriptions.push(bbox.category);\n          colors.push(fillColor);\n          ctxForeground.fillStyle = fillColor;\n          ctxForeground.fillRect(bbox.box[0], bbox.box[1], bbox.box[2], bbox.box[3]);\n        });\n        this.data = {\n          bboxes: bboxes,\n          descriptions: descriptions,\n          colors: colors\n        };\n      } else {\n        this.data.bboxes.forEach(bbox => {\n          ctxForeground.clearRect(...bbox);\n        });\n      } // this.data = {bboxes: bboxes as number[][], descriptions: descriptions, colors: colors };\n\n\n      this.imageHasBeenLoaded = true;\n    };\n  }\n\n  testMove(e) {\n    console.log(e);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.props.Image.showBboxes === true) {\n      console.log('On');\n      this.updateImage();\n    } else {\n      console.log('Off');\n      this.updateImage();\n    } //console.log(`this.props.props.Image ${JSON.stringify(this.props.props.Image)}, prevProps.props.Image ${prevProps.props.Image}`);\n    //this.updateImage();\n    //console.log(`this.props.props.Image.showBboxes ${this.props.props.Image.showBboxes}, prevProps.props.Image.showBboxes ${prevProps.props.Image.showBboxes}`);\n    // if(this.props.props.Image.showBboxes!== prevProps.props.Image.showBboxes){\n    // \t//console.log(`this.props.props.Image ${this.props.props.Image}, prevProps.props.Image ${prevProps.props.Image}`);\n    // \tconsole.log('have changed');\n    // \tthis.updateImage();\n    // }\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseMove: this.testMove.bind(this),\n      children: /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        placement: 'bottom',\n        overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n          ref: tooltipRef,\n          id: \"tooltip-disabled\",\n          children: this.currentCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 52\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n            style: {\n              zIndex: 1\n            },\n            ref: canvas => this.canvas = canvas,\n            width: this.props.props.Image.width,\n            height: this.props.props.Image.height,\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            style: {\n              top: 0,\n              zIndex: 2,\n              marginLeft: `-${this.props.props.Image.width}px`\n            },\n            onMouseMove: this.handleMouse.bind(this),\n            ref: canvas => this.canvasForeground = canvas,\n            width: this.props.props.Image.width,\n            height: this.props.props.Image.height\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/drawCOCOimage.tsx"],"names":["React","randomColor","OverlayTrigger","Tooltip","DrawCOCOimage","Component","constructor","props","canvas","canvasForeground","currentCategory","imageHasBeenLoaded","tooltipRef","data","createRef","bboxes","descriptions","colors","componentDidMount","updateImage","handleMouse","e","ctx","getContext","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","i","r","Image","showBboxes","clearRect","target","width","height","length","beginPath","R","G","B","A","slice","split","fillStyle","isPointInPath","font","info","category","fillText","console","log","fill","imageObj1","src","url","onload","ctxForeground","drawImage","forEach","bbox","fillColor","push","box","fillRect","testMove","componentDidUpdate","prevProps","render","bind","display","zIndex","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {CommandsInterface, randomColor} from '../interfaces/SortInterfaces';\r\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\r\n\r\ninterface bbox{\r\n\tbbox: number[],\r\n\tcategory:string\r\n}\r\ninterface segment{\r\n\tsegments: number[][]\r\n}\r\ninterface segments{\r\n\tarea: number,\r\n\tsegments:segment,\r\n\tcategory:string\r\n}\r\n\r\n\r\n\r\ninterface props{\r\n\tprops: {\r\n\t\tImage:{\r\n\t\tfilename: string,\r\n\t\turl: string,\r\n\t\theight: number,\r\n\t\twidth: number,\r\n\t\tinfo: {\r\n\t\t\tbboxes: bbox[],\r\n\t\t\tsegments: segments\r\n\t\t},\r\n\t\tshowBboxes: boolean,\r\n\t\tshowKeypoints: boolean\r\n\t}\r\n\t}\r\n}\r\ninterface stateInterface{\r\n\tbboxes:number[][], descriptions:string[], colors:string[]\r\n}\r\n\r\n\r\n\r\nexport class DrawCOCOimage extends React.Component<props, any>{\r\n\t//public canvasRef = React.createRef<any>();\r\n\tpublic canvas:any;\r\n\t//public tooltip = '';\r\n\tpublic canvasForeground:any;\r\n\tprivate currentCategory: string;\r\n\tprivate imageHasBeenLoaded: boolean;\r\n\tprivate tooltipRef:any;\r\n\t//readonly state:stateInterface;\r\n\tprivate data:stateInterface;\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\t//this.state={};\r\n\t\tthis.tooltipRef = React.createRef();\r\n\t\tthis.imageHasBeenLoaded = false;\r\n\t\tthis.currentCategory ='';\r\n\t\tthis.data = { bboxes:[], descriptions:[], colors:[]};\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.updateImage();\r\n\t}\r\n\r\n\r\n\thandleMouse(e:any){\r\n\r\n\t\tconst ctx = this.canvasForeground.getContext('2d');\r\n\t\tconst rect = this.canvasForeground.getBoundingClientRect();\r\n\t\tconst x = e.clientX - rect.left;\r\n\t\tconst y = e.clientY - rect.top;\r\n\t\tlet i = 0;\r\n\t\tlet r:number[];\r\n\t\tif(this.props.props.Image.showBboxes && this.imageHasBeenLoaded) {\r\n\t\t\tctx.clearRect(0, 0, e.target.width, e.target.height);\r\n\t\t\twhile (i < this.data.bboxes.length) {\r\n\t\t\t\tr = this.data.bboxes[i];\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.rect(r[0], r[1], r[2], r[3]);\r\n\t\t\t\tconst [R, G, B, A] = this.data.colors[i].slice(5, this.data.colors[i].length).split(',');\r\n\t\t\t\tctx.fillStyle = ctx.isPointInPath(x, y) ? `rgba(${R},${G},${B},0.6)` : this.data.colors[i];\r\n\r\n\t\t\t\tif (ctx.isPointInPath(x, y)) {\r\n\t\t\t\t\tctx.font = '30px Arial serif';\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthis.currentCategory = this.props.props.Image.info.bboxes[i].category;\r\n\t\t\t\t\t\tctx.fillText(this.props.props.Image.info.bboxes[i].category, r[0], r[1] - 30, 100);\r\n\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\tconsole.log('Maybe we can find category for chosen segment');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tctx.fill();\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tupdateImage(){\r\n\t\tthis.imageHasBeenLoaded = false;\r\n\t\tconst bboxes:number[][]=[];\r\n\t\tconst descriptions:string[] = [];\r\n\t\tconst colors:string[] = [];\r\n\t\tconst imageObj1 = new Image();\r\n\t\t//console.log(this.props.props.Image.url);\r\n\t\timageObj1.src = this.props.props.Image.url;\r\n\t\timageObj1.onload = ()=> {\r\n\t\t\tconst ctx = this.canvas.getContext('2d');\r\n\t\t\tconst ctxForeground = this.canvasForeground.getContext('2d');\r\n\t\t\tctx.drawImage(imageObj1,0,0);\r\n\t\t\tif(this.props.props.Image.showBboxes) {\r\n\t\t\t\t//console.log(this.props.props.Image.showBboxes);\r\n\t\t\t\tthis.props.props.Image.info.bboxes.forEach((bbox: any) => {\r\n\t\t\t\t\tconst fillColor = `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.4`;\r\n\t\t\t\t\tbboxes.push(bbox.box);\r\n\t\t\t\t\tdescriptions.push(bbox.category);\r\n\t\t\t\t\tcolors.push(fillColor);\r\n\t\t\t\t\tctxForeground.fillStyle = fillColor;\r\n\t\t\t\t\tctxForeground.fillRect(bbox.box[0], bbox.box[1], bbox.box[2], bbox.box[3]);\r\n\r\n\t\t\t\t});\r\n\t\t\t\tthis.data = {bboxes: bboxes as number[][], descriptions: descriptions, colors: colors };\r\n\t\t\t}else{\r\n\r\n\t\t\t\tthis.data.bboxes.forEach((bbox)=>{\r\n\t\t\t\t\tctxForeground.clearRect(...bbox);\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t}\r\n\t\t\t// this.data = {bboxes: bboxes as number[][], descriptions: descriptions, colors: colors };\r\n\t\t\tthis.imageHasBeenLoaded = true;\r\n\t\t};\r\n\t}\r\n\r\n\ttestMove(e:any){\r\n\t\tconsole.log(e);\r\n\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps:props) {\r\n\r\n\t\tif(this.props.props.Image.showBboxes===true){\r\n\t\t\tconsole.log('On');\r\n\t\t\tthis.updateImage();\r\n\t\t}else{\r\n\t\t\tconsole.log('Off');\r\n\t\t\tthis.updateImage();\r\n\t\t}\r\n\t\t//console.log(`this.props.props.Image ${JSON.stringify(this.props.props.Image)}, prevProps.props.Image ${prevProps.props.Image}`);\r\n\t\t//this.updateImage();\r\n\t\t//console.log(`this.props.props.Image.showBboxes ${this.props.props.Image.showBboxes}, prevProps.props.Image.showBboxes ${prevProps.props.Image.showBboxes}`);\r\n\t\t// if(this.props.props.Image.showBboxes!== prevProps.props.Image.showBboxes){\r\n\t\t// \t//console.log(`this.props.props.Image ${this.props.props.Image}, prevProps.props.Image ${prevProps.props.Image}`);\r\n\t\t// \tconsole.log('have changed');\r\n\t\t// \tthis.updateImage();\r\n\t\t// }\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div onMouseMove={this.testMove.bind(this)}>\r\n\r\n\t\t\t\t<OverlayTrigger placement={'bottom'}  overlay={<Tooltip ref={tooltipRef} id=\"tooltip-disabled\">{this.currentCategory }</Tooltip>}>\r\n\t\t\t\t\t<div style={{ display: 'flex'}}>\r\n\t\t\t\t\t\t<canvas style={{zIndex:1}}   ref={(canvas)=>this.canvas=canvas} width={this.props.props.Image.width} height={this.props.props.Image.height}> </canvas>\r\n\t\t\t\t\t\t<canvas style={{top: 0,zIndex:2, marginLeft:`-${this.props.props.Image.width}px`}} onMouseMove={this.handleMouse.bind(this)} ref={(canvas)=>this.canvasForeground=canvas} width={this.props.props.Image.width} height={this.props.props.Image.height}></canvas>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</OverlayTrigger>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}