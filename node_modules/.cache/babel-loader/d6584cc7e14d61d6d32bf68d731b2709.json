{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\BubbleChart.tsx\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { chartjsDataTemplate } from '../interfaces/SortInterfaces';\nimport { sortingStore } from './ModalContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BubbleChart extends Component {\n  constructor(props) {\n    super(props);\n    this.chartReference = void 0;\n    this.chart = void 0;\n    this.timer = void 0;\n    this.isSorting = void 0;\n    this.interrupt = void 0;\n    this.uslessRefresh = void 0;\n    this.state = void 0;\n    this.props = void 0;\n\n    this.equals = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\n    this.state = chartjsDataTemplate;\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.timer = 1;\n    this.isSorting = false;\n    this.interrupt = false;\n    this.uslessRefresh = false;\n  } // randomize(size: number){\n  // \tthis.chart.data.labels = Array.from({length: size}, () => Math.floor(Math.random() * 1000));\n  // \tthis.chart.data.datasets[0].data = Array.from({ length: size }, (_, i) => (i+1).toString());\n  // }\n\n\n  bubbleSort() {\n    const labels = this.chart.data.labels;\n    const data = this.chart.data.datasets[0].data;\n    const colors = this.chart.data.datasets[0].backgroundColor;\n    let swapped;\n    let timeout = 0;\n\n    do {\n      swapped = false;\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i] > data[i + 1]) {\n          this.swap(labels, i);\n          this.swap(data, i);\n          this.swap(colors, i);\n          timeout += 100;\n          this.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\n          swapped = true;\n        }\n      }\n    } while (swapped);\n  }\n\n  swap(arr, i) {\n    const tmp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = tmp;\n  }\n\n  componentDidMount() {\n    this.chart = this.chartReference.current.chartInstance;\n    const tempChartJSObject = chartjsDataTemplate;\n    tempChartJSObject.datasets[0].label = this.props.commands.name;\n    this.setState(tempChartJSObject);\n    console.log('did mount');\n  }\n\n  updateChartDelayed(labels, data, colors, timeout) {\n    if (!this.interrupt) {\n      this.timer = setTimeout(() => {\n        this.isSorting = true;\n        this.chart.data.labels = labels;\n        this.chart.data.datasets[0].data = data;\n        this.chart.data.datasets[0].backgroundColor = colors;\n        this.chart.update();\n      }, timeout);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer); //console.log('unmounted');\n\n    sortingStore.dispatch({\n      type: ''\n    });\n  }\n\n  refreshChart() {\n    const temporaryDataToSort = chartjsDataTemplate;\n    temporaryDataToSort.datasets[0].data = Array.from({\n      length: this.props.commands.arrayLength\n    }, () => Math.floor(Math.random() * 1000));\n    temporaryDataToSort.labels = Array.from({\n      length: this.props.commands.arrayLength\n    }, (_, i) => (i + 1).toString());\n    this.setState(temporaryDataToSort);\n  }\n\n  componentDidUpdate(prevProps) {\n    //console.log(`${JSON.stringify(this.props)},            ${JSON.stringify(prevProps)}`);\n    if (!(JSON.stringify(prevProps) === JSON.stringify(this.props))) {\n      this.uselessRefresh = this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data);\n      if (this.uselessRefresh) if (this.props.commands.refreshChart) {\n        this.refreshChart();\n      } // setTimeout(() => {\n      // \tthis.bubbleSort();\n      // }, 100);\n      //\n      //\n      // this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data) ? this.uslessRefresh = true : this.uslessRefresh = false;\n      //\n      // if(!this.uslessRefresh){\n      // \tconsole.log('test');\n      // \tsetTimeout(() => {\n      // \t\tthis.bubbleSort();\n      // \t}, 100);\n      // }\n      //\n      // if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n      // \tthis.refreshChart();\n      //\n      //\n      // }\n      // if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\n      // \t//this.refreshChart();\n      // \t//sortingStore.dispatch({type:''});\n      // \t//console.log('Is not sorting, refreshing chart...');\n      // \tthis.refreshChart();\n      //\n      // }\n      // if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\n      // \t//console.log('Is sorting!!!...');\n      //\n      // \t//this.interrupt = true;\n      // \t//clearInterval(this.timer);\n      // \t//console.log(this.timer);\n      //\n      // }\n      // if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n      // \tif (!this.isSorting) {\n      // \t\t// console.log(`Array sorting is ${this.isSorting}, refreshing...`);\n      // \t\t// this.refreshChart();\n      // \t}\n      // }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        data: this.state,\n        width: 100,\n        height: 50,\n        ref: this.chartReference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/BubbleChart.tsx"],"names":["React","Component","Bar","chartjsDataTemplate","sortingStore","BubbleChart","constructor","props","chartReference","chart","timer","isSorting","interrupt","uslessRefresh","state","equals","a","b","JSON","stringify","createRef","bubbleSort","labels","data","datasets","colors","backgroundColor","swapped","timeout","i","length","swap","updateChartDelayed","slice","arr","tmp","componentDidMount","current","chartInstance","tempChartJSObject","label","commands","name","setState","console","log","setTimeout","update","componentWillUnmount","clearInterval","dispatch","type","refreshChart","temporaryDataToSort","Array","from","arrayLength","Math","floor","random","_","toString","componentDidUpdate","prevProps","uselessRefresh","render"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport {BubbleCommandsInterface, chartjsDataType, chartjsDataTemplate, initialBubbleCommandsState} from '../interfaces/SortInterfaces';\r\nimport {sortingStore} from './ModalContent';\r\nimport {bubbleSort} from '../redux/SortingStateReducer';\r\n\r\n\r\n\r\nexport default class BubbleChart extends Component<any>{\r\n\tprivate chartReference: React.RefObject<any>;\r\n\tprivate chart: any;\r\n\tprivate timer: any;\r\n\tprivate isSorting: boolean;\r\n\tprivate interrupt: boolean;\r\n\tprivate uslessRefresh: boolean;\r\n\tpublic state;\r\n\tpublic props: any;\r\n\r\n\tconstructor(props: BubbleCommandsInterface) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = chartjsDataTemplate;\r\n\r\n\t\tthis.chartReference = React.createRef<any>();\r\n\r\n\t\tthis.timer = 1;\r\n\r\n\t\tthis.isSorting = false;\r\n\r\n\t\tthis.interrupt = false;\r\n\r\n\t\tthis.uslessRefresh = false;\r\n\r\n\t}\r\n\r\n\t// randomize(size: number){\r\n\t// \tthis.chart.data.labels = Array.from({length: size}, () => Math.floor(Math.random() * 1000));\r\n\t// \tthis.chart.data.datasets[0].data = Array.from({ length: size }, (_, i) => (i+1).toString());\r\n\t// }\r\n\r\n\tbubbleSort() {\r\n\t\tconst labels = this.chart.data.labels;\r\n\t\tconst data = this.chart.data.datasets[0].data;\r\n\t\tconst colors = this.chart.data.datasets[0].backgroundColor;\r\n\t\tlet swapped;\r\n\t\tlet timeout = 0;\r\n\r\n\t\tdo {\r\n\t\t\tswapped = false;\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tif (data[i] > data[i + 1]) {\r\n\t\t\t\t\tthis.swap(labels, i);\r\n\t\t\t\t\tthis.swap(data, i);\r\n\t\t\t\t\tthis.swap(colors, i);\r\n\t\t\t\t\ttimeout += 100;\r\n\t\t\t\t\tthis.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\r\n\t\t\t\t\tswapped = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} while (swapped);\r\n\r\n\t}\r\n\r\n\tswap(arr:any, i:any) {\r\n\t\tconst tmp = arr[i];\r\n\t\tarr[i] = arr[i + 1];\r\n\t\tarr[i + 1] = tmp;\r\n\t}\r\n\r\n\tequals = (a:number[], b:number[]) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.chart = this.chartReference.current.chartInstance;\r\n\t\tconst tempChartJSObject = chartjsDataTemplate;\r\n\t\ttempChartJSObject.datasets[0].label = this.props.commands.name;\r\n\t\tthis.setState(tempChartJSObject);\r\n\t\tconsole.log('did mount');\r\n\t}\r\n\r\n\r\n\tupdateChartDelayed(labels: string[], data:number[], colors:string[], timeout:number) {\r\n\t\tif (!this.interrupt) {\r\n\t\t\tthis.timer = setTimeout(() => {\r\n\t\t\t\tthis.isSorting = true;\r\n\t\t\t\tthis.chart.data.labels = labels;\r\n\t\t\t\tthis.chart.data.datasets[0].data = data;\r\n\t\t\t\tthis.chart.data.datasets[0].backgroundColor = colors;\r\n\t\t\t\tthis.chart.update();\r\n\t\t\t}, timeout);\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timer);\r\n\t\t//console.log('unmounted');\r\n\t\tsortingStore.dispatch({type:''});\r\n\t}\r\n\r\n\r\n\trefreshChart(){\r\n\t\tconst temporaryDataToSort = chartjsDataTemplate;\r\n\t\ttemporaryDataToSort.datasets[0].data = Array.from({length: this.props.commands.arrayLength}, () => Math.floor(Math.random() * 1000));\r\n\t\ttemporaryDataToSort.labels = Array.from({ length: this.props.commands.arrayLength }, (_, i) => (i+1).toString());\r\n\t\tthis.setState(temporaryDataToSort);\r\n\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps:BubbleCommandsInterface) {\r\n\r\n\r\n\t\t//console.log(`${JSON.stringify(this.props)},            ${JSON.stringify(prevProps)}`);\r\n\r\n\t\tif (!(JSON.stringify(prevProps) === JSON.stringify(this.props))) {\r\n\r\n\t\t\tthis.uselessRefresh = this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data);\r\n\r\n\t\t\tif(this.uselessRefresh)\r\n\r\n\t\t\tif(this.props.commands.refreshChart){\r\n\t\t\t\tthis.refreshChart();\r\n\t\t\t}\r\n\t\t\t// setTimeout(() => {\r\n\t\t\t// \tthis.bubbleSort();\r\n\t\t\t// }, 100);\r\n\t\t\t//\r\n\t\t\t//\r\n\t\t\t// this.equals(this.state.datasets[0].data, this.chart.data.datasets[0].data) ? this.uslessRefresh = true : this.uslessRefresh = false;\r\n\t\t\t//\r\n\t\t\t// if(!this.uslessRefresh){\r\n\t\t\t// \tconsole.log('test');\r\n\t\t\t// \tsetTimeout(() => {\r\n\t\t\t// \t\tthis.bubbleSort();\r\n\t\t\t// \t}, 100);\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\t\t\t// \tthis.refreshChart();\r\n\t\t\t//\r\n\t\t\t//\r\n\t\t\t// }\r\n\r\n\r\n\t\t\t// if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\r\n\t\t\t// \t//this.refreshChart();\r\n\t\t\t// \t//sortingStore.dispatch({type:''});\r\n\t\t\t// \t//console.log('Is not sorting, refreshing chart...');\r\n\t\t\t// \tthis.refreshChart();\r\n\t\t\t//\r\n\t\t\t// }\r\n\t\t\t// if (this.props.commands.arrayLength === prevProps.commands.arrayLength && !this.uslessRefresh) {\r\n\t\t\t// \t//console.log('Is sorting!!!...');\r\n\t\t\t//\r\n\t\t\t// \t//this.interrupt = true;\r\n\t\t\t// \t//clearInterval(this.timer);\r\n\t\t\t// \t//console.log(this.timer);\r\n\t\t\t//\r\n\t\t\t// }\r\n\t\t\t// if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\t\t\t// \tif (!this.isSorting) {\r\n\t\t\t// \t\t// console.log(`Array sorting is ${this.isSorting}, refreshing...`);\r\n\t\t\t// \t\t// this.refreshChart();\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><Bar data={this.state} width={100} height={50} ref={this.chartReference}/> </div>\r\n\t\t);\r\n\r\n\t}\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}