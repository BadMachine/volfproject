{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeFactory = void 0;\n\nvar NodeUtil_js_1 = require(\"./NodeUtil.js\");\n\nvar NodeFactory = function () {\n  function NodeFactory() {\n    this.mmlFactory = null;\n    this.factory = {\n      'node': NodeFactory.createNode,\n      'token': NodeFactory.createToken,\n      'text': NodeFactory.createText,\n      'error': NodeFactory.createError\n    };\n  }\n\n  NodeFactory.createNode = function (factory, kind, children, def, text) {\n    if (children === void 0) {\n      children = [];\n    }\n\n    if (def === void 0) {\n      def = {};\n    }\n\n    var node = factory.mmlFactory.create(kind);\n    var arity = node.arity;\n\n    if (arity === Infinity || arity === -1) {\n      if (children.length === 1 && children[0].isInferred) {\n        node.setChildren(NodeUtil_js_1.default.getChildren(children[0]));\n      } else {\n        node.setChildren(children);\n      }\n    } else {\n      var cleanChildren = [];\n\n      for (var i = 0, child = void 0; child = children[i]; i++) {\n        if (child.isInferred) {\n          var mrow = factory.mmlFactory.create('mrow', {}, NodeUtil_js_1.default.getChildren(child));\n          NodeUtil_js_1.default.copyAttributes(child, mrow);\n          cleanChildren.push(mrow);\n        } else {\n          cleanChildren.push(child);\n        }\n      }\n\n      node.setChildren(cleanChildren);\n    }\n\n    if (text) {\n      node.appendChild(text);\n    }\n\n    NodeUtil_js_1.default.setProperties(node, def);\n    return node;\n  };\n\n  NodeFactory.createToken = function (factory, kind, def, text) {\n    if (def === void 0) {\n      def = {};\n    }\n\n    if (text === void 0) {\n      text = '';\n    }\n\n    var textNode = factory.create('text', text);\n    return factory.create('node', kind, [], def, textNode);\n  };\n\n  NodeFactory.createText = function (factory, text) {\n    if (text == null) {\n      return null;\n    }\n\n    return factory.mmlFactory.create('text').setText(text);\n  };\n\n  NodeFactory.createError = function (factory, message) {\n    var text = factory.create('text', message);\n    var mtext = factory.create('node', 'mtext', [], {}, text);\n    var error = factory.create('node', 'merror', [mtext], {\n      'data-mjx-error': message\n    });\n    return error;\n  };\n\n  NodeFactory.prototype.setMmlFactory = function (mmlFactory) {\n    this.mmlFactory = mmlFactory;\n  };\n\n  NodeFactory.prototype.set = function (kind, func) {\n    this.factory[kind] = func;\n  };\n\n  NodeFactory.prototype.setCreators = function (maps) {\n    for (var kind in maps) {\n      this.set(kind, maps[kind]);\n    }\n  };\n\n  NodeFactory.prototype.create = function (kind) {\n    var rest = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    }\n\n    var func = this.factory[kind] || this.factory['node'];\n    var node = func.apply(void 0, __spread([this, rest[0]], rest.slice(1)));\n\n    if (kind === 'node') {\n      this.configuration.addNode(rest[0], node);\n    }\n\n    return node;\n  };\n\n  NodeFactory.prototype.get = function (kind) {\n    return this.factory[kind];\n  };\n\n  return NodeFactory;\n}();\n\nexports.NodeFactory = NodeFactory;","map":{"version":3,"sources":["../../../ts/input/tex/NodeFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAKA,IAAA,WAAA,GAAA,YAAA;AAAA,WAAA,WAAA,GAAA;AAaY,SAAA,UAAA,GAAyB,IAAzB;AAMF,SAAA,OAAA,GACN;AAAC,cAAQ,WAAW,CAAC,UAArB;AACC,eAAS,WAAW,CAAC,WADtB;AAEC,cAAQ,WAAW,CAAC,UAFrB;AAGC,eAAS,WAAW,CAAC;AAHtB,KADM;AAkJT;;AAlIe,EAAA,WAAA,CAAA,UAAA,GAAd,UAAyB,OAAzB,EAA+C,IAA/C,EACyB,QADzB,EACmD,GADnD,EAEyB,IAFzB,EAEwC;AADf,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,EAAA;AAAwB;;AAAE,QAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,GAAA,GAAA,EAAA;AAAa;;AAE9D,QAAM,IAAI,GAAG,OAAO,CAAC,UAAR,CAAmB,MAAnB,CAA0B,IAA1B,CAAb;AAKA,QAAM,KAAK,GAAG,IAAI,CAAC,KAAnB;;AACA,QAAI,KAAK,KAAK,QAAV,IAAsB,KAAK,KAAK,CAAC,CAArC,EAAwC;AACtC,UAAI,QAAQ,CAAC,MAAT,KAAoB,CAApB,IAAyB,QAAQ,CAAC,CAAD,CAAR,CAAY,UAAzC,EAAqD;AACnD,QAAA,IAAI,CAAC,WAAL,CAAiB,aAAA,CAAA,OAAA,CAAS,WAAT,CAAqB,QAAQ,CAAC,CAAD,CAA7B,CAAjB;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,WAAL,CAAiB,QAAjB;AACD;AACF,KAND,MAMO;AACL,UAAI,aAAa,GAAG,EAApB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,KAAK,GAAA,KAAA,CAArB,EAAuB,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAvC,EAA4C,CAAC,EAA7C,EAAiD;AAC/C,YAAI,KAAK,CAAC,UAAV,EAAsB;AACpB,cAAI,IAAI,GAAG,OAAO,CAAC,UAAR,CAAmB,MAAnB,CAA0B,MAA1B,EAAkC,EAAlC,EAAsC,aAAA,CAAA,OAAA,CAAS,WAAT,CAAqB,KAArB,CAAtC,CAAX;AACA,UAAA,aAAA,CAAA,OAAA,CAAS,cAAT,CAAwB,KAAxB,EAA+B,IAA/B;AACA,UAAA,aAAa,CAAC,IAAd,CAAmB,IAAnB;AACD,SAJD,MAIO;AACL,UAAA,aAAa,CAAC,IAAd,CAAmB,KAAnB;AACD;AACF;;AACD,MAAA,IAAI,CAAC,WAAL,CAAiB,aAAjB;AACD;;AACD,QAAI,IAAJ,EAAU;AACR,MAAA,IAAI,CAAC,WAAL,CAAiB,IAAjB;AACD;;AACD,IAAA,aAAA,CAAA,OAAA,CAAS,aAAT,CAAuB,IAAvB,EAA6B,GAA7B;AACA,WAAO,IAAP;AACD,GAjCa;;AA4CA,EAAA,WAAA,CAAA,WAAA,GAAd,UAA0B,OAA1B,EAAgD,IAAhD,EAC0B,GAD1B,EACyC,IADzC,EAC0D;AAAhC,QAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,GAAA,GAAA,EAAA;AAAa;;AAAE,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAiB;;AACxD,QAAM,QAAQ,GAAG,OAAO,CAAC,MAAR,CAAe,MAAf,EAAuB,IAAvB,CAAjB;AACA,WAAO,OAAO,CAAC,MAAR,CAAe,MAAf,EAAuB,IAAvB,EAA6B,EAA7B,EAAiC,GAAjC,EAAsC,QAAtC,CAAP;AACD,GAJa;;AAaA,EAAA,WAAA,CAAA,UAAA,GAAd,UAAyB,OAAzB,EAA+C,IAA/C,EAA2D;AACzD,QAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,WAAQ,OAAO,CAAC,UAAR,CAAmB,MAAnB,CAA0B,MAA1B,EAA+C,OAA/C,CAAuD,IAAvD,CAAR;AACD,GALa;;AAcA,EAAA,WAAA,CAAA,WAAA,GAAd,UAA0B,OAA1B,EAAgD,OAAhD,EAA+D;AAC7D,QAAI,IAAI,GAAG,OAAO,CAAC,MAAR,CAAe,MAAf,EAAuB,OAAvB,CAAX;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAf,EAAuB,OAAvB,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,IAAxC,CAAZ;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAf,EAAuB,QAAvB,EAAiC,CAAC,KAAD,CAAjC,EAA0C;AAAC,wBAAkB;AAAnB,KAA1C,CAAZ;AACA,WAAO,KAAP;AACD,GALa;;AAWP,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,UAArB,EAA2C;AACzC,SAAK,UAAL,GAAkB,UAAlB;AACD,GAFM;;AASA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,IAAX,EAAyB,IAAzB,EAAgD;AAC9C,SAAK,OAAL,CAAa,IAAb,IAAqB,IAArB;AACD,GAFM;;AASA,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,IAAnB,EAA4D;AAC1D,SAAK,IAAI,IAAT,IAAiB,IAAjB,EAAuB;AACrB,WAAK,GAAL,CAAS,IAAT,EAAe,IAAI,CAAC,IAAD,CAAnB;AACD;AACF,GAJM;;AAaA,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,IAAd,EAA0B;AAAE,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC1B,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAAb,KAAsB,KAAK,OAAL,CAAa,MAAb,CAAnC;AACA,QAAM,IAAI,GAAG,IAAI,CAAA,KAAJ,CAAI,KAAA,CAAJ,EAAI,QAAA,CAAA,CAAC,IAAD,EAAO,IAAI,CAAC,CAAD,CAAX,CAAA,EAAmB,IAAI,CAAC,KAAL,CAAW,CAAX,CAAnB,CAAJ,CAAb;;AACA,QAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,WAAK,aAAL,CAAmB,OAAnB,CAA2B,IAAI,CAAC,CAAD,CAA/B,EAAoC,IAApC;AACD;;AACD,WAAO,IAAP;AACD,GAPM;;AAaA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,IAAX,EAAuB;AACrB,WAAO,KAAK,OAAL,CAAa,IAAb,CAAP;AACD,GAFM;;AAIT,SAAA,WAAA;AAAC,CArKD,EAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeFactory = void 0;\nvar NodeUtil_js_1 = require(\"./NodeUtil.js\");\nvar NodeFactory = (function () {\n    function NodeFactory() {\n        this.mmlFactory = null;\n        this.factory = { 'node': NodeFactory.createNode,\n            'token': NodeFactory.createToken,\n            'text': NodeFactory.createText,\n            'error': NodeFactory.createError\n        };\n    }\n    NodeFactory.createNode = function (factory, kind, children, def, text) {\n        if (children === void 0) { children = []; }\n        if (def === void 0) { def = {}; }\n        var node = factory.mmlFactory.create(kind);\n        var arity = node.arity;\n        if (arity === Infinity || arity === -1) {\n            if (children.length === 1 && children[0].isInferred) {\n                node.setChildren(NodeUtil_js_1.default.getChildren(children[0]));\n            }\n            else {\n                node.setChildren(children);\n            }\n        }\n        else {\n            var cleanChildren = [];\n            for (var i = 0, child = void 0; child = children[i]; i++) {\n                if (child.isInferred) {\n                    var mrow = factory.mmlFactory.create('mrow', {}, NodeUtil_js_1.default.getChildren(child));\n                    NodeUtil_js_1.default.copyAttributes(child, mrow);\n                    cleanChildren.push(mrow);\n                }\n                else {\n                    cleanChildren.push(child);\n                }\n            }\n            node.setChildren(cleanChildren);\n        }\n        if (text) {\n            node.appendChild(text);\n        }\n        NodeUtil_js_1.default.setProperties(node, def);\n        return node;\n    };\n    NodeFactory.createToken = function (factory, kind, def, text) {\n        if (def === void 0) { def = {}; }\n        if (text === void 0) { text = ''; }\n        var textNode = factory.create('text', text);\n        return factory.create('node', kind, [], def, textNode);\n    };\n    NodeFactory.createText = function (factory, text) {\n        if (text == null) {\n            return null;\n        }\n        return factory.mmlFactory.create('text').setText(text);\n    };\n    NodeFactory.createError = function (factory, message) {\n        var text = factory.create('text', message);\n        var mtext = factory.create('node', 'mtext', [], {}, text);\n        var error = factory.create('node', 'merror', [mtext], { 'data-mjx-error': message });\n        return error;\n    };\n    NodeFactory.prototype.setMmlFactory = function (mmlFactory) {\n        this.mmlFactory = mmlFactory;\n    };\n    NodeFactory.prototype.set = function (kind, func) {\n        this.factory[kind] = func;\n    };\n    NodeFactory.prototype.setCreators = function (maps) {\n        for (var kind in maps) {\n            this.set(kind, maps[kind]);\n        }\n    };\n    NodeFactory.prototype.create = function (kind) {\n        var rest = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            rest[_i - 1] = arguments[_i];\n        }\n        var func = this.factory[kind] || this.factory['node'];\n        var node = func.apply(void 0, __spread([this, rest[0]], rest.slice(1)));\n        if (kind === 'node') {\n            this.configuration.addNode(rest[0], node);\n        }\n        return node;\n    };\n    NodeFactory.prototype.get = function (kind) {\n        return this.factory[kind];\n    };\n    return NodeFactory;\n}());\nexports.NodeFactory = NodeFactory;\n//# sourceMappingURL=NodeFactory.js.map"]},"metadata":{},"sourceType":"script"}