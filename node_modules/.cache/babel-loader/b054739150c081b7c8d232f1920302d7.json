{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bumpy\\\\WebstormProjects\\\\volfproject\\\\src\\\\components\\\\HeapSortChart.tsx\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { chartjsDataTemplate, generateColorsForChart } from '../interfaces/SortInterfaces';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HeapSortChart extends Component {\n  constructor(props) {\n    super(props);\n    this.chartReference = void 0;\n    this.chart = void 0;\n    this.timer = void 0;\n    this.isSorting = void 0;\n    this.interrupt = void 0;\n    this.uselessRefresh = void 0;\n    this.state = void 0;\n    this.props = void 0;\n    this.timeouts = void 0;\n    this.date = void 0;\n\n    this.heapify = (data, size, i) => {\n      let largest = i;\n      const left = i * 2 + 1;\n      const right = left + 1;\n\n      if (left < length && data[left] > data[largest]) {\n        largest = left;\n      }\n\n      if (right < length && data[right] > data[largest]) {\n        largest = right;\n      }\n\n      if (largest !== i) {\n        [data[i], data[largest]] = [data[largest], data[i]];\n        this.heapify(data, length, largest);\n      }\n\n      return data;\n    };\n\n    this.heapSort = () => {\n      const labels = this.chart.data.labels;\n      const data = this.chart.data.datasets[0].data;\n      const colors = this.chart.data.datasets[0].backgroundColor;\n      let timeout = 0;\n      const length = data.length;\n      let i = Math.floor(length / 2 - 1);\n      let k = length - 1;\n\n      while (i >= 0) {\n        this.heapify(data, length, i);\n        i--;\n        timeout += 100;\n        const theTimeout = this.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\n        this.timeouts.push(theTimeout);\n      }\n\n      while (k >= 0) {\n        [data[0], data[k]] = [data[k], data[0]];\n        this.heapify(data, k, 0);\n        k--;\n        timeout += 100;\n        const theTimeout = this.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\n        this.timeouts.push(theTimeout);\n      }\n    };\n\n    this.equals = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\n    this.state = chartjsDataTemplate;\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.timer = 0;\n    this.isSorting = false;\n    this.interrupt = false;\n    this.date = 0;\n    this.uselessRefresh = false;\n    this.timeouts = [];\n  }\n\n  componentDidMount() {\n    this.chart = this.chartReference.current.chartInstance;\n  }\n\n  updateChartDelayed(labels, data, colors, timeout) {\n    this.timer = setTimeout(() => {\n      const now = new Date().getTime();\n      const timeDifference = now - this.date;\n      const seconds = Math.floor(timeDifference % (1000 * 60) / 1000);\n      const mils = Math.floor(timeDifference % (1000 * 60) / 1);\n      this.isSorting = true;\n      this.chart.data.datasets[0].label = `${seconds}s ${mils.toString().substr(-3)}ms`;\n      this.chart.data.labels = labels;\n      this.chart.data.datasets[0].data = data;\n      this.chart.data.datasets[0].backgroundColor = colors;\n      this.chart.update();\n      const eth = [...this.chart.data.datasets[0].data].sort((x, y) => x - y);\n\n      if (eth.toString() === this.chart.data.datasets[0].data.toString()) {\n        this.props.callback();\n      }\n    }, timeout);\n    return this.timer;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  clearAllTimeouts() {\n    for (const timeout in this.timeouts) {\n      clearInterval(this.timeouts[timeout]);\n    }\n\n    this.timeouts = [];\n  }\n\n  refreshChart() {\n    //console.log(this.props.commands.arrayLength);\n    const temporaryDataToSort = chartjsDataTemplate;\n    temporaryDataToSort.datasets[0].data = Array.from({\n      length: this.props.commands.arrayLength\n    }, () => Math.floor(Math.random() * 1000));\n    temporaryDataToSort.labels = Array.from({\n      length: this.props.commands.arrayLength\n    }, (_, i) => (i + 1).toString());\n    [temporaryDataToSort.datasets[0].backgroundColor, temporaryDataToSort.datasets[0].borderColor] = generateColorsForChart(this.props.commands.arrayLength, 0.4);\n    this.setState(temporaryDataToSort);\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('HEAP TRIGGERED!');\n\n    if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\n      this.date = new Date(Date.now()).getTime();\n      this.clearAllTimeouts();\n\n      if (this.props.commands.StopSort) {\n        this.clearAllTimeouts();\n      } else if (this.props.commands.name !== prevProps.commands.name && this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n        this.clearAllTimeouts();\n        this.refreshChart();\n        setTimeout(() => {\n          this.heapSort();\n        }, 800);\n      } else if (this.props.commands.name !== prevProps.commands.name) {\n        this.heapSort();\n      } else if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\n        this.refreshChart();\n        this.clearAllTimeouts();\n        setTimeout(() => {\n          this.heapSort();\n        }, 800);\n      } else if (this.props.commands.arrayLength === prevProps.commands.arrayLength) {\n        this.refreshChart();\n        this.clearAllTimeouts();\n        setTimeout(() => {\n          this.heapSort();\n        }, 800);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        data: this.state,\n        width: 100,\n        height: 50,\n        options: {\n          legend: {\n            display: true,\n            position: 'top',\n            labels: {\n              boxWidth: 0\n            }\n          }\n        },\n        ref: this.chartReference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport const MemorizedHeapChart = /*#__PURE__*/React.memo(HeapSortChart);\n_c = MemorizedHeapChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemorizedHeapChart\");","map":{"version":3,"sources":["C:/Users/Bumpy/WebstormProjects/volfproject/src/components/HeapSortChart.tsx"],"names":["React","Component","Bar","chartjsDataTemplate","generateColorsForChart","HeapSortChart","constructor","props","chartReference","chart","timer","isSorting","interrupt","uselessRefresh","state","timeouts","date","heapify","data","size","i","largest","left","right","length","heapSort","labels","datasets","colors","backgroundColor","timeout","Math","floor","k","theTimeout","updateChartDelayed","slice","push","equals","a","b","JSON","stringify","createRef","componentDidMount","current","chartInstance","setTimeout","now","Date","getTime","timeDifference","seconds","mils","label","toString","substr","update","eth","sort","x","y","callback","componentWillUnmount","clearInterval","clearAllTimeouts","refreshChart","temporaryDataToSort","Array","from","commands","arrayLength","random","_","borderColor","setState","componentDidUpdate","prevProps","console","log","StopSort","name","render","legend","display","position","boxWidth","MemorizedHeapChart","memo"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport {CommandsInterface, chartjsDataTemplate, generateColorsForChart} from '../interfaces/SortInterfaces';\r\nimport {sortingStore} from './ModalContent';\r\nimport {heapSort} from '../redux/SortingStateReducer';\r\n\r\n\r\nclass HeapSortChart extends Component<CommandsInterface>{\r\n\tprivate chartReference: React.RefObject<any>;\r\n\tprivate chart: any;\r\n\tprivate timer: any;\r\n\tprivate isSorting: boolean;\r\n\tprivate interrupt: boolean;\r\n\tprivate uselessRefresh: boolean;\r\n\tpublic state;\r\n\tpublic props: any;\r\n\tprivate timeouts:number[];\r\n\tprivate date: number;\r\n\r\n\tconstructor(props: CommandsInterface) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = chartjsDataTemplate;\r\n\r\n\t\tthis.chartReference = React.createRef<any>();\r\n\r\n\t\tthis.timer = 0;\r\n\r\n\t\tthis.isSorting = false;\r\n\r\n\t\tthis.interrupt = false;\r\n\r\n\t\tthis.date = 0;\r\n\r\n\r\n\t\tthis.uselessRefresh = false;\r\n\t\tthis.timeouts = [];\r\n\r\n\t}\r\n\r\n\theapify = (data:number[], size:number, i:number) => {\r\n\t\tlet largest = i;\r\n\t\tconst left = i * 2 + 1;\r\n\t\tconst right = left + 1;\r\n\r\n\t\tif (left < length && data[left] > data[largest]) {\r\n\t\t\tlargest = left;\r\n\t\t}\r\n\r\n\t\tif (right < length && data[right] > data[largest]) {\r\n\t\t\tlargest = right;\r\n\t\t}\r\n\r\n\t\tif (largest !== i) {\r\n\t\t\t[data[i], data[largest]] = [data[largest], data[i]];\r\n\t\t\tthis.heapify(data, length, largest);\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\r\n\r\n\r\n\theapSort = () => {\r\n\t\tconst labels = this.chart.data.labels;\r\n\t\tconst data = this.chart.data.datasets[0].data;\r\n\t\tconst colors = this.chart.data.datasets[0].backgroundColor;\r\n\t\tlet timeout = 0;\r\n\r\n\t\tconst length = data.length;\r\n\t\tlet i = Math.floor(length / 2 - 1);\r\n\t\tlet k = length - 1;\r\n\r\n\t\twhile (i >= 0) {\r\n\t\t\tthis.heapify(data, length, i);\r\n\t\t\ti--;\r\n\t\t\ttimeout += 100;\r\n\t\t\tconst theTimeout = this.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\r\n\t\t\tthis.timeouts.push(theTimeout);\r\n\t\t}\r\n\r\n\t\twhile (k >= 0) {\r\n\t\t\t[data[0], data[k]] = [data[k], data[0]];\r\n\t\t\tthis.heapify(data, k, 0);\r\n\t\t\tk--;\r\n\t\t\ttimeout += 100;\r\n\t\t\tconst theTimeout = this.updateChartDelayed(labels.slice(0), data.slice(0), colors.slice(0), timeout);\r\n\t\t\tthis.timeouts.push(theTimeout);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\tequals = (a:number[], b:number[]) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.chart = this.chartReference.current.chartInstance;\r\n\t}\r\n\r\n\r\n\tupdateChartDelayed(labels: string[], data:number[], colors:string[], timeout:number) {\r\n\r\n\r\n\t\tthis.timer = setTimeout(() => {\r\n\r\n\t\t\tconst now = new Date().getTime();\r\n\r\n\t\t\tconst timeDifference  = now - this.date;\r\n\t\t\tconst seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\r\n\t\t\tconst mils = Math.floor((timeDifference % (1000 * 60)) / 1);\r\n\r\n\t\t\tthis.isSorting = true;\r\n\t\t\tthis.chart.data.datasets[0].label =  `${seconds}s ${mils.toString().substr(-3)}ms`  ;\r\n\t\t\tthis.chart.data.labels = labels;\r\n\t\t\tthis.chart.data.datasets[0].data = data;\r\n\t\t\tthis.chart.data.datasets[0].backgroundColor = colors;\r\n\t\t\tthis.chart.update();\r\n\r\n\t\t\tconst eth = [...this.chart.data.datasets[0].data].sort((x,y)=> x-y);\r\n\t\t\tif( eth.toString() === this.chart.data.datasets[0].data.toString()) {\r\n\t\t\t\tthis.props.callback();\r\n\t\t\t}\r\n\r\n\r\n\t\t}, timeout);\r\n\r\n\r\n\r\n\t\treturn this.timer;\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timer);\r\n\r\n\t}\r\n\r\n\r\n\tclearAllTimeouts(){\r\n\t\tfor(const timeout in this.timeouts){\r\n\t\t\tclearInterval(this.timeouts[timeout]);\r\n\t\t}\r\n\t\tthis.timeouts=[];\r\n\t}\r\n\r\n\trefreshChart(){\r\n\t\t//console.log(this.props.commands.arrayLength);\r\n\t\tconst temporaryDataToSort = chartjsDataTemplate;\r\n\t\ttemporaryDataToSort.datasets[0].data = Array.from({length: this.props.commands.arrayLength}, () => Math.floor(Math.random() * 1000));\r\n\t\ttemporaryDataToSort.labels = Array.from({ length: this.props.commands.arrayLength }, (_, i) => (i+1).toString());\r\n\t\t[temporaryDataToSort.datasets[0].backgroundColor, temporaryDataToSort.datasets[0].borderColor] = generateColorsForChart(this.props.commands.arrayLength, 0.4);\r\n\t\tthis.setState(temporaryDataToSort);\r\n\t}\r\n\r\n\r\n\tcomponentDidUpdate(prevProps:CommandsInterface) {\r\n\r\n\t\tconsole.log('HEAP TRIGGERED!');\r\n\r\n\t\tif(JSON.stringify(prevProps)!==JSON.stringify(this.props)) {\r\n\r\n\r\n\t\t\tthis.date = new Date(Date.now()).getTime();\r\n\r\n\t\t\tthis.clearAllTimeouts();\r\n\r\n\t\t\tif (this.props.commands.StopSort) {\r\n\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\r\n\t\t\t} else if (this.props.commands.name !== prevProps.commands.name && this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\t\t\t\tthis.refreshChart();\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.heapSort();\r\n\t\t\t\t}, 800);\r\n\t\t\t} else if (this.props.commands.name !== prevProps.commands.name) {\r\n\r\n\t\t\t\tthis.heapSort();\r\n\t\t\t} else if (this.props.commands.arrayLength !== prevProps.commands.arrayLength) {\r\n\r\n\t\t\t\tthis.refreshChart();\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.heapSort();\r\n\t\t\t\t}, 800);\r\n\r\n\t\t\t} else if (this.props.commands.arrayLength === prevProps.commands.arrayLength) {\r\n\r\n\t\t\t\tthis.refreshChart();\r\n\t\t\t\tthis.clearAllTimeouts();\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.heapSort();\r\n\t\t\t\t}, 800);\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><Bar data={this.state} width={100} height={50} options={{\r\n\t\t\t\tlegend: {\r\n\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\tposition: 'top',\r\n\t\t\t\t\tlabels: {\r\n\t\t\t\t\t\tboxWidth: 0,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}} ref={this.chartReference}/> </div>\r\n\t\t);\r\n\r\n\t}\r\n\r\n\r\n}\r\nexport const MemorizedHeapChart = React.memo(HeapSortChart);\r\n"]},"metadata":{},"sourceType":"module"}